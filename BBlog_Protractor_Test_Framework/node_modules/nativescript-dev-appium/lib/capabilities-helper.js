"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const glob = require("glob");
const path_1 = require("path");
const fs_1 = require("fs");
const utils_1 = require("./utils");
function resolveCapabilities(capsLocation, runType, projectDir, capabilitiesName, verbose = false) {
    if (!runType) {
        utils_1.logError(`Option "--runType" is mandatory!!!`);
        throw new Error(`Missing --runType option ${runType}`);
    }
    let caps;
    const capabilitiesConfigFile = searchCapabilities(capsLocation, projectDir, capabilitiesName, verbose);
    ;
    if (capabilitiesConfigFile) {
        const capabilitiesObject = JSON.parse(capabilitiesConfigFile.toString());
        const runTypeCaseInSensitive = Object.getOwnPropertyNames(capabilitiesObject).filter((v, i, a) => v.toLowerCase() === runType.toLowerCase())[0];
        caps = capabilitiesObject[runTypeCaseInSensitive];
    }
    if (!caps) {
        const msg = `No capabilities of type ${runType} found! Check you appium capabilities file!`;
        utils_1.logError(msg);
        utils_1.logInfo(`Available capabilities:`);
        console.dir(JSON.parse(capabilitiesConfigFile.toString()));
        throw new Error(msg);
    }
    return caps;
}
exports.resolveCapabilities = resolveCapabilities;
function searchCapabilities(capabilitiesLocation, projectDir, capabilitiesName, verbose = false) {
    let appiumCapabilitiesFile = undefined;
    if (fs_1.existsSync(capabilitiesLocation) && fs_1.statSync(capabilitiesLocation).isFile()) {
        appiumCapabilitiesFile = capabilitiesLocation;
        console.log(appiumCapabilitiesFile);
    }
    if (!appiumCapabilitiesFile) {
        utils_1.logInfo(`Search capabilities in ${capabilitiesLocation} for ${capabilitiesName}`);
        appiumCapabilitiesFile = searchCapabilitiesByFolder(capabilitiesLocation, capabilitiesName);
    }
    if (!appiumCapabilitiesFile) {
        utils_1.logInfo(`Search capabilities in ${projectDir}`);
        appiumCapabilitiesFile = searchCapabilitiesByFolder(projectDir, capabilitiesName);
    }
    if (!appiumCapabilitiesFile) {
        const parentRoot = path_1.dirname(projectDir);
        utils_1.logInfo(`Search capabilities in ${parentRoot}`);
        appiumCapabilitiesFile = searchCapabilitiesByFolder(parentRoot, capabilitiesName);
    }
    if (appiumCapabilitiesFile && fs_1.existsSync(appiumCapabilitiesFile)) {
        return seCapabilities(appiumCapabilitiesFile);
    }
    else {
        utils_1.logError(`We could not locate any file ${capabilitiesName}!`);
    }
    return appiumCapabilitiesFile;
}
exports.searchCapabilities = searchCapabilities;
const searchCapabilitiesByFolder = (location, capabilitiesName) => {
    const capabilitiesFiles = glob.sync(path_1.join(location, "/**/", capabilitiesName));
    utils_1.logInfo('Found files:', capabilitiesFiles);
    let capsFile = capabilitiesFiles && capabilitiesFiles.length > 0 ? capabilitiesFiles[0] : undefined;
    if (capsFile) {
        utils_1.logInfo('Peek first file:', capabilitiesFiles[0]);
    }
    else {
        utils_1.logWarn(`No appium capabilities file '${capabilitiesName}' found in '${location}'.`);
    }
    return capsFile;
};
const seCapabilities = appiumCapabilitiesLocation => {
    const file = fs_1.readFileSync(appiumCapabilitiesLocation);
    process.env.APPIUM_CAPABILITIES = file.toString();
    utils_1.logInfo(`Capabilities found at: ${appiumCapabilitiesLocation}`);
    return file;
};
//# sourceMappingURL=capabilities-helper.js.map