"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : new P(function (resolve) { resolve(result.value); }).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
Object.defineProperty(exports, "__esModule", { value: true });
const automation_name_1 = require("./automation-name");
const capabilities_helper_1 = require("./capabilities-helper");
const utils_1 = require("./utils");
const mobile_devices_controller_1 = require("mobile-devices-controller");
const fs_1 = require("fs");
const device_manager_1 = require("./device-manager");
const path_1 = require("path");
class NsCapabilities {
    constructor(_parser) {
        this._parser = _parser;
        this._testReporter = {};
        this.exceptions = new Array();
        this.projectDir = this._parser.projectDir;
        this.projectBinary = this._parser.projectBinary;
        this.pluginRoot = this._parser.pluginRoot;
        this.pluginBinary = this._parser.pluginBinary;
        this.appPath = this._parser.appPath;
        this.port = this._parser.port;
        this.verbose = this._parser.verbose;
        this.appiumCapsLocation = this._parser.appiumCapsLocation;
        this.relaxedSecurity = this._parser.relaxedSecurity;
        this.cleanApp = this._parser.cleanApp;
        this.attachToDebug = this._parser.attachToDebug;
        this.sessionId = this._parser.sessionId;
        this.startSession = this._parser.startSession;
        this.testFolder = this._parser.testFolder;
        this.storage = this._parser.storage;
        this.testReports = this._parser.testReports;
        this.devMode = this._parser.devMode;
        this.runType = this._parser.runType;
        this.isSauceLab = this._parser.isSauceLab;
        this.ignoreDeviceController = this._parser.ignoreDeviceController;
        this.wdaLocalPort = this._parser.wdaLocalPort;
        this.path = this._parser.path;
        this.capabilitiesName = this._parser.capabilitiesName;
        this.imagesPath = this._parser.imagesPath;
        this.appiumCaps = this._parser.appiumCaps;
        this.deviceTypeOrPlatform = this._parser.deviceTypeOrPlatform;
        this.device = this._parser.device;
        this.driverConfig = this._parser.driverConfig;
        this.logImageTypes = this._parser.logImageTypes;
    }
    get isAndroid() { return this.isAndroidPlatform(); }
    get isIOS() { return !this.isAndroid; }
    get automationName() { return this._automationName; }
    set automationName(automationName) {
        this._automationName = automationName;
    }
    setAutomationNameFromString(automationName) {
        const key = Object.keys(automation_name_1.AutomationName).filter((v, i, a) => v.toLowerCase() === automationName.toLowerCase());
        this.automationName = automation_name_1.AutomationName[key[0]];
    }
    /**
     * Set testReporter
     * @experimental
     */
    get testReporter() {
        return this._testReporter;
    }
    /**
     * Set testReporter name like mochawesome
     * Set testReporter context usually this
     * Set testReporter log method like addContext in mochawesome
     * @experimental
     */
    set testReporter(testReporter) {
        this._testReporter = testReporter;
        if (this.logImageTypes && this.logImageTypes.length > 0) {
            this._testReporter.logImageTypes = this.logImageTypes;
        }
    }
    get storageByDeviceName() {
        if (!this._storageByDeviceName) {
            this._storageByDeviceName = utils_1.getStorageByDeviceName(this);
        }
        return this._storageByDeviceName;
    }
    set storageByDeviceName(storageFullPath) {
        this._storageByDeviceName = storageFullPath;
    }
    get storageByPlatform() {
        if (!this._storageByPlatform) {
            this._storageByPlatform = utils_1.getStorageByPlatform(this);
        }
        return this._storageByPlatform;
    }
    set storageByPlatform(storageFullPath) {
        this._storageByPlatform = storageFullPath;
    }
    get reportsPath() {
        if (!this._reportsPath) {
            this._reportsPath = utils_1.getReportPath(this);
        }
        return this._reportsPath;
    }
    /**
     * @param text to log in test report
     */
    testReporterLog(text) {
        if (this._testReporter && this._testReporter.name === "mochawesome") {
            if (/\.\w{3,3}$/ig.test(text) && this._testReporter.reportDir) {
                if (!this._imagesReportDir) {
                    if (!fs_1.existsSync(this._testReporter.reportDir)) {
                        fs_1.mkdirSync(this._testReporter.reportDir);
                    }
                    const reportDir = this._testReporter.reportDir.replace(/^\.\//, "");
                    const reportDirs = reportDir.split("/");
                    const reportDirsSeparated = reportDirs.slice(1, reportDirs.length);
                    this._imagesReportDir = reportDirsSeparated.length > 0 ? reportDirsSeparated.join(path_1.sep) : `.`;
                }
                const imagesPath = `${this._imagesReportDir}${path_1.sep}${path_1.basename(text)}`.replace(/\/{2,9}/ig, "/");
                this._testReporter.log(this._testReporter.context, imagesPath);
                return imagesPath;
            }
            else {
                this._testReporter.log(this._testReporter.context, text);
                return text;
            }
        }
        return undefined;
    }
    extend(args) {
        Object.keys(args).forEach(key => {
            if (args[key]) {
                this[`_${key}`] = args[key];
                this[`${key}`] = args[key];
            }
        });
        return this;
    }
    validateArgs() {
        return __awaiter(this, void 0, void 0, function* () {
            if (this.attachToDebug || this.sessionId) {
                this.isValidated = true;
            }
            if (!this.driverConfig) {
                this.driverConfig = {};
                this.driverConfig.host = "localhost";
                this.driverConfig.port = this.port;
            }
            if (this.deviceTypeOrPlatform || this.device) {
                let searchQuery = {};
                if (this.deviceTypeOrPlatform) {
                    if (this.deviceTypeOrPlatform === mobile_devices_controller_1.Platform.ANDROID || this.deviceTypeOrPlatform === mobile_devices_controller_1.Platform.IOS) {
                        searchQuery.platform = this.deviceTypeOrPlatform;
                    }
                    else {
                        searchQuery.type = this.deviceTypeOrPlatform;
                    }
                }
                else {
                    Object.assign(searchQuery, this.device);
                }
                searchQuery.status = mobile_devices_controller_1.Status.BOOTED;
                const runningDevices = yield device_manager_1.DeviceManager.getDevices(searchQuery);
                if (runningDevices && runningDevices.length > 0) {
                    this.appiumCaps = this.appiumCaps || {};
                    const d = runningDevices[0];
                    const mandatoryAppiumCaps = {
                        "platformName": d.platform,
                        "noReset": true,
                        "fullReset": false,
                        "app": ""
                    };
                    Object.getOwnPropertyNames(mandatoryAppiumCaps).forEach(prop => {
                        if (!this.appiumCaps[prop]) {
                            this.appiumCaps[prop] = mandatoryAppiumCaps[prop];
                        }
                    });
                    this.appiumCaps.deviceName = d.name;
                    this.appiumCaps.platformVersion = d.apiLevel;
                    this.appiumCaps.udid = d.token;
                    this.appiumCaps["newCommandTimeout"] = 999999;
                    if (this.deviceTypeOrPlatform === "android") {
                        this.appiumCaps["lt"] = 60000;
                        this.appiumCaps["adbExecTimeout"] = 20000;
                    }
                    else {
                        this.appiumCaps["wdaConnectionTimeout"] = 999999;
                    }
                    this.device = d;
                    utils_1.logInfo("Using device: ", d);
                    utils_1.logInfo("appiumCaps: ", this.appiumCaps);
                }
                else {
                    utils_1.logError(`There is no running device of type:${this.deviceTypeOrPlatform}`);
                    utils_1.logInfo(`Use tns run ios/ android to install app on device!`);
                }
                this.devMode = true;
            }
            if (!this.attachToDebug && !this.sessionId) {
                this.appiumCaps = this.appiumCaps || capabilities_helper_1.resolveCapabilities(this.appiumCapsLocation || process.cwd(), this.runType, this.projectDir, this.capabilitiesName || "appium.capabilities.json");
                this.setAutomationName();
                this.resolveApplication();
                this.checkMandatoryCapabilities();
                this.throwExceptions();
                this.setResetOption();
                this.isValidated = true;
            }
            else {
                this.isValidated = false;
            }
        });
    }
    isAndroidPlatform() {
        return this.appiumCaps && this.appiumCaps ? this.appiumCaps.platformName.toLowerCase().includes("android") : undefined;
    }
    setResetOption() {
        if (this.attachToDebug || this.devMode) {
            this.appiumCaps["fullReset"] = false;
            this.appiumCaps["noReset"] = true;
            utils_1.logInfo("Changing appium setting fullReset: false and noReset: true ");
        }
        if (!this.isSauceLab && this.appiumCaps["fullReset"] === false && this.appiumCaps["noReset"] === true) {
            this.devMode = true;
            utils_1.logWarn("Running in devMode!");
            utils_1.logWarn("If the application is not installed on device, you can use 'tns run android/ ios' to install it!");
        }
        if (!this.ignoreDeviceController) {
            this.reuseDevice = !this.appiumCaps["fullReset"];
            this.appiumCaps["fullReset"] = false;
            if (!this.reuseDevice) {
                utils_1.logWarn("The started device will be killed after the session quits!");
                utils_1.logInfo("To avoid it, set 'fullReset: false' in appium capabilities.");
            }
            this.cleanApp = !this.appiumCaps["noReset"];
        }
    }
    tryGetApiLevel() {
        try {
            const apiLevel = this.appiumCaps["platformVersion"] || this.appiumCaps["apiLevel"];
            if (this.isAndroid && apiLevel) {
                return +apiLevel.split(".").splice(0, 2).join('.');
            }
            return +apiLevel;
        }
        catch (error) { }
        return undefined;
    }
    setAutomationName() {
        if (this.appiumCaps["automationName"]) {
            switch (this.appiumCaps["automationName"].toLowerCase()) {
                case automation_name_1.AutomationName.UiAutomator2.toString().toLowerCase():
                    this.automationName = automation_name_1.AutomationName.UiAutomator2;
                    break;
                case automation_name_1.AutomationName.Appium.toString().toLowerCase():
                    this.automationName = automation_name_1.AutomationName.Appium;
                    break;
                case automation_name_1.AutomationName.XCUITest.toString().toLowerCase():
                    this.automationName = automation_name_1.AutomationName.XCUITest;
                    break;
                case automation_name_1.AutomationName.UiAutomator1.toString().toLowerCase():
                    this.automationName = automation_name_1.AutomationName.UiAutomator1;
                    break;
            }
        }
        else {
            const apiLevel = +this.tryGetApiLevel();
            if (this.isAndroid) {
                if ((apiLevel >= 6 && apiLevel <= 17)
                    || apiLevel >= 23) {
                    this.automationName = automation_name_1.AutomationName.UiAutomator2;
                }
                else {
                    this.automationName = automation_name_1.AutomationName.UiAutomator1;
                }
            }
            if (this.isIOS) {
                if (apiLevel < 10) {
                    utils_1.logWarn("Provide automationName");
                }
                else {
                    this.automationName = automation_name_1.AutomationName.XCUITest;
                }
            }
        }
        if (this.automationName) {
            this.appiumCaps["automationName"] = this.automationName.toString();
            utils_1.logInfo(`Automation name set to: ${this.appiumCaps["automationName"]}`);
            console.log(`To change automation name, you need to set it in appium capabilities!`);
        }
        else {
            console.log(`Appium will use default automation name`);
        }
    }
    resolveApplication() {
        if (this.isSauceLab) {
            if (this.appPath) {
                this.appiumCaps.app = this.appPath.startsWith("http") ? this.appPath : `sauce-storage:${this.appPath}`;
            }
            if (!this.appiumCaps.app) {
                const errorMsg = "Neither appPath option nor capabilities.app provided!!!";
                utils_1.logError(errorMsg);
                throw new Error(errorMsg);
            }
            this.appPath = this.appiumCaps.app;
            this.ignoreDeviceController = true;
            utils_1.logInfo(`Using Sauce Labs. The application path is changed to: ${this.appiumCaps.app}`);
        }
        else {
            this.appiumCaps.app = utils_1.getAppPath(this);
            this.appPath = this.appiumCaps.app;
            utils_1.logInfo(`Application full path: ${this.appiumCaps.app}`);
        }
    }
    checkMandatoryCapabilities() {
        const appPackage = this.isAndroid ? "appPackage" : "bundleId";
        if (!this.isSauceLab && (!this.appiumCaps[appPackage] && !fs_1.existsSync(this.appiumCaps.app))) {
            this.exceptions.push(`The application folder doesn't exists or no ${appPackage} provided!`);
        }
        if (!this.runType && !this.appiumCaps) {
            this.exceptions.push("Missing runType or device type! Please select one from appium capabilities file!");
        }
        if (!this.appiumCaps) {
            this.exceptions.push("Missing appium capabilities!");
        }
        if (!this.appiumCaps.platformName) {
            utils_1.logWarn("Platform name is missing! Please, check appium capabilities file!");
        }
        if (!this.appiumCaps.platformVersion) {
            utils_1.logWarn("Platform version is missing! It would be better to set it in order to use the correct device!");
        }
        if (!this.appiumCaps.deviceName && !this.appiumCaps.udid) {
            utils_1.logWarn("The device name or udid are missing! Please, check appium capabilities file!");
        }
    }
    throwExceptions() {
        this.exceptions.forEach(msg => {
            utils_1.logError(msg);
        });
        if (this.exceptions.length > 0) {
            process.exit(1);
        }
    }
}
exports.NsCapabilities = NsCapabilities;
//# sourceMappingURL=ns-capabilities.js.map