"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : new P(function (resolve) { resolve(result.value); }).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
Object.defineProperty(exports, "__esModule", { value: true });
const child_process_1 = require("child_process");
const ns_capabilities_1 = require("../ns-capabilities");
const appium_server_1 = require("../appium-server");
const appium_driver_1 = require("../appium-driver");
const utils_1 = require("../utils");
const parser = require("../parser");
exports.nsCapabilities = new ns_capabilities_1.NsCapabilities(parser);
let server;
const startSession = () => __awaiter(this, void 0, void 0, function* () {
    if (!utils_1.isWin()) {
        child_process_1.execSync(utils_1.stopServerCommand(exports.nsCapabilities.port));
        console.log(utils_1.stopServerCommand(exports.nsCapabilities.port));
    }
    exports.nsCapabilities.validateArgs();
    exports.nsCapabilities.appiumCaps = exports.nsCapabilities.appiumCaps || {};
    exports.nsCapabilities.appiumCaps["newCommandTimeout"] = 300;
    server = new appium_server_1.AppiumServer(exports.nsCapabilities);
    yield server.start(exports.nsCapabilities.port);
    const driver = yield appium_driver_1.AppiumDriver.createAppiumDriver(exports.nsCapabilities);
    const session = yield driver.sessionId();
    utils_1.logInfo(`port: ${exports.nsCapabilities.port}`);
    utils_1.logInfo(`session id: ${session}`);
});
startSession().then(s => {
    utils_1.logInfo("session started");
});
process.once("uncaughtException", () => __awaiter(this, void 0, void 0, function* () {
    utils_1.logError(`uncaughtException!`);
}));
process.once("SIGINT", () => __awaiter(this, void 0, void 0, function* () {
    if (!utils_1.isWin()) {
        console.log(`stop server!`);
        child_process_1.execSync(utils_1.stopServerCommand(exports.nsCapabilities.port));
    }
    yield server.stop();
}));
//# sourceMappingURL=start-session.js.map