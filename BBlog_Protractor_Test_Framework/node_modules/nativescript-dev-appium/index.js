"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : new P(function (resolve) { resolve(result.value); }).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
Object.defineProperty(exports, "__esModule", { value: true });
const appium_server_1 = require("./lib/appium-server");
const appium_driver_1 = require("./lib/appium-driver");
const ns_capabilities_1 = require("./lib/ns-capabilities");
const frameComparerHelper = require("./lib/frame-comparer");
const device_manager_1 = require("./lib/device-manager");
const mobile_devices_controller_1 = require("mobile-devices-controller");
const utils_1 = require("./lib/utils");
const parser = require("./lib/parser");
var appium_driver_2 = require("./lib/appium-driver");
exports.AppiumDriver = appium_driver_2.AppiumDriver;
var appium_server_2 = require("./lib/appium-server");
exports.AppiumServer = appium_server_2.AppiumServer;
var element_helper_1 = require("./lib/element-helper");
exports.ElementHelper = element_helper_1.ElementHelper;
var ui_element_1 = require("./lib/ui-element");
exports.UIElement = ui_element_1.UIElement;
var point_1 = require("./lib/point");
exports.Point = point_1.Point;
var search_options_1 = require("./lib/search-options");
exports.SearchOptions = search_options_1.SearchOptions;
var locators_1 = require("./lib/locators");
exports.Locator = locators_1.Locator;
var device_manager_2 = require("./lib/device-manager");
exports.DeviceManager = device_manager_2.DeviceManager;
var frame_comparer_1 = require("./lib/frame-comparer");
exports.FrameComparer = frame_comparer_1.FrameComparer;
var log_types_1 = require("./lib/log-types");
exports.LogType = log_types_1.LogType;
var utils_2 = require("./lib/utils");
exports.logInfo = utils_2.logInfo;
exports.logError = utils_2.logError;
exports.logWarn = utils_2.logWarn;
var screenshot_manager_1 = require("./lib/helpers/screenshot-manager");
exports.screencapture = screenshot_manager_1.screencapture;
var log_image_type_1 = require("./lib/enums/log-image-type");
exports.LogImageType = log_image_type_1.LogImageType;
var image_helper_1 = require("./lib/image-helper");
exports.ImageHelper = image_helper_1.ImageHelper;
var device_orientation_1 = require("./lib/enums/device-orientation");
exports.DeviceOrientation = device_orientation_1.DeviceOrientation;
exports.nsCapabilities = new ns_capabilities_1.NsCapabilities(parser);
const appiumServer = new appium_server_1.AppiumServer(exports.nsCapabilities);
let frameComparer;
let appiumDriver = null;
if (exports.nsCapabilities.startSession) {
    startServer(exports.nsCapabilities.port).then(s => {
        createDriver().then((d) => {
            utils_1.logInfo("Session has started successfully!");
            d.sessionId().then(session => {
                utils_1.logInfo(`Session id: ${session}`);
                utils_1.logInfo(`Appium server port: ${appiumServer.port}`);
            }).catch(error => {
                utils_1.logError('Something went wrong! Appium driver failed to start. Check appium config file.');
                utils_1.logError(error);
            });
        }).catch(error => {
            utils_1.logError('Something went wrong! Appium driver failed to start. Check appium config file.');
            utils_1.logError(error);
        });
    }).catch(error => {
        utils_1.logError('Something went wrong! Appium server failed to start. Check appium config file!');
        utils_1.logError(error);
    });
}
function startServer(port, deviceManager) {
    return __awaiter(this, void 0, void 0, function* () {
        yield appiumServer.start(port || exports.nsCapabilities.port, deviceManager);
        yield attachToExitProcessHookup(appiumServer.server, "appium");
        return appiumServer;
    });
}
exports.startServer = startServer;
function stopServer() {
    return __awaiter(this, void 0, void 0, function* () {
        if (appiumDriver && appiumDriver.isAlive) {
            yield appiumDriver.quit();
        }
        if (appiumServer && appiumServer.server && !appiumServer.server.killed) {
            yield appiumServer.stop();
        }
        if (exports.nsCapabilities.cleanApp && !exports.nsCapabilities.ignoreDeviceController) {
            yield mobile_devices_controller_1.DeviceController.uninstallApplication(exports.nsCapabilities.device, exports.nsCapabilities.appPath);
            utils_1.logInfo("Application from device is uninstalled.");
        }
    });
}
exports.stopServer = stopServer;
;
function createDriver(args) {
    return __awaiter(this, void 0, void 0, function* () {
        if (args) {
            exports.nsCapabilities.extend(args);
        }
        if (!exports.nsCapabilities.port) {
            exports.nsCapabilities.port = appiumServer.port;
        }
        if (exports.nsCapabilities.attachToDebug) {
            if (!appiumDriver) {
                appiumDriver = yield appium_driver_1.AppiumDriver.createAppiumDriver(exports.nsCapabilities);
            }
            return appiumDriver;
        }
        if (!appiumServer.server && !exports.nsCapabilities.isSauceLab) {
            utils_1.logInfo("Server is not available! To start appium server programmaticÐ°lly use startServer()!");
        }
        if (!exports.nsCapabilities.appiumCapsLocation) {
            throw new Error("Provided path to appium capabilities is not correct!");
        }
        if (!exports.nsCapabilities.runType && !exports.nsCapabilities.appiumCaps) {
            throw new Error("--runType is missing! Make sure it is provided correctly! It is used to parse the configuration for appium driver!");
        }
        if (appiumDriver !== null && appiumDriver.isAlive) {
            return appiumDriver;
        }
        else if (appiumDriver === null) {
            appiumDriver = yield appium_driver_1.AppiumDriver.createAppiumDriver(exports.nsCapabilities);
        }
        else if (appiumDriver !== null && !appiumDriver.isAlive) {
            yield appiumDriver.init();
        }
        // Make sure to turn off "Don't keep activities"
        // in case of previous execution failure.
        yield device_manager_1.DeviceManager.setDontKeepActivities(exports.nsCapabilities, appiumDriver.driver, false);
        return appiumDriver;
    });
}
exports.createDriver = createDriver;
/**
 * Provide instance of FrameComparer in order to compare frames/ images from video
 * Please read carefully README.md before using it.
 * @throws exception in order the dependecies are not installed properly.
 */
function loadFrameComparer() {
    if (!frameComparer) {
        frameComparer = frameComparerHelper.loadFrameComparer(exports.nsCapabilities);
    }
    return frameComparer;
}
exports.loadFrameComparer = loadFrameComparer;
const killProcesses = (code) => __awaiter(this, void 0, void 0, function* () {
    console.log(`About to exit with code: ${code}`);
    if (appiumServer) {
        yield stopServer();
    }
    process.removeAllListeners();
    try {
        //if (isWin() && process) {
        // process.exit(0);
        //}
    }
    catch (error) { }
});
const attachToExitProcessHookup = (processToAttach, processName) => {
    const signals = ['exit', 'SIGHUP', 'SIGINT', 'SIGQUIT', 'SIGILL', 'SIGTRAP', 'SIGABRT',
        'SIGBUS', 'SIGFPE', 'SIGUSR1', 'SIGSEGV', 'SIGUSR2', 'SIGTERM'];
    if (!processToAttach) {
        return;
    }
    signals.forEach(function (sig) {
        processToAttach.once(sig, function () {
            return __awaiter(this, void 0, void 0, function* () {
                yield killProcesses(sig);
                console.log(`Exited from ${processName}`);
                processToAttach.removeListener(sig, killProcesses);
            });
        });
    });
};
//# sourceMappingURL=index.js.map