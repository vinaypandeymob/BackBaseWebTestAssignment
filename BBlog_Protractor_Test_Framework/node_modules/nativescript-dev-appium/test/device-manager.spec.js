"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : new P(function (resolve) { resolve(result.value); }).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
Object.defineProperty(exports, "__esModule", { value: true });
const device_manager_1 = require("../lib/device-manager");
const ns_capabilities_1 = require("../lib/ns-capabilities");
const mobile_devices_controller_1 = require("mobile-devices-controller");
const chai_1 = require("chai");
const index_1 = require("../index");
const appium_server_1 = require("../lib/appium-server");
const appium_driver_1 = require("../lib/appium-driver");
const capabilities_helper_1 = require("../lib/capabilities-helper");
const outDir = `${process.cwd()}/test/out`;
const androidApp = `${outDir}/template-hello-world-ts-release.apk`;
const iosApp = `${outDir}/template-hello-world-ts.app`;
const remoteStorage = "/tns-dist";
// For local run
// if (!existsSync(outDir)) {
//     mkdirSync(outDir);
// }
// if (!existsSync(`${outDir}/template-hello-world-ts-release.apk`)) {
//     execSync(`cp ${remoteStorage}/TestApps/Stable/Android/template-hello-world-ts-release.apk ${outDir}`);
// }
// if (!existsSync(`${outDir}/vue-cli-template-simple-release.apk`)) {
//     execSync(`cp ${remoteStorage}/TestApps/Stable/Android/vue-cli-template-simple-release.apk ${outDir}`);
// }
// if (!existsSync(`${outDir}/template-hello-world-ts.app`)) {
//     execSync(`cp ${remoteStorage}/TestApps/Stable/iOS/template-hello-world-ts.tgz ${outDir}`);
//     execSync("tar xf template-hello-world-ts.tgz", { cwd: outDir });
// }
describe("android-devices", () => {
    let deviceManager;
    const appiumArgs = index_1.nsCapabilities;
    before("Init: DeviceManager", () => {
        mobile_devices_controller_1.DeviceController.killAll(mobile_devices_controller_1.DeviceType.EMULATOR);
        deviceManager = new device_manager_1.DeviceManager();
        appiumArgs.extend({ appiumCaps: { platformName: mobile_devices_controller_1.Platform.ANDROID, fullReset: false } });
    });
    after("Kill all emulators", () => {
        mobile_devices_controller_1.DeviceController.killAll(mobile_devices_controller_1.DeviceType.EMULATOR);
    });
    it("Start emulator", () => __awaiter(this, void 0, void 0, function* () {
        const device = yield deviceManager.startDevice(appiumArgs);
        let foundBootedDevices = yield mobile_devices_controller_1.DeviceController.getDevices({ platform: mobile_devices_controller_1.Platform.ANDROID, status: mobile_devices_controller_1.Status.BOOTED });
        chai_1.assert.isTrue(foundBootedDevices.some(d => d.token === device.token));
        yield deviceManager.stopDevice(device, appiumArgs);
        foundBootedDevices = yield mobile_devices_controller_1.DeviceController.getDevices({ platform: mobile_devices_controller_1.Platform.ANDROID, status: mobile_devices_controller_1.Status.BOOTED });
        chai_1.assert.isTrue(!foundBootedDevices.some(d => d.token === device.token));
    }));
    it("Start emulator when already started", () => __awaiter(this, void 0, void 0, function* () {
        appiumArgs.extend({ appiumCaps: { platformName: mobile_devices_controller_1.Platform.ANDROID, fullReset: true } });
        const device = yield deviceManager.startDevice(appiumArgs);
        let foundBootedDevices = yield mobile_devices_controller_1.DeviceController.getDevices({ platform: mobile_devices_controller_1.Platform.ANDROID, status: mobile_devices_controller_1.Status.BOOTED });
        chai_1.assert.isTrue(foundBootedDevices.some(d => d.token === device.token));
        yield deviceManager.stopDevice(device, appiumArgs);
        foundBootedDevices = yield mobile_devices_controller_1.DeviceController.getDevices({ platform: mobile_devices_controller_1.Platform.ANDROID, status: mobile_devices_controller_1.Status.BOOTED, token: device.token });
        chai_1.assert.isTrue(!foundBootedDevices || foundBootedDevices.length === 0);
    }));
});
describe("ios-devices", () => {
    let deviceManager;
    let appiumArgs;
    before("Init: DeviceManager", () => {
        deviceManager = new device_manager_1.DeviceManager();
        appiumArgs = new ns_capabilities_1.NsCapabilities({});
        appiumArgs.extend({ appiumCaps: { platformName: mobile_devices_controller_1.Platform.IOS, fullReset: false, deviceName: /iPhone X/ } });
        appiumArgs.setResetOption();
    });
    after("Kill all simulators", () => {
        mobile_devices_controller_1.DeviceController.killAll(mobile_devices_controller_1.DeviceType.SIMULATOR);
    });
    it("Start simulator fullReset: false, should not kill device", () => __awaiter(this, void 0, void 0, function* () {
        const device = yield deviceManager.startDevice(appiumArgs);
        let foundBootedDevices = yield mobile_devices_controller_1.DeviceController.getDevices({ platform: mobile_devices_controller_1.Platform.IOS, status: mobile_devices_controller_1.Status.BOOTED });
        chai_1.assert.isTrue(foundBootedDevices.some(d => d.token === device.token));
        yield deviceManager.stopDevice(device, appiumArgs);
        foundBootedDevices = yield mobile_devices_controller_1.DeviceController.getDevices({ platform: mobile_devices_controller_1.Platform.IOS, status: mobile_devices_controller_1.Status.BOOTED });
        chai_1.assert.isTrue(foundBootedDevices.some(d => d.token === device.token));
    }));
    it("Start simulator fullReset: true, should kill device", () => __awaiter(this, void 0, void 0, function* () {
        appiumArgs.extend({ appiumCaps: { platformName: mobile_devices_controller_1.Platform.IOS, fullReset: true, deviceName: /iPhone X/ } });
        appiumArgs.setResetOption();
        const device = yield deviceManager.startDevice(appiumArgs);
        let foundBootedDevices = yield mobile_devices_controller_1.DeviceController.getDevices({ platform: mobile_devices_controller_1.Platform.IOS, status: mobile_devices_controller_1.Status.BOOTED });
        chai_1.assert.isTrue(foundBootedDevices.some(d => d.token === device.token));
        yield deviceManager.stopDevice(device, appiumArgs);
        foundBootedDevices = yield mobile_devices_controller_1.DeviceController.getDevices({ platform: mobile_devices_controller_1.Platform.IOS, status: mobile_devices_controller_1.Status.BOOTED, token: device.token });
        chai_1.assert.isTrue(!foundBootedDevices || foundBootedDevices.length === 0);
    }));
});
describe("find-capabilities", () => __awaiter(this, void 0, void 0, function* () {
    const caps = capabilities_helper_1.resolveCapabilities("../samples", "android23", ".", "appium.capabilities.json");
    chai_1.assert.isTrue(caps.deviceName === "Emulator-Api23-Default");
}));
describe("start-appium-server-android", () => __awaiter(this, void 0, void 0, function* () {
    before("Init capabilities", () => {
    });
    after("after all ", () => __awaiter(this, void 0, void 0, function* () {
        mobile_devices_controller_1.DeviceController.killAll(mobile_devices_controller_1.DeviceType.EMULATOR);
    }));
    it("Start server", () => __awaiter(this, void 0, void 0, function* () {
        const nsCaps = new ns_capabilities_1.NsCapabilities({
            port: 8799,
            appPath: androidApp,
            appiumCaps: {
                platformName: mobile_devices_controller_1.Platform.ANDROID,
                fullReset: false
            },
        });
        const server = new appium_server_1.AppiumServer(nsCaps);
        yield server.start(nsCaps.port);
        chai_1.assert.isTrue(server.hasStarted);
        yield server.stop();
        const startTime = Date.now();
        while (!server.server.killed && Date.now() - startTime < 5000) { }
        chai_1.assert.isTrue(server.server.killed, "Process is not killed");
    }));
    it("Start appium driver", () => __awaiter(this, void 0, void 0, function* () {
        const nsCaps = new ns_capabilities_1.NsCapabilities({
            appPath: androidApp,
            testReports: `${process.cwd()}/test`,
            port: 9900,
            appiumCaps: {
                platformName: mobile_devices_controller_1.Platform.ANDROID,
                fullReset: true
            },
        });
        const server = new appium_server_1.AppiumServer(nsCaps);
        yield server.start(nsCaps.port);
        chai_1.assert.isTrue(server.hasStarted);
        const driver = yield appium_driver_1.AppiumDriver.createAppiumDriver(nsCaps);
        let currentWindowName = mobile_devices_controller_1.AndroidController.getCurrentFocusedScreen(nsCaps.device);
        const startTime = Date.now();
        while (!currentWindowName.includes("com.tns.NativeScriptActivity") && Date.now() - startTime < 5000) {
            console.log(currentWindowName);
            currentWindowName = mobile_devices_controller_1.AndroidController.getCurrentFocusedScreen(nsCaps.device);
        }
        chai_1.assert.isTrue(currentWindowName.includes("com.tns.NativeScriptActivity"), `Focused screen doesn't include activity ${currentWindowName}!`);
        yield driver.quit();
        yield server.stop();
    }));
}));
describe("start-appium-server-ios", () => __awaiter(this, void 0, void 0, function* () {
    before("Init capabilities", () => {
    });
    after("after all ", () => __awaiter(this, void 0, void 0, function* () {
        yield mobile_devices_controller_1.IOSController.killAll();
    }));
    it("Start server", () => __awaiter(this, void 0, void 0, function* () {
        const nsCaps = new ns_capabilities_1.NsCapabilities({
            appPath: iosApp,
            port: 8799,
            appiumCaps: {
                platformName: mobile_devices_controller_1.Platform.IOS,
                deviceName: /^iPhone 6$/,
                platformVersion: "11.2",
                fullReset: false
            },
        });
        const server = new appium_server_1.AppiumServer(nsCaps);
        yield server.start(nsCaps.port);
        chai_1.assert.isTrue(server.hasStarted);
        yield server.stop();
        const startTime = Date.now();
        while (!server.server.killed && Date.now() - startTime < 5000) { }
        chai_1.assert.isTrue(server.server.killed, "Process is not killed");
    }));
    it("Start appium driver", () => __awaiter(this, void 0, void 0, function* () {
        const nsCaps = new ns_capabilities_1.NsCapabilities({
            port: 8822,
            appPath: iosApp,
            appiumCaps: {
                platformName: mobile_devices_controller_1.Platform.IOS,
                deviceName: /^iPhone XR 12$/,
                platformVersion: "12.2",
                fullReset: true
            },
            verbose: false
        });
        const server = new appium_server_1.AppiumServer(nsCaps);
        yield server.start(nsCaps.port);
        chai_1.assert.isTrue(server.hasStarted);
        const driver = yield appium_driver_1.AppiumDriver.createAppiumDriver(nsCaps);
        yield driver.quit();
        yield server.stop();
    }));
}));
describe("start-device-by-apiLevel", () => __awaiter(this, void 0, void 0, function* () {
    it("test-start-emulator-apiLevel-6.0", () => __awaiter(this, void 0, void 0, function* () {
        const nsCaps = new ns_capabilities_1.NsCapabilities({
            port: 8799,
            runType: "android23",
            appPath: androidApp,
            appiumCaps: {
                platformVersion: "6.0",
                platformName: mobile_devices_controller_1.Platform.ANDROID,
                fullReset: true
            }
        });
        const server = new appium_server_1.AppiumServer(nsCaps);
        yield server.start(nsCaps.port);
        const driver = yield appium_driver_1.AppiumDriver.createAppiumDriver(nsCaps);
        const currentWindowName = mobile_devices_controller_1.AndroidController.getCurrentFocusedScreen(nsCaps.device);
        const startTime = Date.now();
        while (!currentWindowName.includes("com.tns.NativeScriptActivity") && Date.now() - startTime < 5000) { }
        chai_1.assert.isTrue(currentWindowName.includes("com.tns.NativeScriptActivity"), `Focused screen doesn't include activity ${currentWindowName}!`);
        yield driver.quit();
        yield server.stop();
    }));
    it("test-start-simulator-apiLevel-12.", () => __awaiter(this, void 0, void 0, function* () {
        const nsCaps = new ns_capabilities_1.NsCapabilities({
            appPath: iosApp,
            port: 8887,
            appiumCaps: {
                platformVersion: /12.||11./,
                platformName: mobile_devices_controller_1.Platform.IOS,
                fullReset: true
            }
        });
        const server = new appium_server_1.AppiumServer(nsCaps);
        yield server.start(nsCaps.port);
        const driver = yield appium_driver_1.AppiumDriver.createAppiumDriver(nsCaps);
        const apps = mobile_devices_controller_1.IOSController.getInstalledApplications(nsCaps.device);
        const isInstalled = apps.some(app => app.includes(nsCaps.appiumCaps.bundleId));
        chai_1.assert.isTrue(isInstalled);
        yield driver.quit();
        yield server.stop();
    }));
}));
describe("dev-mode-options", () => __awaiter(this, void 0, void 0, function* () {
    let appiumServer;
    const port = 8399;
    before("start devices", () => __awaiter(this, void 0, void 0, function* () {
        yield mobile_devices_controller_1.DeviceController.startDevice({ platform: mobile_devices_controller_1.Platform.ANDROID, apiLevel: "23" });
        yield mobile_devices_controller_1.DeviceController.startDevice({ platform: mobile_devices_controller_1.Platform.IOS, apiLevel: "12.2", name: "iPhone XR 12" });
        appiumServer = new appium_server_1.AppiumServer({});
        yield appiumServer.start(8399);
    }));
    after("kill server", () => __awaiter(this, void 0, void 0, function* () {
        yield mobile_devices_controller_1.DeviceController.killAll(mobile_devices_controller_1.DeviceType.EMULATOR);
        yield mobile_devices_controller_1.DeviceController.killAll(mobile_devices_controller_1.DeviceType.SIMULATOR);
        yield appiumServer.stop();
    }));
    it("test ios", () => __awaiter(this, void 0, void 0, function* () {
        const nsCaps = new ns_capabilities_1.NsCapabilities({
            deviceTypeOrPlatform: mobile_devices_controller_1.Platform.IOS,
            appPath: iosApp,
            port: port,
            verbose: true
        });
        const appiumDriver = yield appium_driver_1.AppiumDriver.createAppiumDriver(nsCaps);
        chai_1.assert.isTrue(appiumDriver.nsCapabilities.device.platform === mobile_devices_controller_1.Platform.IOS);
        chai_1.assert.isDefined(appiumDriver.nsCapabilities.appiumCaps.app);
        yield appiumDriver.quit();
    }));
    it("test android", () => __awaiter(this, void 0, void 0, function* () {
        const nsCaps = new ns_capabilities_1.NsCapabilities({
            deviceTypeOrPlatform: mobile_devices_controller_1.Platform.ANDROID,
            appPath: androidApp,
            port: port,
        });
        const appiumDriver = yield appium_driver_1.AppiumDriver.createAppiumDriver(nsCaps);
        chai_1.assert.isTrue(appiumDriver.nsCapabilities.device.platform === mobile_devices_controller_1.Platform.ANDROID);
        chai_1.assert.isDefined(appiumDriver.nsCapabilities.appiumCaps.app);
        yield appiumDriver.quit();
    }));
    it("test --device.platform=android", () => __awaiter(this, void 0, void 0, function* () {
        const nsCaps = new ns_capabilities_1.NsCapabilities({
            device: { platform: mobile_devices_controller_1.Platform.ANDROID },
            appPath: androidApp,
            port: port
        });
        const appiumDriver = yield appium_driver_1.AppiumDriver.createAppiumDriver(nsCaps);
        chai_1.assert.isTrue(appiumDriver.nsCapabilities.device.platform === mobile_devices_controller_1.Platform.ANDROID);
        chai_1.assert.isDefined(appiumDriver.nsCapabilities.appiumCaps.app);
        yield appiumDriver.quit();
    }));
    it("test --device.platform=ios", () => __awaiter(this, void 0, void 0, function* () {
        const nsCaps = new ns_capabilities_1.NsCapabilities({
            device: { platform: mobile_devices_controller_1.Platform.IOS },
            appPath: iosApp,
            port: port
        });
        const appiumDriver = yield appium_driver_1.AppiumDriver.createAppiumDriver(nsCaps);
        chai_1.assert.isTrue(appiumDriver.nsCapabilities.device.platform === mobile_devices_controller_1.Platform.IOS);
        chai_1.assert.isDefined(appiumDriver.nsCapabilities.appiumCaps.app);
        yield appiumDriver.quit();
    }));
}));
//# sourceMappingURL=device-manager.spec.js.map