"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
Object.defineProperty(exports, "__esModule", { value: true });
const enums_1 = require("../enums");
const android_virtual_device_1 = require("../android/android-virtual-device");
const ios_virtual_device_1 = require("../ios/ios-virtual-device");
class VirtualDeviceController {
    constructor(type) {
        this._virtualDevice = type === enums_1.Platform.ANDROID ? new android_virtual_device_1.AndroidVirtualDevice() : new ios_virtual_device_1.IOSVirtualDevice();
    }
    get virtualDevice() {
        return this._virtualDevice;
    }
    startDevice(deviceInfo, options) {
        return __awaiter(this, void 0, void 0, function* () {
            return yield this._virtualDevice.startDevice(deviceInfo, options);
        });
    }
    stopDevice() {
        return __awaiter(this, void 0, void 0, function* () {
            return yield this._virtualDevice.stopDevice();
        });
    }
    attachToDevice(deviceInfo) {
        return __awaiter(this, void 0, void 0, function* () {
            return yield this._virtualDevice.attachToDevice(deviceInfo);
        });
    }
}
exports.VirtualDeviceController = VirtualDeviceController;
//# sourceMappingURL=virtual-device-controller.js.map