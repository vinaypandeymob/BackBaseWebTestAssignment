"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.Simctl = exports.default = void 0;

require("source-map-support/register");

var _lodash = _interopRequireDefault(require("lodash"));

var _index = _interopRequireDefault(require("./subcommands/index.js"));

var _which = _interopRequireDefault(require("which"));

var _logger = _interopRequireDefault(require("./logger"));

var _helpers = require("./helpers");

var _teen_process = require("teen_process");

const SIMCTL_ENV_PREFIX = 'SIMCTL_CHILD_';
const DEFAULT_OPTS = {
  xcrun: {
    path: null
  },
  execTimeout: _helpers.DEFAULT_EXEC_TIMEOUT,
  logErrors: true
};

class Simctl {
  constructor(opts = {}) {
    opts = _lodash.default.cloneDeep(opts);

    _lodash.default.defaultsDeep(opts, DEFAULT_OPTS);

    for (const key of _lodash.default.keys(DEFAULT_OPTS)) {
      this[key] = opts[key];
    }

    this._udid = _lodash.default.isNil(opts.udid) ? null : opts.udid;
  }

  set udid(value) {
    this._udid = value;
  }

  get udid() {
    return this._udid;
  }

  requireUdid(commandName = null) {
    if (!this.udid) {
      throw new Error(`udid is required to be set for ` + (commandName ? `the '${commandName}' command` : 'this simctl command'));
    }

    return this.udid;
  }

  async requireXcrun() {
    if (!this.xcrun.path) {
      try {
        this.xcrun.path = await (0, _which.default)(_helpers.XCRUN_BINARY);
      } catch (e) {
        throw new Error(`${_helpers.XCRUN_BINARY} tool has not been found in PATH. ` + `Are Xcode developers tools installed?`);
      }
    }

    return this.xcrun.path;
  }

  async exec(subcommand, opts = {}) {
    let {
      args = [],
      env = {},
      asynchronous = false,
      encoding
    } = opts;
    args = ['simctl', subcommand, ...args];
    env = _lodash.default.defaults(_lodash.default.mapKeys(env, (value, key) => _lodash.default.startsWith(key, SIMCTL_ENV_PREFIX) ? key : `${SIMCTL_ENV_PREFIX}${key}`), process.env);
    const execOpts = {
      env,
      encoding
    };

    if (!asynchronous) {
      execOpts.timeout = this.execTimeout;
    }

    const xcrun = await this.requireXcrun();

    try {
      return asynchronous ? new _teen_process.SubProcess(xcrun, args, execOpts) : await (0, _teen_process.exec)(xcrun, args, execOpts);
    } catch (e) {
      if (!this.logErrors) {
        throw e;
      } else if (e.stderr) {
        const msg = `Error running '${subcommand}': ${e.stderr.trim()}`;

        _logger.default.debug(msg);

        throw Error(msg);
      } else {
        _logger.default.debug(e.message);

        throw e;
      }
    }
  }

}

exports.Simctl = Simctl;

for (const [fnName, fn] of _lodash.default.toPairs(_index.default)) {
  Simctl.prototype[fnName] = fn;
}

var _default = Simctl;
exports.default = _default;require('source-map-support').install();


//# sourceMappingURL=data:application/json;charset=utf8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbImxpYi9zaW1jdGwuanMiXSwibmFtZXMiOlsiU0lNQ1RMX0VOVl9QUkVGSVgiLCJERUZBVUxUX09QVFMiLCJ4Y3J1biIsInBhdGgiLCJleGVjVGltZW91dCIsIkRFRkFVTFRfRVhFQ19USU1FT1VUIiwibG9nRXJyb3JzIiwiU2ltY3RsIiwiY29uc3RydWN0b3IiLCJvcHRzIiwiXyIsImNsb25lRGVlcCIsImRlZmF1bHRzRGVlcCIsImtleSIsImtleXMiLCJfdWRpZCIsImlzTmlsIiwidWRpZCIsInZhbHVlIiwicmVxdWlyZVVkaWQiLCJjb21tYW5kTmFtZSIsIkVycm9yIiwicmVxdWlyZVhjcnVuIiwiWENSVU5fQklOQVJZIiwiZSIsImV4ZWMiLCJzdWJjb21tYW5kIiwiYXJncyIsImVudiIsImFzeW5jaHJvbm91cyIsImVuY29kaW5nIiwiZGVmYXVsdHMiLCJtYXBLZXlzIiwic3RhcnRzV2l0aCIsInByb2Nlc3MiLCJleGVjT3B0cyIsInRpbWVvdXQiLCJTdWJQcm9jZXNzIiwic3RkZXJyIiwibXNnIiwidHJpbSIsImxvZyIsImRlYnVnIiwibWVzc2FnZSIsImZuTmFtZSIsImZuIiwidG9QYWlycyIsInN1YmNvbW1hbmRzIiwicHJvdG90eXBlIl0sIm1hcHBpbmdzIjoiOzs7Ozs7Ozs7OztBQUFBOztBQUNBOztBQUNBOztBQUNBOztBQUNBOztBQUdBOztBQUVBLE1BQU1BLGlCQUFpQixHQUFHLGVBQTFCO0FBQ0EsTUFBTUMsWUFBWSxHQUFHO0FBQ25CQyxFQUFBQSxLQUFLLEVBQUU7QUFDTEMsSUFBQUEsSUFBSSxFQUFFO0FBREQsR0FEWTtBQUluQkMsRUFBQUEsV0FBVyxFQUFFQyw2QkFKTTtBQUtuQkMsRUFBQUEsU0FBUyxFQUFFO0FBTFEsQ0FBckI7O0FBeUNBLE1BQU1DLE1BQU4sQ0FBYTtBQUlYQyxFQUFBQSxXQUFXLENBQUVDLElBQUksR0FBRyxFQUFULEVBQWE7QUFDdEJBLElBQUFBLElBQUksR0FBR0MsZ0JBQUVDLFNBQUYsQ0FBWUYsSUFBWixD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QkFBaUJiLFVBQVcsTUFBS0YsQ0FBQyxDQUFDYyxNQUFGLENBQVNFLElBQVQsRUFBZ0IsRUFBOUQ7O0FBQ0FDLHdCQUFJQyxLQUFKLENBQVVILEdBQVY7O0FBQ0EsY0FBTWxCLEtBQUssQ0FBQ2tCLEdBQUQsQ0FBWDtBQUNELE9BSk0sTUFJQTtBQUNMRSx3QkFBSUMsS0FBSixDQUFVbEIsQ0FBQyxDQUFDbUIsT0FBWjs7QUFDQSxjQUFNbkIsQ0FBTjtBQUNEO0FBQ0Y7QUFDRjs7QUE1RlU7Ozs7QUFpR2IsS0FBSyxNQUFNLENBQUNvQixNQUFELEVBQVNDLEVBQVQsQ0FBWCxJQUEyQm5DLGdCQUFFb0MsT0FBRixDQUFVQyxjQUFWLENBQTNCLEVBQW1EO0FBQ2pEeEMsRUFBQUEsTUFBTSxDQUFDeUMsU0FBUCxDQUFpQkosTUFBakIsSUFBMkJDLEVBQTNCO0FBQ0Q7O2VBRWN0QyxNIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IF8gZnJvbSAnbG9kYXNoJztcbmltcG9ydCBzdWJjb21tYW5kcyBmcm9tICcuL3N1YmNvbW1hbmRzL2luZGV4LmpzJztcbmltcG9ydCB3aGljaCBmcm9tICd3aGljaCc7XG5pbXBvcnQgbG9nIGZyb20gJy4vbG9nZ2VyJztcbmltcG9ydCB7XG4gIERFRkFVTFRfRVhFQ19USU1FT1VULCBYQ1JVTl9CSU5BUlksXG59IGZyb20gJy4vaGVscGVycyc7XG5pbXBvcnQgeyBleGVjIGFzIHRwRXhlYywgU3ViUHJvY2VzcyB9IGZyb20gJ3RlZW5fcHJvY2Vzcyc7XG5cbmNvbnN0IFNJTUNUTF9FTlZfUFJFRklYID0gJ1NJTUNUTF9DSElMRF8nO1xuY29uc3QgREVGQVVMVF9PUFRTID0ge1xuICB4Y3J1bjoge1xuICAgIHBhdGg6IG51bGwsXG4gIH0sXG4gIGV4ZWNUaW1lb3V0OiBERUZBVUxUX0VYRUNfVElNRU9VVCxcbiAgbG9nRXJyb3JzOiB0cnVlLFxufTtcblxuLyoqXG4gKiBAdHlwZWRlZiB7T2JqZWN0fSBFeGVjT3B0c1xuICogQHByb3BlcnR5IHtBcnJheS48c3RyaW5nPn0gYXJncyBbW11dIC0gVGhlIGxpc3Qgb2YgYWRkaXRpb25hbCBzdWJjb21tYW5kIGFyZ3VtZW50cy5cbiAqIEl0J3MgZW1wdHkgYnkgZGVmYXVsdC5cbiAqIEBwcm9wZXJ0eSB7T2JqZWN0fSBlbnYgW3t9XSAtIEVudmlyb25tZW50IHZhcmlhYmxlcyBtYXBwaW5nLiBBbGwgdGhlc2UgdmFyaWFibGVzXG4gKiB3aWxsIGJlIHBhc3NlZCBTaW11bGF0b3IgYW5kIHVzZWQgaW4gdGhlIGV4ZWN1dGluZyBmdW5jdGlvbi5cbiAqIEBwcm9wZXJ0eSB7Ym9vbGVhbn0gbG9nRXJyb3JzIFt0cnVlXSAtIFNldCBpdCB0byBfZmFsc2VfIHRvIHRocm93IGV4ZWN1dGlvbiBlcnJvcnNcbiAqIGltbWVkaWF0ZWx5IHdpdGhvdXQgbG9nZ2luZyBhbnkgYWRkaXRpb25hbCBpbmZvcm1hdGlvbi5cbiAqIEBwcm9wZXJ0eSB7Ym9vbGVhbn0gYXN5bmNocm9ub3VzIFtmYWxzZV0gLSBXaGV0aGVyIHRvIGV4ZWN1dGUgdGhlIGdpdmVuIGNvbW1hbmRcbiAqICdzeW5jaHJvbm91c2x5JyBvciAnYXN5bmNocm9ub3VzbHknLiBBZmZlY3RzIHRoZSByZXR1cm5lZCByZXN1bHQgb2YgdGhlIGZ1bmN0aW9uLlxuICogQHByb3BlcnR5IHs/c3RyaW5nfSBlbmNvZGluZyAtIEV4cGxpY2l0bHkgc2V0cyBzdHJlYW1zIGVuY29kaW5nIGZvciB0aGUgZXhlY3V0ZWRcbiAqIGNvbW1hbmQgaW5wdXQgYW5kIG91dHB1dHMuXG4gKi9cblxuXG4vKipcbiAqIEB0eXBlZGVmIHtPYmplY3R9IFNpbWN0bE9wdHNcbiAqIEBwcm9wZXJ0eSB7P09iamVjdH0geGNydW4gLSBUaGUgeGNydW4gcHJvcGVydGllcy4gQ3VycmVudGx5IG9ubHkgb25lIHByb3BlcnR5XG4gKiBpcyBzdXBwb3J0ZWQsIHdoaWNoIGlzIGBwYXRoYCBhbmQgaXQgYnkgZGVmYXVsdCBjb250YWlucyBgbnVsbGAsIHdoaWNoIGVuZm9yY2VzXG4gKiB0aGUgaW5zdGFuY2UgdG8gYXV0b21hdGljYWxseSBkZXRlY3QgdGhlIGZ1bGwgcGF0aCB0byBgeGNydW5gIHRvb2wgYW5kIHRvIHRocm93XG4gKiBhbiBleGNlcHRpb24gaWYgaXQgY2Fubm90IGJlIGRldGVjdGVkLiBJZiB0aGUgcGF0aCBpcyBzZXQgdXBvbiBpbnN0YW5jZSBjcmVhdGlvblxuICogdGhlbiBpdCBpcyBnb2luZyB0byBiZSB1c2VkIGJ5IGBleGVjYCBhbmQgbm8gYXV0b2RldGVjdGlvbiB3aWxsIGhhcHBlbi5cbiAqIEBwcm9wZXJ0eSB7P251bWJlcn0gZXhlY1RpbWVvdXQgWzYwMDAwMF0gLSBUaGUgbWF4aW11bSBudW1iZXIgb2YgbWl1bGxpc2Vjb25kc1xuICogdG8gd2FpdCBmb3Igc2luZ2xlIHN5bmNocm9ub3VzIHhjcnVuIGNvbW1hbmQuXG4gKiBAcHJvcGVydHkgez9ib29sZWFufSBsb2dFcnJvcnMgW3RydWVdIC0gV2hldGhlciB0byB3aXJlIHhjcnVuIGVycm9yIG1lc3NhZ2VzXG4gKiBpbnRvIGRlYnVnIGxvZyBiZWZvcmUgdGhyb3dpbmcgdGhlbS5cbiAqIEBwcm9wZXJ0eSB7P3N0cmluZ30gdWRpZCBbbnVsbF0gLSBUaGUgdW5pcXVlIGlkZW50aWZpZXIgb2YgdGhlIGN1cnJlbnQgZGV2aWNlLCB3aGljaCBpc1xuICogZ29pbmcgdG8gYmUgaW1wbGljdGx5IHBhc3NlZCB0byBhbGwgbWV0aG9kcywgd2hpY2ggcmVxdWlyZSBpdC4gSXQgY2FuIGVpdGhlciBiZSBzZXRcbiAqIHVwb24gaW5zdGFuY2UgY3JlYXRpb24gaWYgaXQgaXMgYWxyZWFkeSBrbm93biBpbiBkYXZuY2Ugb3IgbGF0ZXIgd2hlbi9pZiBuZWVkZWQgdmlhIHRoZVxuICogY29ycmVzcG9uZGluZyBpbnN0YW5jZSBzZXR0ZXIuXG4gKi9cblxuXG5jbGFzcyBTaW1jdGwge1xuICAvKipcbiAgICogQHBhcmFtIHs/U2ltY3RsT3B0c30gb3B0c1xuICAgKi9cbiAgY29uc3RydWN0b3IgKG9wdHMgPSB7fSkge1xuICAgIG9wdHMgPSBfLmNsb25lRGVlcChvcHRzKTtcbiAgICBfLmRlZmF1bHRzRGVlcChvcHRzLCBERUZBVUxUX09QVFMpO1xuICAgIGZvciAoY29uc3Qga2V5IG9mIF8ua2V5cyhERUZBVUxUX09QVFMpKSB7XG4gICAgICB0aGlzW2tleV0gPSBvcHRzW2tleV07XG4gICAgfVxuICAgIHRoaXMuX3VkaWQgPSBfLmlzTmlsKG9wdHMudWRpZCkgPyBudWxsIDogb3B0cy51ZGlkO1xuICB9XG5cbiAgc2V0IHVkaWQgKHZhbHVlKSB7XG4gICAgdGhpcy5fdWRpZCA9IHZhbHVlO1xuICB9XG5cbiAgZ2V0IHVkaWQgKCkge1xuICAgIHJldHVybiB0aGlzLl91ZGlkO1xuICB9XG5cbiAgcmVxdWlyZVVkaWQgKGNvbW1hbmROYW1lID0gbnVsbCkge1xuICAgIGlmICghdGhpcy51ZGlkKSB7XG4gICAgICB0aHJvdyBuZXcgRXJyb3IoYHVkaWQgaXMgcmVxdWlyZWQgdG8gYmUgc2V0IGZvciBgICtcbiAgICAgICAgKGNvbW1hbmROYW1lID8gYHRoZSAnJHtjb21tYW5kTmFtZX0nIGNvbW1hbmRgIDogJ3RoaXMgc2ltY3RsIGNvbW1hbmQnKSk7XG4gICAgfVxuICAgIHJldHVybiB0aGlzLnVkaWQ7XG4gIH1cblxuICBhc3luYyByZXF1aXJlWGNydW4gKCkge1xuICAgIGlmICghdGhpcy54Y3J1bi5wYXRoKSB7XG4gICAgICB0cnkge1xuICAgICAgICB0aGlzLnhjcnVuLnBhdGggPSBhd2FpdCB3aGljaChYQ1JVTl9CSU5BUlkpO1xuICAgICAgfSBjYXRjaCAoZSkge1xuICAgICAgICB0aHJvdyBuZXcgRXJyb3IoYCR7WENSVU5fQklOQVJZfSB0b29sIGhhcyBub3QgYmVlbiBmb3VuZCBpbiBQQVRILiBgICtcbiAgICAgICAgICBgQXJlIFhjb2RlIGRldmVsb3BlcnMgdG9vbHMgaW5zdGFsbGVkP2ApO1xuICAgICAgfVxuICAgIH1cbiAgICByZXR1cm4gdGhpcy54Y3J1bi5wYXRoO1xuICB9XG5cbiAgLyoqXG4gICAqIEV4ZWN1dGUgdGhlIHBhcnRpY3VsYXIgc2ltY3RsIGNvbW1hbmQuXG4gICAqXG4gICAqIEBwYXJhbSB7c3RyaW5nfSBzdWJjb21tYW5kIC0gT25lIG9mIGF2YWlsYWJsZSBzaW1jdGwgc3ViY29tbWFuZHMuXG4gICAqICAgICAgICAgICAgICAgICAgICAgICAgICAgRXhlY3V0ZSBgeGNydW4gc2ltY3RsYCBpbiBUZXJtaW5hbCB0byBzZWUgdGhlIGZ1bGwgbGlzdFxuICAgKiAgICAgICAgICAgICAgICAgICAgICAgICAgIG9mIGF2YWlsYWJsZSBzdWJjb21tYW5kcy5cbiAgICogQHBhcmFtIHs/RXhlY09wdHN9IG9wdHNcbiAgICogQHJldHVybiB7RXhlY1Jlc3VsdHxTdWJQcm9jZXNzfSBFaXRoZXIgdGhlIHJlc3VsdCBvZiB0ZWVuIHByb2Nlc3MncyBgZXhlY2Agb3JcbiAgICogYFN1YlByb2Nlc3NgIGluc3RhbmNlIGRlcGVuZGluZyBvZiBgb3B0cy5hc3luY2hyb25vdXNgIHZhbHVlLlxuICAgKiBAdGhyb3dzIHtFcnJvcn0gSWYgdGhlIHNpbWN0bCBzdWJjb21tYW5kIGNvbW1hbmQgcmV0dXJucyBub24temVybyByZXR1cm4gY29kZS5cbiAgICovXG4gIGFzeW5jIGV4ZWMgKHN1YmNvbW1hbmQsIG9wdHMgPSB7fSkge1xuICAgIGxldCB7XG4gICAgICBhcmdzID0gW10sXG4gICAgICBlbnYgPSB7fSxcbiAgICAgIGFzeW5jaHJvbm91cyA9IGZhbHNlLFxuICAgICAgZW5jb2RpbmcsXG4gICAgfSA9IG9wdHM7XG4gICAgLy8gcnVuIGEgcGFydGljdWxhciBzaW1jdGwgY29tbWFuZFxuICAgIGFyZ3MgPSBbJ3NpbWN0bCcsIHN1YmNvbW1hbmQsIC4uLmFyZ3NdO1xuICAgIC8vIFByZWZpeCBhbGwgcGFzc2VkIGluIGVudmlyb25tZW50IHZhcmlhYmxlcyB3aXRoICdTSU1DVExfQ0hJTERfJywgc2ltY3RsXG4gICAgLy8gd2lsbCB0aGVuIHBhc3MgdGhlc2UgdG8gdGhlIGNoaWxkIChzcGF3bmVkKSBwcm9jZXNzLlxuICAgIGVudiA9IF8uZGVmYXVsdHMoXG4gICAgICBfLm1hcEtleXMoZW52LFxuICAgICAgICAodmFsdWUsIGtleSkgPT4gXy5zdGFydHNXaXRoKGtleSwgU0lNQ1RMX0VOVl9QUkVGSVgpID8ga2V5IDogYCR7U0lNQ1RMX0VOVl9QUkVGSVh9JHtrZXl9YCksXG4gICAgICBwcm9jZXNzLmVudik7XG5cbiAgICBjb25zdCBleGVjT3B0cyA9IHtcbiAgICAgIGVudixcbiAgICAgIGVuY29kaW5nLFxuICAgIH07XG4gICAgaWYgKCFhc3luY2hyb25vdXMpIHtcbiAgICAgIGV4ZWNPcHRzLnRpbWVvdXQgPSB0aGlzLmV4ZWNUaW1lb3V0O1xuICAgIH1cbiAgICBjb25zdCB4Y3J1biA9IGF3YWl0IHRoaXMucmVxdWlyZVhjcnVuKCk7XG4gICAgdHJ5IHtcbiAgICAgIHJldHVybiBhc3luY2hyb25vdXMgPyBuZXcgU3ViUHJvY2Vzcyh4Y3J1biwgYXJncywgZXhlY09wdHMpIDogYXdhaXQgdHBFeGVjKHhjcnVuLCBhcmdzLCBleGVjT3B0cyk7XG4gICAgfSBjYXRjaCAoZSkge1xuICAgICAgaWYgKCF0aGlzLmxvZ0Vycm9ycykge1xuICAgICAgICAvLyBpZiB3ZSBkb24ndCB3YW50IHRvIHNlZSB0aGUgZXJyb3JzLCBqdXN0IHRocm93IGFuZCBhbGxvdyB0aGUgY2FsbGluZ1xuICAgICAgICAvLyBjb2RlIGRvIHdoYXQgaXQgd2FudHNcbiAgICAgICAgdGhyb3cgZTtcbiAgICAgIH0gZWxzZSBpZiAoZS5zdGRlcnIpIHtcbiAgICAgICAgY29uc3QgbXNnID0gYEVycm9yIHJ1bm5pbmcgJyR7c3ViY29tbWFuZH0nOiAke2Uuc3RkZXJyLnRyaW0oKX1gO1xuICAgICAgICBsb2cuZGVidWcobXNnKTtcbiAgICAgICAgdGhyb3cgRXJyb3IobXNnKTtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIGxvZy5kZWJ1ZyhlLm1lc3NhZ2UpO1xuICAgICAgICB0aHJvdyBlO1xuICAgICAgfVxuICAgIH1cbiAgfVxufVxuXG5cbi8vIGFkZCBhbGwgdGhlIHN1YmNvbW1hbmRzIHRvIHRoZSBTaW1jdGwgcHJvdG90eXBlXG5mb3IgKGNvbnN0IFtmbk5hbWUsIGZuXSBvZiBfLnRvUGFpcnMoc3ViY29tbWFuZHMpKSB7XG4gIFNpbWN0bC5wcm90b3R5cGVbZm5OYW1lXSA9IGZuO1xufVxuXG5leHBvcnQgZGVmYXVsdCBTaW1jdGw7XG5leHBvcnQgeyBTaW1jdGwgfTsiXSwiZmlsZSI6ImxpYi9zaW1jdGwuanMiLCJzb3VyY2VSb290IjoiLi4vLi4ifQ==
