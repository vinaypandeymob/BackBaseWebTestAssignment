"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.getAndroidBinaryPath = getAndroidBinaryPath;
Object.defineProperty(exports, "DEFAULT_ADB_EXEC_TIMEOUT", {
  enumerable: true,
  get: function () {
    return _helpers.DEFAULT_ADB_EXEC_TIMEOUT;
  }
});
exports.default = void 0;

require("source-map-support/register");

var _path = _interopRequireDefault(require("path"));

var _logger = _interopRequireDefault(require("../logger.js"));

var _bluebird = _interopRequireDefault(require("bluebird"));

var _appiumSupport = require("appium-support");

var _helpers = require("../helpers");

var _teen_process = require("teen_process");

var _asyncbox = require("asyncbox");

var _lodash = _interopRequireDefault(require("lodash"));

var _semver = _interopRequireDefault(require("semver"));

let systemCallMethods = {};
const DEFAULT_ADB_REBOOT_RETRIES = 90;
const LINKER_WARNING_REGEXP = /^WARNING: linker.+$/m;
const ADB_RETRY_ERROR_PATTERNS = [/protocol fault \(no status\)/i, /error: device ('.+' )?not found/i, /error: device still connecting/i];
const BINARY_VERSION_PATTERN = /^Version ([\d.]+)-(\d+)/m;
const BRIDGE_VERSION_PATTERN = /^Android Debug Bridge version ([\d.]+)/m;
const CERTS_ROOT = '/system/etc/security/cacerts';
const SDK_BINARY_ROOTS = ['platform-tools', 'emulator', ['cmdline-tools', 'latest', 'bin'], 'tools', ['tools', 'bin'], '.'];

systemCallMethods.getSdkBinaryPath = async function getSdkBinaryPath(binaryName) {
  return await this.getBinaryFromSdkRoot(binaryName);
};

systemCallMethods.getBinaryNameForOS = _lodash.default.memoize(function getBinaryNameForOSMemorize(binaryName) {
  return getBinaryNameForOS(binaryName);
});

function getBinaryNameForOS(binaryName) {
  if (!_appiumSupport.system.isWindows()) {
    return binaryName;
  }

  if (['android', 'apksigner', 'apkanalyzer'].includes(binaryName)) {
    return `${binaryName}.bat`;
  }

  if (!_path.default.extname(binaryName)) {
    return `${binaryName}.exe`;
  }

  return binaryName;
}

systemCallMethods.getBinaryFromSdkRoot = async function getBinaryFromSdkRoot(binaryName) {
  if (this.binaries[binaryName]) {
    return this.binaries[binaryName];
  }

  const fullBinaryName = this.getBinaryNameForOS(binaryName);
  const binaryLocs = getSdkBinaryLocationCandidates(this.sdkRoot, fullBinaryName);
  let buildToolsDirs = await (0, _helpers.getBuildToolsDirs)(this.sdkRoot);

  if (this.buildToolsVersion) {
    buildToolsDirs = buildToolsDirs.filter(x => _path.default.basename(x) === this.buildToolsVersion);

    if (_lodash.default.isEmpty(buildToolsDirs)) {
      _logger.default.info(`Found no build tools whose version matches to '${this.buildToolsVersion}'`);
    } else {
      _logger.default.info(`Using build tools at '${buildToolsDirs}'`);
    }
  }

  binaryLocs.push(..._lodash.default.flatten(buildToolsDirs.map(dir => [_path.default.resolve(dir, fullBinaryName), _path.default.resolve(dir, 'lib', fullBinaryName)])));
  let binaryLoc = null;

  for (const loc of binaryLocs) {
    if (await _appiumSupport.fs.exists(loc)) {
      binaryLoc = loc;
      break;
    }
  }

  if (_lodash.default.isNull(binaryLoc)) {
    throw new Error(`Could not find '${fullBinaryName}' in ${JSON.stringify(binaryLocs)}. ` + `Do you have Android Build Tools ${this.buildToolsVersion ? `v ${this.buildToolsVersion} ` : ''}` + `installed at '${this.sdkRoot}'?`);
  }

  _logger.default.info(`Using '${fullBinaryName}' from '${binaryLoc}'`);

  this.binaries[binaryName] = binaryLoc;
  return binaryLoc;
};

function getSdkBinaryLocationCandidates(sdkRoot, fullBinaryName) {
  return SDK_BINARY_ROOTS.map(x => _path.default.resolve(sdkRoot, ...(_lodash.default.isArray(x) ? x : [x]), fullBinaryName));
}

async function getAndroidBinaryPath(binaryName) {
  const fullBinaryName = getBinaryNameForOS(binaryName);
  const sdkRoot = (0, _helpers.getSdkRootFromEnv)();
  const binaryLocs = getSdkBinaryLocationCandidates(sdkRoot, fullBinaryName);

  for (const loc of binaryLocs) {
    if (await _appiumSupport.fs.exists(loc)) {
      return loc;
    }
  }

  throw new Error(`Could not find '${fullBinaryName}' in ${JSON.stringify(binaryLocs)}. ` + `Do you have Android Build Tools installed at '${sdkRoot}'?`);
}

systemCallMethods.getBinaryFromPath = async function getBinaryFromPath(binaryName) {
  if (this.binaries[binaryName]) {
    return this.binaries[binaryName];
  }

  const fullBinaryName = this.getBinaryNameForOS(binaryName);

  try {
    const binaryLoc = await _appiumSupport.fs.which(fullBinaryName);

    _logger.default.info(`Using '${fullBinaryName}' from '${binaryLoc}'`);

    this.binaries[binaryName] = binaryLoc;
    return binaryLoc;
  } catch (e) {
    throw new Error(`Could not find '${fullBinaryName}' in PATH. Please set the ANDROID_HOME ` + `or ANDROID_SDK_ROOT environment variables to the correct Android SDK root directory path.`);
  }
};

systemCallMethods.getConnectedDevices = async function getConnectedDevices() {
  _logger.default.debug('Getting connected devices');

  let stdout;

  try {
    ({
      stdout
    } = await (0, _teen_process.exec)(this.executable.path, [...this.executable.defaultArgs, 'devices']));
  } catch (e) {
    throw new Error(`Error while getting connected devices. Original error: ${e.message}`);
  }

  const listHeader = 'List of devices';
  const startingIndex = stdout.indexOf(listHeader);

  if (startingIndex < 0) {
    throw new Error(`Unexpected output while trying to get devices: ${stdout}`);
  }

  stdout = stdout.slice(startingIndex);
  let excludedLines = [listHeader, 'adb server', '* daemon'];

  if (!this.allowOfflineDevices) {
    excludedLines.push('offline');
  }

  const devices = stdout.split('\n').map(_lodash.default.trim).filter(line => line && !excludedLines.some(x => line.includes(x))).reduce((acc, line) => {
    const [udid, state] = line.split(/\s+/);
    acc.push({
      udid,
      state
    });
    return acc;
  }, []);

  if (_lodash.default.isEmpty(devices)) {
    _logger.default.debug('No connected devices have been detected');
  } else {
    _logger.default.debug(`Connected devices: ${JSON.stringify(devices)}`);
  }

  return devices;
};

systemCallMethods.getDevicesWithRetry = async function getDevicesWithRetry(timeoutMs = 20000) {
  const timer = new _appiumSupport.timing.Timer().start();

  _logger.default.debug('Trying to find a connected android device');

  const getDevices = async () => {
    if (timer.getDuration().asMilliSeconds > timeoutMs) {
      throw new Error(`Could not find a connected Android device in ${timer.getDuration().asMilliSeconds.toFixed(0)}ms.`);
    }

    try {
      const devices = await this.getConnectedDevices();

      if (devices.length > 0) {
        return devices;
      }
    } catch (ign) {}

    _logger.default.debug('Could not find online devices');

    try {
      await this.reconnect();
    } catch (ign) {
      await this.restartAdb();
    }

    await (0, _asyncbox.sleep)(200);
    return await getDevices();
  };

  return await getDevices();
};

systemCallMethods.reconnect = async function reconnect(target = 'offline') {
  _logger.default.debug(`Reconnecting adb (target ${target})`);

  const args = ['reconnect'];

  if (target) {
    args.push(target);
  }

  try {
    await this.adbExec(args);
  } catch (e) {
    throw new Error(`Cannot reconnect adb. Original error: ${e.stderr || e.message}`);
  }
};

systemCallMethods.restartAdb = async function restartAdb() {
  if (this.suppressKillServer) {
    _logger.default.debug(`Not restarting abd since 'suppressKillServer' is on`);

    return;
  }

  _logger.default.debug('Restarting adb');

  try {
    await this.killServer();
    await this.adbExec(['start-server']);
  } catch (e) {
    _logger.default.error(`Error killing ADB server, going to see if it's online anyway`);
  }
};

systemCallMethods.killServer = async function killServer() {
  _logger.default.debug(`Killing adb server on port '${this.adbPort}'`);

  await this.adbExec(['kill-server'], {
    exclusive: true
  });
};

systemCallMethods.resetTelnetAuthToken = _lodash.default.memoize(async function resetTelnetAuthToken() {
  const homeFolderPath = process.env[process.platform === 'win32' ? 'USERPROFILE' : 'HOME'];

  if (!homeFolderPath) {
    _logger.default.warn(`Cannot find the path to user home folder. Ignoring resetting of emulator's telnet authentication token`);

    return false;
  }

  const dstPath = _path.default.resolve(homeFolderPath, '.emulator_console_auth_token');

  _logger.default.debug(`Overriding ${dstPath} with an empty string to avoid telnet authentication for emulator commands`);

  try {
    await _appiumSupport.fs.writeFile(dstPath, '');
  } catch (e) {
    _logger.default.warn(`Error ${e.message} while resetting the content of ${dstPath}. Ignoring resetting of emulator's telnet authentication token`);

    return false;
  }

  return true;
});

systemCallMethods.adbExecEmu = async function adbExecEmu(cmd) {
  await this.verifyEmulatorConnected();
  await this.resetTelnetAuthToken();
  await this.adbExec(['emu', ...cmd]);
};

let isExecLocked = false;

systemCallMethods.adbExec = async function adbExec(cmd, opts = {}) {
  if (!cmd) {
    throw new Error('You need to pass in a command to adbExec()');
  }

  opts = _lodash.default.cloneDeep(opts);
  opts.timeout = opts.timeout || this.adbExecTimeout || _helpers.DEFAULT_ADB_EXEC_TIMEOUT;
  opts.timeoutCapName = opts.timeoutCapName || 'adbExecTimeout';
  cmd = _lodash.default.isArray(cmd) ? cmd : [cmd];
  let adbRetried = false;

  const execFunc = async () => {
    try {
      const args = [...this.executable.defaultArgs, ...cmd];

      _logger.default.debug(`Running '${this.executable.path} ${_appiumSupport.util.quote(args)}'`);

      let {
        stdout
      } = await (0, _teen_process.exec)(this.executable.path, args, opts);
      stdout = stdout.replace(LINKER_WARNING_REGEXP, '').trim();
      return stdout;
    } catch (e) {
      const errText = `${e.message}, ${e.stdout}, ${e.stderr}`;

      if (ADB_RETRY_ERROR_PATTERNS.some(p => p.test(errText))) {
        _logger.default.info(`Error sending command, reconnecting device and retrying: ${cmd}`);

        await (0, _asyncbox.sleep)(1000);
        await this.getDevicesWithRetry();

        if (adbRetried) {
          adbRetried = true;
          return await execFunc();
        }
      }

      if (e.code === 0 && e.stdout) {
        return e.stdout.replace(LINKER_WARNING_REGEXP, '').trim();
      }

      if (_lodash.default.isNull(e.code)) {
        e.message = `Error executing adbExec. Original error: '${e.message}'. ` + `Try to increase the ${opts.timeout}ms adb execution timeout represented by '${opts.timeoutCapName}' capability`;
      } else {
        e.message = `Error executing adbExec. Original error: '${e.message}'; ` + `Stderr: '${(e.stderr || '').trim()}'; Code: '${e.code}'`;
      }

      throw e;
    }
  };

  if (isExecLocked) {
    _logger.default.debug('Waiting until the other exclusive ADB command is completed');

    await (0, _asyncbox.waitForCondition)(() => !isExecLocked, {
      waitMs: Number.MAX_SAFE_INTEGER,
      intervalMs: 10
    });

    _logger.default.debug('Continuing with the current ADB command');
  }

  if (opts.exclusive) {
    isExecLocked = true;
  }

  try {
    return await execFunc();
  } finally {
    if (opts.exclusive) {
      isExecLocked = false;
    }
  }
};

systemCallMethods.shell = async function shell(cmd, opts = {}) {
  const {
    privileged
  } = opts;
  const cmdArr = _lodash.default.isArray(cmd) ? cmd : [cmd];
  const fullCmd = ['shell'];

  if (privileged) {
    _logger.default.info(`'adb shell ${_appiumSupport.util.quote(cmdArr)}' requires root access`);

    if (await this.isRoot()) {
      _logger.default.info('The device already had root access');

      fullCmd.push(...cmdArr);
    } else {
      fullCmd.push('su', 'root', _appiumSupport.util.quote(cmdArr));
    }
  } else {
    fullCmd.push(...cmdArr);
  }

  return await this.adbExec(fullCmd, opts);
};

systemCallMethods.createSubProcess = function createSubProcess(args = []) {
  args = [...this.executable.defaultArgs, ...args];

  _logger.default.debug(`Creating ADB subprocess with args: ${JSON.stringify(args)}`);

  return new _teen_process.SubProcess(this.getAdbPath(), args);
};

systemCallMethods.getAdbServerPort = function getAdbServerPort() {
  return this.adbPort;
};

systemCallMethods.getEmulatorPort = async function getEmulatorPort() {
  _logger.default.debug('Getting running emulator port');

  if (this.emulatorPort !== null) {
    return this.emulatorPort;
  }

  try {
    let devices = await this.getConnectedDevices();
    let port = this.getPortFromEmulatorString(devices[0].udid);

    if (port) {
      return port;
    } else {
      throw new Error(`Emulator port not found`);
    }
  } catch (e) {
    throw new Error(`No devices connected. Original error: ${e.message}`);
  }
};

systemCallMethods.getPortFromEmulatorString = function getPortFromEmulatorString(emStr) {
  let portPattern = /emulator-(\d+)/;

  if (portPattern.test(emStr)) {
    return parseInt(portPattern.exec(emStr)[1], 10);
  }

  return false;
};

systemCallMethods.getConnectedEmulators = async function getConnectedEmulators() {
  _logger.default.debug('Getting connected emulators');

  try {
    let devices = await this.getConnectedDevices();
    let emulators = [];

    for (let device of devices) {
      let port = this.getPortFromEmulatorString(device.udid);

      if (port) {
        device.port = port;
        emulators.push(device);
      }
    }

    _logger.default.debug(`${_appiumSupport.util.pluralize('emulator', emulators.length, true)} connected`);

    return emulators;
  } catch (e) {
    throw new Error(`Error getting emulators. Original error: ${e.message}`);
  }
};

systemCallMethods.setEmulatorPort = function setEmulatorPort(emPort) {
  this.emulatorPort = emPort;
};

systemCallMethods.setDeviceId = function setDeviceId(deviceId) {
  _logger.default.debug(`Setting device id to ${deviceId}`);

  this.curDeviceId = deviceId;
  let argsHasDevice = this.executable.defaultArgs.indexOf('-s');

  if (argsHasDevice !== -1) {
    this.executable.defaultArgs.splice(argsHasDevice, 2);
  }

  this.executable.defaultArgs.push('-s', deviceId);
};

systemCallMethods.setDevice = function setDevice(deviceObj) {
  let deviceId = deviceObj.udid;
  let emPort = this.getPortFromEmulatorString(deviceId);
  this.setEmulatorPort(emPort);
  this.setDeviceId(deviceId);
};

systemCallMethods.getRunningAVD = async function getRunningAVD(avdName) {
  _logger.default.debug(`Trying to find '${avdName}' emulator`);

  try {
    const emulators = await this.getConnectedEmulators();

    for (const emulator of emulators) {
      this.setEmulatorPort(emulator.port);
      const runningAVDName = await this.execEmuConsoleCommand(['avd', 'name'], {
        port: emulator.port,
        execTimeout: 5000,
        connTimeout: 1000
      });

      if (_lodash.default.toLower(avdName) === _lodash.default.toLower(runningAVDName.trim())) {
        _logger.default.debug(`Found emulator '${avdName}' on port ${emulator.port}`);

        this.setDeviceId(emulator.udid);
        return emulator;
      }
    }

    _logger.default.debug(`Emulator '${avdName}' not running`);

    return null;
  } catch (e) {
    throw new Error(`Error getting AVD. Original error: ${e.message}`);
  }
};

systemCallMethods.getRunningAVDWithRetry = async function getRunningAVDWithRetry(avdName, timeoutMs = 20000) {
  try {
    return await (0, _asyncbox.waitForCondition)(async () => {
      try {
        return await this.getRunningAVD(avdName.replace('@', ''));
      } catch (e) {
        _logger.default.debug(e.message);

        return false;
      }
    }, {
      waitMs: timeoutMs,
      intervalMs: 1000
    });
  } catch (e) {
    throw new Error(`Error getting AVD with retry. Original error: ${e.message}`);
  }
};

systemCallMethods.killAllEmulators = async function killAllEmulators() {
  let cmd, args;

  if (_appiumSupport.system.isWindows()) {
    cmd = 'TASKKILL';
    args = ['TASKKILL', '/IM', 'emulator.exe'];
  } else {
    cmd = '/usr/bin/killall';
    args = ['-m', 'emulator*'];
  }

  try {
    await (0, _teen_process.exec)(cmd, args);
  } catch (e) {
    throw new Error(`Error killing emulators. Original error: ${e.message}`);
  }
};

systemCallMethods.killEmulator = async function killEmulator(avdName = null, timeout = 60000) {
  if (_appiumSupport.util.hasValue(avdName)) {
    _logger.default.debug(`Killing avd '${avdName}'`);

    const device = await this.getRunningAVD(avdName);

    if (!device) {
      _logger.default.info(`No avd with name '${avdName}' running. Skipping kill step.`);

      return false;
    }
  } else {
    _logger.default.debug(`Killing avd with id '${this.curDeviceId}'`);

    if (!(await this.isEmulatorConnected())) {
      _logger.default.debug(`Emulator with id '${this.curDeviceId}' not connected. Skipping kill step`);

      return false;
    }
  }

  await this.adbExec(['emu', 'kill']);

  _logger.default.debug(`Waiting up to ${timeout}ms until the emulator '${avdName ? avdName : this.curDeviceId}' is killed`);

  try {
    await (0, _asyncbox.waitForCondition)(async () => {
      try {
        return _appiumSupport.util.hasValue(avdName) ? !(await this.getRunningAVD(avdName)) : !(await this.isEmulatorConnected());
      } catch (ign) {}

      return false;
    }, {
      waitMs: timeout,
      intervalMs: 2000
    });
  } catch (e) {
    throw new Error(`The emulator '${avdName ? avdName : this.curDeviceId}' is still running after being killed ${timeout}ms ago`);
  }

  _logger.default.info(`Successfully killed the '${avdName ? avdName : this.curDeviceId}' emulator`);

  return true;
};

systemCallMethods.launchAVD = async function launchAVD(avdName, opts = {}) {
  const {
    args = [],
    env = {},
    language,
    country,
    launchTimeout = 60000,
    readyTimeout = 60000,
    retryTimes = 1
  } = opts;

  _logger.default.debug(`Launching Emulator with AVD ${avdName}, launchTimeout ` + `${launchTimeout}ms and readyTimeout ${readyTimeout}ms`);

  const emulatorBinaryPath = await this.getSdkBinaryPath('emulator');

  if (avdName[0] === '@') {
    avdName = avdName.substr(1);
  }

  await this.checkAvdExist(avdName);
  const launchArgs = ['-avd', avdName];
  launchArgs.push(...(0, _helpers.toAvdLocaleArgs)(language, country));
  const {
    revision
  } = await this.getEmuVersionInfo();
  let supportsDelayAdbFeature = false;

  if (revision && _appiumSupport.util.compareVersions(revision, '>=', '29.0.7')) {
    try {
      const {
        target
      } = await this.getEmuImageProperties(avdName);
      const apiMatch = /\d+/.exec(target);

      if (apiMatch && parseInt(apiMatch[0], 10) >= 28) {
        launchArgs.push('-delay-adb');
        supportsDelayAdbFeature = true;
      } else {
        throw new Error(`The actual image API version is below 28`);
      }
    } catch (e) {
      _logger.default.info(`The -delay-adb emulator startup detection feature will not be enabled. ` + `Original error: ${e.message}`);
    }
  }

  if (!_lodash.default.isEmpty(args)) {
    launchArgs.push(...(_lodash.default.isArray(args) ? args : _appiumSupport.util.shellParse(`${args}`)));
  }

  _logger.default.debug(`Running '${emulatorBinaryPath}' with args: ${_appiumSupport.util.quote(launchArgs)}`);

  if (!_lodash.default.isEmpty(env)) {
    _logger.default.debug(`Customized emulator environment: ${JSON.stringify(env)}`);
  }

  const proc = new _teen_process.SubProcess(emulatorBinaryPath, launchArgs, {
    env: Object.assign({}, process.env, env)
  });
  await proc.start(0);
  proc.on('output', (stdout, stderr) => {
    for (let line of (stdout || stderr || '').split('\n').filter(Boolean)) {
      _logger.default.info(`[AVD OUTPUT] ${line}`);
    }
  });
  proc.on('die', (code, signal) => {
    _logger.default.warn(`Emulator avd ${avdName} exited with code ${code}${signal ? `, signal ${signal}` : ''}`);
  });
  await (0, _asyncbox.retry)(retryTimes, async () => await this.getRunningAVDWithRetry(avdName, launchTimeout));

  if (supportsDelayAdbFeature) {
    try {
      await this.adbExec(['wait-for-device'], {
        timeout: readyTimeout
      });
    } catch (e) {
      throw new Error(`'${avdName}' Emulator has failed to boot: ${e.stderr || e.message}`);
    }
  } else {
    await this.waitForEmulatorReady(readyTimeout);
  }

  return proc;
};

systemCallMethods.getVersion = _lodash.default.memoize(async function getVersion() {
  let stdout;

  try {
    stdout = await this.adbExec('version');
  } catch (e) {
    throw new Error(`Error getting adb version: ${e.stderr || e.message}`);
  }

  const result = {};
  const binaryVersionMatch = BINARY_VERSION_PATTERN.exec(stdout);

  if (binaryVersionMatch) {
    result.binary = {
      version: _semver.default.coerce(binaryVersionMatch[1]),
      build: parseInt(binaryVersionMatch[2], 10)
    };
  }

  const bridgeVersionMatch = BRIDGE_VERSION_PATTERN.exec(stdout);

  if (bridgeVersionMatch) {
    result.bridge = {
      version: _semver.default.coerce(bridgeVersionMatch[1])
    };
  }

  return result;
});

systemCallMethods.waitForEmulatorReady = async function waitForEmulatorReady(timeoutMs = 20000) {
  try {
    await (0, _asyncbox.waitForCondition)(async () => {
      try {
        if (!(await this.shell(['getprop', 'init.svc.bootanim'])).includes('stopped')) {
          return false;
        }

        return /\d+\[\w+\]/.test(await this.shell(['pm', 'get-install-location']));
      } catch (err) {
        _logger.default.debug(`Waiting for emulator startup. Intermediate error: ${err.message}`);

        return false;
      }
    }, {
      waitMs: timeoutMs,
      intervalMs: 3000
    });
  } catch (e) {
    throw new Error(`Emulator is not ready within ${timeoutMs}ms`);
  }
};

systemCallMethods.waitForDevice = async function waitForDevice(appDeviceReadyTimeout = 30) {
  this.appDeviceReadyTimeout = appDeviceReadyTimeout;
  const retries = 3;
  const timeout = parseInt(this.appDeviceReadyTimeout, 10) * 1000 / retries;
  await (0, _asyncbox.retry)(retries, async () => {
    try {
      await this.adbExec('wait-for-device', {
        timeout
      });
      await this.ping();
    } catch (e) {
      try {
        await this.reconnect();
      } catch (ign) {
        await this.restartAdb();
      }

      await this.getConnectedDevices();
      throw new Error(`Error waiting for the device to be available. Original error: '${e.message}'`);
    }
  });
};

systemCallMethods.reboot = async function reboot(retries = DEFAULT_ADB_REBOOT_RETRIES) {
  const {
    wasAlreadyRooted
  } = await this.root();

  try {
    await this.shell(['stop']);
    await _bluebird.default.delay(2000);
    await this.setDeviceProperty('sys.boot_completed', 0, {
      privileged: false
    });
    await this.shell(['start']);
  } catch (e) {
    const {
      message
    } = e;

    if (message.includes('must be root')) {
      throw new Error(`Could not reboot device. Rebooting requires root access and ` + `attempt to get root access on device failed with error: '${message}'`);
    }

    throw e;
  } finally {
    if (!wasAlreadyRooted) {
      await this.unroot();
    }
  }

  const timer = new _appiumSupport.timing.Timer().start();
  await (0, _asyncbox.retryInterval)(retries, 1000, async () => {
    if ((await this.getDeviceProperty('sys.boot_completed')) === '1') {
      return;
    }

    const msg = `Reboot is not completed after ${timer.getDuration().asMilliSeconds.toFixed(0)}ms`;

    _logger.default.debug(msg);

    throw new Error(msg);
  });
};

systemCallMethods.changeUserPrivileges = async function changeUserPrivileges(isElevated) {
  const cmd = isElevated ? 'root' : 'unroot';

  const retryIfOffline = async cmdFunc => {
    try {
      return await cmdFunc();
    } catch (err) {
      if (['closed', 'device offline', 'timeout expired'].some(x => (err.stderr || '').toLowerCase().includes(x))) {
        _logger.default.warn(`Attempt to ${cmd} caused ADB to think the device went offline`);

        try {
          await this.reconnect();
        } catch (ign) {
          await this.restartAdb();
        }

        return await cmdFunc();
      } else {
        throw err;
      }
    }
  };

  const isRoot = await retryIfOffline(async () => await this.isRoot());

  if (isRoot && isElevated || !isRoot && !isElevated) {
    return {
      isSuccessful: true,
      wasAlreadyRooted: isRoot
    };
  }

  let wasAlreadyRooted = isRoot;

  try {
    const {
      stdout
    } = await retryIfOffline(async () => await this.adbExec([cmd]));

    _logger.default.debug(stdout);

    if (stdout) {
      if (stdout.includes('adbd cannot run as root')) {
        return {
          isSuccessful: false,
          wasAlreadyRooted
        };
      }

      if (stdout.includes('already running as root')) {
        wasAlreadyRooted = true;
      }
    }

    return {
      isSuccessful: true,
      wasAlreadyRooted
    };
  } catch (err) {
    const {
      stderr = '',
      message
    } = err;

    _logger.default.warn(`Unable to ${cmd} adb daemon. Original error: '${message}'. Stderr: '${stderr}'. Continuing.`);

    return {
      isSuccessful: false,
      wasAlreadyRooted
    };
  }
};

systemCallMethods.root = async function root() {
  return await this.changeUserPrivileges(true);
};

systemCallMethods.unroot = async function unroot() {
  return await this.changeUserPrivileges(false);
};

systemCallMethods.isRoot = async function isRoot() {
  return (await this.shell(['whoami'])).trim() === 'root';
};

systemCallMethods.fileExists = async function fileExists(remotePath) {
  const passFlag = '__PASS__';
  const checkCmd = `[ -e '${remotePath.replace(/'/g, `\\'`)}' ] && echo ${passFlag}`;

  try {
    return _lodash.default.includes(await this.shell([checkCmd]), passFlag);
  } catch (ign) {
    return false;
  }
};

systemCallMethods.ls = async function ls(remotePath, opts = []) {
  try {
    let args = ['ls', ...opts, remotePath];
    let stdout = await this.shell(args);
    let lines = stdout.split('\n');
    return lines.map(l => l.trim()).filter(Boolean).filter(l => l.indexOf('No such file') === -1);
  } catch (err) {
    if (err.message.indexOf('No such file or directory') === -1) {
      throw err;
    }

    return [];
  }
};

systemCallMethods.fileSize = async function fileSize(remotePath) {
  try {
    const files = await this.ls(remotePath, ['-la']);

    if (files.length !== 1) {
      throw new Error(`Remote path is not a file`);
    }

    const match = /[rwxsStT\-+]{10}[\s\d]*\s[^\s]+\s+[^\s]+\s+(\d+)/.exec(files[0]);

    if (!match || _lodash.default.isNaN(parseInt(match[1], 10))) {
      throw new Error(`Unable to parse size from list output: '${files[0]}'`);
    }

    return parseInt(match[1], 10);
  } catch (err) {
    throw new Error(`Unable to get file size for '${remotePath}': ${err.message}`);
  }
};

systemCallMethods.installMitmCertificate = async function installMitmCertificate(cert) {
  const openSsl = await (0, _helpers.getOpenSslForOs)();

  if (!_lodash.default.isBuffer(cert)) {
    cert = Buffer.from(cert, 'base64');
  }

  const tmpRoot = await _appiumSupport.tempDir.openDir();

  try {
    const srcCert = _path.default.resolve(tmpRoot, 'source.cer');

    await _appiumSupport.fs.writeFile(srcCert, cert);
    let {
      stdout
    } = await (0, _teen_process.exec)(openSsl, ['x509', '-noout', '-hash', '-in', srcCert]);
    const certHash = stdout.trim();

    _logger.default.debug(`Got certificate hash: ${certHash}`);

    _logger.default.debug('Preparing certificate content');

    ({
      stdout
    } = await (0, _teen_process.exec)(openSsl, ['x509', '-in', srcCert], {
      isBuffer: true
    }));
    let dstCertContent = stdout;
    ({
      stdout
    } = await (0, _teen_process.exec)(openSsl, ['x509', '-in', srcCert, '-text', '-fingerprint', '-noout'], {
      isBuffer: true
    }));
    dstCertContent = Buffer.concat([dstCertContent, stdout]);

    const dstCert = _path.default.resolve(tmpRoot, `${certHash}.0`);

    await _appiumSupport.fs.writeFile(dstCert, dstCertContent);

    _logger.default.debug('Remounting /system in rw mode');

    await (0, _asyncbox.retryInterval)(5, 2000, async () => await this.adbExec(['remount']));

    _logger.default.debug(`Uploading the generated certificate from '${dstCert}' to '${CERTS_ROOT}'`);

    await this.push(dstCert, CERTS_ROOT);

    _logger.default.debug('Remounting /system to confirm changes');

    await this.adbExec(['remount']);
  } catch (err) {
    throw new Error(`Cannot inject the custom certificate. ` + `Is the certificate properly encoded into base64-string? ` + `Do you have root permissions on the device? ` + `Original error: ${err.message}`);
  } finally {
    await _appiumSupport.fs.rimraf(tmpRoot);
  }
};

systemCallMethods.isMitmCertificateInstalled = async function isMitmCertificateInstalled(cert) {
  const openSsl = await (0, _helpers.getOpenSslForOs)();

  if (!_lodash.default.isBuffer(cert)) {
    cert = Buffer.from(cert, 'base64');
  }

  const tmpRoot = await _appiumSupport.tempDir.openDir();
  let certHash;

  try {
    const tmpCert = _path.default.resolve(tmpRoot, 'source.cer');

    await _appiumSupport.fs.writeFile(tmpCert, cert);
    const {
      stdout
    } = await (0, _teen_process.exec)(openSsl, ['x509', '-noout', '-hash', '-in', tmpCert]);
    certHash = stdout.trim();
  } catch (err) {
    throw new Error(`Cannot retrieve the certificate hash. ` + `Is the certificate properly encoded into base64-string? ` + `Original error: ${err.message}`);
  } finally {
    await _appiumSupport.fs.rimraf(tmpRoot);
  }

  const dstPath = _path.default.posix.resolve(CERTS_ROOT, `${certHash}.0`);

  _logger.default.debug(`Checking if the certificate is already installed at '${dstPath}'`);

  return await this.fileExists(dstPath);
};

var _default = systemCallMethods;
exports.default = _default;require('source-map-support').install();


//# sourceMappingURL=data:application/json;charset=utf8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbImxpYi90b29scy9zeXN0ZW0tY2FsbHMuanMiXSwibmFtZXMiOlsic3lzdGVtQ2FsbE1ldGhvZHMiLCJERUZBVUxUX0FEQl9SRUJPT1RfUkVUUklFUyIsIkxJTktFUl9XQVJOSU5HX1JFR0VYUCIsIkFEQl9SRVRSWV9FUlJPUl9QQVRURVJOUyIsIkJJTkFSWV9WRVJTSU9OX1BBVFRFUk4iLCJCUklER0VfVkVSU0lPTl9QQVRURVJOIiwiQ0VSVFNfUk9PVCIsIlNES19CSU5BUllfUk9PVFMiLCJnZXRTZGtCaW5hcnlQYXRoIiwiYmluYXJ5TmFtZSIsImdldEJpbmFyeUZyb21TZGtSb290IiwiZ2V0QmluYXJ5TmFtZUZvck9TIiwiXyIsIm1lbW9pemUiLCJnZXRCaW5hcnlOYW1lRm9yT1NNZW1vcml6ZSIsInN5c3RlbSIsImlzV2luZG93cyIsImluY2x1ZGVzIiwicGF0aCIsImV4dG5hbWUiLCJiaW5hcmllcyIsImZ1bGxCaW5hcnlOYW1lIiwiYmluYXJ5TG9jcyIsImdldFNka0JpbmFyeUxvY2F0aW9uQ2FuZGlkYXRlcyIsInNka1Jvb3QiLCJidWlsZFRvb2xzRGlycyIsImJ1aWxkVG9vbHNWZXJzaW9uIiwiZmlsdGVyIiwieCIsImJhc2VuYW1lIiwiaXNFbXB0eSIsImxvZyIsImluZm8iLCJwdXNoIiwiZmxhdHRlbiIsIm1hcCIsImRpciIsInJlc29sdmUiLCJiaW5hcnlMb2MiLCJsb2MiLCJmcyIsImV4aXN0cyIsImlzTnVsbCIsIkVycm9yIiwiSlNPTiIsInN0cmluZ2lmeSIsImlzQXJyYXkiLCJnZXRBbmRyb2lkQmluYXJ5UGF0aCIsImdldEJpbmFyeUZyb21QYXRoIiwid2hpY2giLCJlIiwiZ2V0Q29ubmVjdGVkRGV2aWNlcyIsImRlYnVnIiwic3Rkb3V0IiwiZXhlY3V0YWJsZSIsImRlZmF1bHRBcmdzIiwibWVzc2FnZSIsImxpc3RIZWFkZXIiLCJzdGFydGluZ0luZGV4IiwiaW5kZXhPZiIsInNsaWNlIiwiZXhjbHVkZWRMaW5lcyIsImFsbG93T2ZmbGluZURldmljZXMiLCJkZXZpY2VzIiwic3BsaXQiLCJ0cmltIiwibGluZSIsInNvbWUiLCJyZWR1Y2UiLCJhY2MiLCJ1ZGlkIiwic3RhdGUiLCJnZXREZXZpY2VzV2l0aFJldHJ5IiwidGltZW91dE1zIiwidGltZXIiLCJ0aW1pbmciLCJUaW1lciIsInN0YXJ0IiwiZ2V0RGV2aWNlcyIsImdldER1cmF0aW9uIiwiYXNNaWxsaVNlY29uZHMiLCJ0b0ZpeGVkIiwibGVuZ3RoIiwiaWduIiwicmVjb25uZWN0IiwicmVzdGFydEFkYiIsInRhcmdldCIsImFyZ3MiLCJhZGJFeGVjIiwic3RkZXJyIiwic3VwcHJlc3NLaWxsU2VydmVyIiwia2lsbFNlcnZlciIsImVycm9yIiwiYWRiUG9ydCIsImV4Y2x1c2l2ZSIsInJlc2V0VGVsbmV0QXV0aFRva2VuIiwiaG9tZUZvbGRlclBhdGgiLCJwcm9jZXNzIiwiZW52IiwicGxhdGZvcm0iLCJ3YXJuIiwiZHN0UGF0aCIsIndyaXRlRmlsZSIsImFkYkV4ZWNFbXUiLCJjbWQiLCJ2ZXJpZnlFbXVsYXRvckNvbm5lY3RlZCIsImlzRXhlY0xvY2tlZCIsIm9wdHMiLCJjbG9uZURlZXAiLCJ0aW1lb3V0IiwiYWRiRXhlY1RpbWVvdXQiLCJERUZBVUxUX0FEQl9FWEVDX1RJTUVPVVQiLCJ0aW1lb3V0Q2FwTmFtZSIsImFkYlJldHJpZWQiLCJleGVjRnVuYyIsInV0aWwiLCJxdW90ZSIsInJlcGxhY2UiLCJlcnJUZXh0IiwicCIsInRlc3QiLCJjb2RlIiwid2FpdE1zIiwiTnVtYmVyIiwiTUFYX1NBRkVfSU5URUdFUiIsImludGVydmFsTXMiLCJzaGVsbCIsInByaXZpbGVnZWQiLCJjbWRBcnIiLCJmdWxsQ21kIiwiaXNSb290IiwiY3JlYXRlU3ViUHJvY2VzcyIsIlN1YlByb2Nlc3MiLCJnZXRBZGJQYXRoIiwiZ2V0QWRiU2VydmVyUG9ydCIsImdldEVtdWxhdG9yUG9ydCIsImVtdWxhdG9yUG9ydCIsInBvcnQiLCJnZXRQb3J0RnJvbUVtdWxhdG9yU3RyaW5nIiwiZW1TdHIiLCJwb3J0UGF0dGVybiIsInBhcnNlSW50IiwiZXhlYyIsImdldENvbm5lY3RlZEVtdWxhdG9ycyIsImVtdWxhdG9ycyIsImRldmljZSIsInBsdXJhbGl6ZSIsInNldEVtdWxhdG9yUG9ydCIsImVtUG9ydCIsInNldERldmljZUlkIiwiZGV2aWNlSWQiLCJjdXJEZXZpY2VJZCIsImFyZ3NIYXNEZXZpY2UiLCJzcGxpY2UiLCJzZXREZXZpY2UiLCJkZXZpY2VPYmoiLCJnZXRSdW5uaW5nQVZEIiwiYXZkTmFtZSIsImVtdWxhdG9yIiwicnVubmluZ0FWRE5hbWUiLCJleGVjRW11Q29uc29sZUNvbW1hbmQiLCJleGVjVGltZW91dCIsImNvbm5UaW1lb3V0IiwidG9Mb3dlciIsImdldFJ1bm5pbmdBVkRXaXRoUmV0cnkiLCJraWxsQWxsRW11bGF0b3JzIiwia2lsbEVtdWxhdG9yIiwiaGFzVmFsdWUiLCJpc0VtdWxhdG9yQ29ubmVjdGVkIiwibGF1bmNoQVZEIiwibGFuZ3VhZ2UiLCJjb3VudHJ5IiwibGF1bmNoVGltZW91dCIsInJlYWR5VGltZW91dCIsInJldHJ5VGltZXMiLCJlbXVsYXRvckJpbmFyeVBhdGgiLCJzdWJzdHIiLCJjaGVja0F2ZEV4aXN0IiwibGF1bmNoQXJncyIsInJldmlzaW9uIiwiZ2V0RW11VmVyc2lvbkluZm8iLCJzdXBwb3J0c0RlbGF5QWRiRmVhdHVyZSIsImNvbXBhcmVWZXJzaW9ucyIsImdldEVtdUltYWdlUHJvcGVydGllcyIsImFwaU1hdGNoIiwic2hlbGxQYXJzZSIsInByb2MiLCJPYmplY3QiLCJhc3NpZ24iLCJvbiIsIkJvb2xlYW4iLCJzaWduYWwiLCJ3YWl0Rm9yRW11bGF0b3JSZWFkeSIsImdldFZlcnNpb24iLCJyZXN1bHQiLCJiaW5hcnlWZXJzaW9uTWF0Y2giLCJiaW5hcnkiLCJ2ZXJzaW9uIiwic2VtdmVyIiwiY29lcmNlIiwiYnVpbGQiLCJicmlkZ2VWZXJzaW9uTWF0Y2giLCJicmlkZ2UiLCJlcnIiLCJ3YWl0Rm9yRGV2aWNlIiwiYXBwRGV2aWNlUmVhZHlUaW1lb3V0IiwicmV0cmllcyIsInBpbmciLCJyZWJvb3QiLCJ3YXNBbHJlYWR5Um9vdGVkIiwicm9vdCIsIkIiLCJkZWxheSIsInNldERldmljZVByb3BlcnR5IiwidW5yb290IiwiZ2V0RGV2aWNlUHJvcGVydHkiLCJtc2ciLCJjaGFuZ2VVc2VyUHJpdmlsZWdlcyIsImlzRWxldmF0ZWQiLCJyZXRyeUlmT2ZmbGluZSIsImNtZEZ1bmMiLCJ0b0xvd2VyQ2FzZSIsImlzU3VjY2Vzc2Z1bCIsImZpbGVFeGlzdHMiLCJyZW1vdGVQYXRoIiwicGFzc0ZsYWciLCJjaGVja0NtZCIsImxzIiwibGluZXMiLCJsIiwiZmlsZVNpemUiLCJmaWxlcyIsIm1hdGNoIiwiaXNOYU4iLCJpbnN0YWxsTWl0bUNlcnRpZmljYXRlIiwiY2VydCIsIm9wZW5Tc2wiLCJpc0J1ZmZlciIsIkJ1ZmZlciIsImZyb20iLCJ0bXBSb290IiwidGVtcERpciIsIm9wZW5EaXIiLCJzcmNDZXJ0IiwiY2VydEhhc2giLCJkc3RDZXJ0Q29udGVudCIsImNvbmNhdCIsImRzdENlcnQiLCJyaW1yYWYiLCJpc01pdG1DZXJ0aWZpY2F0ZUluc3RhbGxlZCIsInRtcENlcnQiLCJwb3NpeCJdLCJtYXBwaW5ncyI6Ijs7Ozs7Ozs7Ozs7Ozs7Ozs7O0FBQUE7O0FBQ0E7O0FBQ0E7O0FBQ0E7O0FBQ0E7O0FBSUE7O0FBQ0E7O0FBQ0E7O0FBQ0E7O0FBR0EsSUFBSUEsaUJBQWlCLEdBQUcsRUFBeEI7QUFFQSxNQUFNQywwQkFBMEIsR0FBRyxFQUFuQztBQUVBLE1BQU1DLHFCQUFxQixHQUFHLHNCQUE5QjtBQUNBLE1BQU1DLHdCQUF3QixHQUFHLENBQy9CLCtCQUQrQixFQUUvQixrQ0FGK0IsRUFHL0IsaUNBSCtCLENBQWpDO0FBS0EsTUFBTUMsc0JBQXNCLEdBQUcsMEJBQS9CO0FBQ0EsTUFBTUMsc0JBQXNCLEdBQUcseUNBQS9CO0FBRUEsTUFBTUMsVUFBVSxHQUFHLDhCQUFuQjtBQUNBLE1BQU1DLGdCQUFnQixHQUFHLENBQ3ZCLGdCQUR1QixF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bSAncGF0aCc7XG5pbXBvcnQgbG9nIGZyb20gJy4uL2xvZ2dlci5qcyc7XG5pbXBvcnQgQiBmcm9tICdibHVlYmlyZCc7XG5pbXBvcnQgeyBzeXN0ZW0sIGZzLCB1dGlsLCB0ZW1wRGlyLCB0aW1pbmcgfSBmcm9tICdhcHBpdW0tc3VwcG9ydCc7XG5pbXBvcnQge1xuICBnZXRCdWlsZFRvb2xzRGlycywgdG9BdmRMb2NhbGVBcmdzLFxuICBnZXRPcGVuU3NsRm9yT3MsIERFRkFVTFRfQURCX0VYRUNfVElNRU9VVCwgZ2V0U2RrUm9vdEZyb21FbnZcbn0gZnJvbSAnLi4vaGVscGVycyc7XG5pbXBvcnQgeyBleGVjLCBTdWJQcm9jZXNzIH0gZnJvbSAndGVlbl9wcm9jZXNzJztcbmltcG9ydCB7IHNsZWVwLCByZXRyeSwgcmV0cnlJbnRlcnZhbCwgd2FpdEZvckNvbmRpdGlvbiB9IGZyb20gJ2FzeW5jYm94JztcbmltcG9ydCBfIGZyb20gJ2xvZGFzaCc7XG5pbXBvcnQgc2VtdmVyIGZyb20gJ3NlbXZlcic7XG5cblxubGV0IHN5c3RlbUNhbGxNZXRob2RzID0ge307XG5cbmNvbnN0IERFRkFVTFRfQURCX1JFQk9PVF9SRVRSSUVTID0gOTA7XG5cbmNvbnN0IExJTktFUl9XQVJOSU5HX1JFR0VYUCA9IC9eV0FSTklORzogbGlua2VyLiskL207XG5jb25zdCBBREJfUkVUUllfRVJST1JfUEFUVEVSTlMgPSBbXG4gIC9wcm90b2NvbCBmYXVsdCBcXChubyBzdGF0dXNcXCkvaSxcbiAgL2Vycm9yOiBkZXZpY2UgKCcuKycgKT9ub3QgZm91bmQvaSxcbiAgL2Vycm9yOiBkZXZpY2Ugc3RpbGwgY29ubmVjdGluZy9pLFxuXTtcbmNvbnN0IEJJTkFSWV9WRVJTSU9OX1BBVFRFUk4gPSAvXlZlcnNpb24gKFtcXGQuXSspLShcXGQrKS9tO1xuY29uc3QgQlJJREdFX1ZFUlNJT05fUEFUVEVSTiA9IC9eQW5kcm9pZCBEZWJ1ZyBCcmlkZ2UgdmVyc2lvbiAoW1xcZC5dKykvbTtcblxuY29uc3QgQ0VSVFNfUk9PVCA9ICcvc3lzdGVtL2V0Yy9zZWN1cml0eS9jYWNlcnRzJztcbmNvbnN0IFNES19CSU5BUllfUk9PVFMgPSBbXG4gICdwbGF0Zm9ybS10b29scycsXG4gICdlbXVsYXRvcicsXG4gIFsnY21kbGluZS10b29scycsICdsYXRlc3QnLCAnYmluJ10sXG4gICd0b29scycsXG4gIFsndG9vbHMnLCAnYmluJ10sXG4gICcuJyAvLyBBbGxvdyBjdXN0b20gc2RrUm9vdCB0byBzcGVjaWZ5IGZ1bGwgZm9sZGVyIHBhdGhcbl07XG5cbi8qKlxuICogUmV0cmlldmUgZnVsbCBwYXRoIHRvIHRoZSBnaXZlbiBiaW5hcnkuXG4gKlxuICogQHBhcmFtIHtzdHJpbmd9IGJpbmFyeU5hbWUgLSBUaGUgbmFtZSBvZiB0aGUgYmluYXJ5LlxuICogQHJldHVybiB7c3RyaW5nfSBGdWxsIHBhdGggdG8gdGhlIGdpdmVuIGJpbmFyeSBpbmNsdWRpbmcgY3VycmVudCBTREsgcm9vdC5cbiAqL1xuc3lzdGVtQ2FsbE1ldGhvZHMuZ2V0U2RrQmluYXJ5UGF0aCA9IGFzeW5jIGZ1bmN0aW9uIGdldFNka0JpbmFyeVBhdGggKGJpbmFyeU5hbWUpIHtcbiAgcmV0dXJuIGF3YWl0IHRoaXMuZ2V0QmluYXJ5RnJvbVNka1Jvb3QoYmluYXJ5TmFtZSk7XG59O1xuXG4vKipcbiAqIFJldHJpZXZlIGZ1bGwgYmluYXJ5IG5hbWUgZm9yIHRoZSBjdXJyZW50IG9wZXJhdGluZyBzeXN0ZW0gYXMgbWVtb3RpemUuXG4gKlxuICogQHBhcmFtIHtzdHJpbmd9IGJpbmFyeU5hbWUgLSBzaW1wbGUgYmluYXJ5IG5hbWUsIGZvciBleGFtcGxlICdhbmRyb2lkJy5cbiAqIEByZXR1cm4ge3N0cmluZ30gRm9ybWF0dGVkIGJpbmFyeSBuYW1lIGRlcGVuZGluZyBvbiB0aGUgY3VycmVudCBwbGF0Zm9ybSxcbiAqICAgICAgICAgICAgICAgICAgZm9yIGV4YW1wbGUsICdhbmRyb2lkLmJhdCcgb24gV2luZG93cy5cbiAqL1xuc3lzdGVtQ2FsbE1ldGhvZHMuZ2V0QmluYXJ5TmFtZUZvck9TID0gXy5tZW1vaXplKGZ1bmN0aW9uIGdldEJpbmFyeU5hbWVGb3JPU01lbW9yaXplIChiaW5hcnlOYW1lKSB7XG4gIHJldHVybiBnZXRCaW5hcnlOYW1lRm9yT1MoYmluYXJ5TmFtZSk7XG59KTtcblxuLyoqXG4gKiBSZXRyaWV2ZSBmdWxsIGJpbmFyeSBuYW1lIGZvciB0aGUgY3VycmVudCBvcGVyYXRpbmcgc3lzdGVtLlxuICpcbiAqIEBwYXJhbSB7c3RyaW5nfSBiaW5hcnlOYW1lIC0gc2ltcGxlIGJpbmFyeSBuYW1lLCBmb3IgZXhhbXBsZSAnYW5kcm9pZCcuXG4gKiBAcmV0dXJuIHtzdHJpbmd9IEZvcm1hdHRlZCBiaW5hcnkgbmFtZSBkZXBlbmRpbmcgb24gdGhlIGN1cnJlbnQgcGxhdGZvcm0sXG4gKiAgICAgICAgICAgICAgICAgIGZvciBleGFtcGxlLCAnYW5kcm9pZC5iYXQnIG9uIFdpbmRvd3MuXG4gKi9cbmZ1bmN0aW9uIGdldEJpbmFyeU5hbWVGb3JPUyAoYmluYXJ5TmFtZSkge1xuICBpZiAoIXN5c3RlbS5pc1dpbmRvd3MoKSkge1xuICAgIHJldHVybiBiaW5hcnlOYW1lO1xuICB9XG5cbiAgaWYgKFsnYW5kcm9pZCcsICdhcGtzaWduZXInLCAnYXBrYW5hbHl6ZXInXS5pbmNsdWRlcyhiaW5hcnlOYW1lKSkge1xuICAgIHJldHVybiBgJHtiaW5hcnlOYW1lfS5iYXRgO1xuICB9XG4gIGlmICghcGF0aC5leHRuYW1lKGJpbmFyeU5hbWUpKSB7XG4gICAgcmV0dXJuIGAke2JpbmFyeU5hbWV9LmV4ZWA7XG4gIH1cbiAgcmV0dXJuIGJpbmFyeU5hbWU7XG59XG5cbi8qKlxuICogUmV0cmlldmUgZnVsbCBwYXRoIHRvIHRoZSBnaXZlbiBiaW5hcnkgYW5kIGNhY2hlcyBpdCBpbnRvIGBiaW5hcmllc2BcbiAqIHByb3BlcnR5IG9mIHRoZSBjdXJyZW50IEFEQiBpbnN0YW5jZS5cbiAqXG4gKiBAcGFyYW0ge3N0cmluZ30gYmluYXJ5TmFtZSAtIFNpbXBsZSBuYW1lIG9mIGEgYmluYXJ5IGZpbGUuXG4gKiBAcmV0dXJuIHtzdHJpbmd9IEZ1bGwgcGF0aCB0byB0aGUgZ2l2ZW4gYmluYXJ5LiBUaGUgbWV0aG9kIHRyaWVzXG4gKiAgICAgICAgICAgICAgICAgIHRvIGVudW1lcmF0ZSBhbGwgdGhlIGtub3duIGxvY2F0aW9ucyB3aGVyZSB0aGUgYmluYXJ5XG4gKiAgICAgICAgICAgICAgICAgIG1pZ2h0IGJlIGxvY2F0ZWQgYW5kIHN0b3BzIHRoZSBzZWFyY2ggYXMgc29vbiBhcyB0aGUgZmlyc3RcbiAqICAgICAgICAgICAgICAgICAgbWF0Y2ggaXMgZm91bmQgb24gdGhlIGxvY2FsIGZpbGUgc3lzdGVtLlxuICogQHRocm93cyB7RXJyb3J9IElmIHRoZSBiaW5hcnkgd2l0aCBnaXZlbiBuYW1lIGlzIG5vdCBwcmVzZW50IGF0IGFueVxuICogICAgICAgICAgICAgICAgIG9mIGtub3duIGxvY2F0aW9ucyBvciBBbmRyb2lkIFNESyBpcyBub3QgaW5zdGFsbGVkIG9uIHRoZVxuICogICAgICAgICAgICAgICAgIGxvY2FsIGZpbGUgc3lzdGVtLlxuICovXG5zeXN0ZW1DYWxsTWV0aG9kcy5nZXRCaW5hcnlGcm9tU2RrUm9vdCA9IGFzeW5jIGZ1bmN0aW9uIGdldEJpbmFyeUZyb21TZGtSb290IChiaW5hcnlOYW1lKSB7XG4gIGlmICh0aGlzLmJpbmFyaWVzW2JpbmFyeU5hbWVdKSB7XG4gICAgcmV0dXJuIHRoaXMuYmluYXJpZXNbYmluYXJ5TmFtZV07XG4gIH1cbiAgY29uc3QgZnVsbEJpbmFyeU5hbWUgPSB0aGlzLmdldEJpbmFyeU5hbWVGb3JPUyhiaW5hcnlOYW1lKTtcbiAgY29uc3QgYmluYXJ5TG9jcyA9IGdldFNka0JpbmFyeUxvY2F0aW9uQ2FuZGlkYXRlcyh0aGlzLnNka1Jvb3QsIGZ1bGxCaW5hcnlOYW1lKTtcblxuICAvLyBnZXQgc3VicGF0aHMgZm9yIGN1cnJlbnRseSBpbnN0YWxsZWQgYnVpbGQgdG9vbCBkaXJlY3Rvcmllc1xuICBsZXQgYnVpbGRUb29sc0RpcnMgPSBhd2FpdCBnZXRCdWlsZFRvb2xzRGlycyh0aGlzLnNka1Jvb3QpO1xuICBpZiAodGhpcy5idWlsZFRvb2xzVmVyc2lvbikge1xuICAgIGJ1aWxkVG9vbHNEaXJzID0gYnVpbGRUb29sc0RpcnNcbiAgICAgIC5maWx0ZXIoKHgpID0+IHBhdGguYmFzZW5hbWUoeCkgPT09IHRoaXMuYnVpbGRUb29sc1ZlcnNpb24pO1xuICAgIGlmIChfLmlzRW1wdHkoYnVpbGRUb29sc0RpcnMpKSB7XG4gICAgICBsb2cuaW5mbyhgRm91bmQgbm8gYnVpbGQgdG9vbHMgd2hvc2UgdmVyc2lvbiBtYXRjaGVzIHRvICcke3RoaXMuYnVpbGRUb29sc1ZlcnNpb259J2ApO1xuICAgIH0gZWxzZSB7XG4gICAgICBsb2cuaW5mbyhgVXNpbmcgYnVpbGQgdG9vbHMgYXQgJyR7YnVpbGRUb29sc0RpcnN9J2ApO1xuICAgIH1cbiAgfVxuICBiaW5hcnlMb2NzLnB1c2goLi4uKF8uZmxhdHRlbihidWlsZFRvb2xzRGlyc1xuICAgIC5tYXAoKGRpcikgPT4gW1xuICAgICAgcGF0aC5yZXNvbHZlKGRpciwgZnVsbEJpbmFyeU5hbWUpLFxuICAgICAgcGF0aC5yZXNvbHZlKGRpciwgJ2xpYicsIGZ1bGxCaW5hcnlOYW1lKSxcbiAgICBdKSlcbiAgKSk7XG5cbiAgbGV0IGJpbmFyeUxvYyA9IG51bGw7XG4gIGZvciAoY29uc3QgbG9jIG9mIGJpbmFyeUxvY3MpIHtcbiAgICBpZiAoYXdhaXQgZnMuZXhpc3RzKGxvYykpIHtcbiAgICAgIGJpbmFyeUxvYyA9IGxvYztcbiAgICAgIGJyZWFrO1xuICAgIH1cbiAgfVxuICBpZiAoXy5pc051bGwoYmluYXJ5TG9jKSkge1xuICAgIHRocm93IG5ldyBFcnJvcihgQ291bGQgbm90IGZpbmQgJyR7ZnVsbEJpbmFyeU5hbWV9JyBpbiAke0pTT04uc3RyaW5naWZ5KGJpbmFyeUxvY3MpfS4gYCArXG4gICAgICBgRG8geW91IGhhdmUgQW5kcm9pZCBCdWlsZCBUb29scyAke3RoaXMuYnVpbGRUb29sc1ZlcnNpb24gPyBgdiAke3RoaXMuYnVpbGRUb29sc1ZlcnNpb259IGAgOiAnJ31gICtcbiAgICAgIGBpbnN0YWxsZWQgYXQgJyR7dGhpcy5zZGtSb290fSc/YCk7XG4gIH1cbiAgbG9nLmluZm8oYFVzaW5nICcke2Z1bGxCaW5hcnlOYW1lfScgZnJvbSAnJHtiaW5hcnlMb2N9J2ApO1xuICB0aGlzLmJpbmFyaWVzW2JpbmFyeU5hbWVdID0gYmluYXJ5TG9jO1xuICByZXR1cm4gYmluYXJ5TG9jO1xufTtcblxuLyoqXG4gKiAgUmV0dXJucyB0aGUgQW5kcm9pZCBiaW5hcmllcyBsb2NhdGlvbnNcbiAqXG4gKiBAcGFyYW0ge3N0cmluZ30gc2RrUm9vdCBUaGUgcGF0aCB0byBBbmRyb2lkIFNESyByb290LlxuICogQHBhcmFtIHtzdHJpbmd9IGZ1bGxCaW5hcnlOYW1lIFRoZSBuYW1lIG9mIGZ1bGwgYmluYXJ5IG5hbWUuXG4gKiBAcmV0dXJuIHtBcnJheTxzdHJpbmc+fSBUaGUgbGlzdCBvZiBTREtfQklOQVJZX1JPT1RTIHBhdGhzXG4gKiAgICAgICAgICAgICAgICAgICAgICAgICAgd2l0aCBzZGtSb290IGFuZCBmdWxsQmluYXJ5TmFtZS5cbiAqL1xuZnVuY3Rpb24gZ2V0U2RrQmluYXJ5TG9jYXRpb25DYW5kaWRhdGVzIChzZGtSb290LCBmdWxsQmluYXJ5TmFtZSkge1xuICByZXR1cm4gU0RLX0JJTkFSWV9ST09UUy5tYXAoKHgpID0+XG4gICAgcGF0aC5yZXNvbHZlKHNka1Jvb3QsIC4uLihfLmlzQXJyYXkoeCkgPyB4IDogW3hdKSwgZnVsbEJpbmFyeU5hbWUpKTtcbn1cblxuLyoqXG4gKiBSZXRyaWV2ZSBmdWxsIHBhdGggdG8gdGhlIGdpdmVuIGJpbmFyeS5cbiAqIFRoaXMgbWV0aG9kIGRvZXMgbm90IGhhdmUgY2FjaGUuXG4gKlxuICogQHBhcmFtIHtzdHJpbmd9IGJpbmFyeU5hbWUgLSBTaW1wbGUgbmFtZSBvZiBhIGJpbmFyeSBmaWxlLlxuICogICAgICAgICAgICAgICAgICAgICAgICAgICAgICBlLmcuICdhZGInLCAnYW5kcm9pZCdcbiAqIEByZXR1cm4ge3N0cmluZ30gRnVsbCBwYXRoIHRvIHRoZSBnaXZlbiBiaW5hcnkuIFRoZSBtZXRob2QgdHJpZXNcbiAqICAgICAgICAgICAgICAgICAgdG8gZW51bWVyYXRlIGFsbCB0aGUga25vd24gbG9jYXRpb25zIHdoZXJlIHRoZSBiaW5hcnlcbiAqICAgICAgICAgICAgICAgICAgbWlnaHQgYmUgbG9jYXRlZCBhbmQgc3RvcHMgdGhlIHNlYXJjaCBhcyBzb29uIGFzIHRoZSBmaXJzdFxuICogICAgICAgICAgICAgICAgICBtYXRjaCBpcyBmb3VuZCBvbiB0aGUgbG9jYWwgZmlsZSBzeXN0ZW0uXG4gKiAgICAgICAgICAgICAgICAgIGUuZy4gJy9QYXRoL1RvL0FuZHJvaWQvc2RrL3BsYXRmb3JtLXRvb2xzL2FkYidcbiAqIEB0aHJvd3Mge0Vycm9yfSBJZiB0aGUgYmluYXJ5IHdpdGggZ2l2ZW4gbmFtZSBpcyBub3QgcHJlc2VudCBhdCBhbnlcbiAqICAgICAgICAgICAgICAgICBvZiBrbm93biBsb2NhdGlvbnMgb3IgQW5kcm9pZCBTREsgaXMgbm90IGluc3RhbGxlZCBvbiB0aGVcbiAqICAgICAgICAgICAgICAgICBsb2NhbCBmaWxlIHN5c3RlbS5cbiAqL1xuYXN5bmMgZnVuY3Rpb24gZ2V0QW5kcm9pZEJpbmFyeVBhdGggKGJpbmFyeU5hbWUpIHtcbiAgY29uc3QgZnVsbEJpbmFyeU5hbWUgPSBnZXRCaW5hcnlOYW1lRm9yT1MoYmluYXJ5TmFtZSk7XG4gIGNvbnN0IHNka1Jvb3QgPSBnZXRTZGtSb290RnJvbUVudigpO1xuICBjb25zdCBiaW5hcnlMb2NzID0gZ2V0U2RrQmluYXJ5TG9jYXRpb25DYW5kaWRhdGVzKHNka1Jvb3QsIGZ1bGxCaW5hcnlOYW1lKTtcbiAgZm9yIChjb25zdCBsb2Mgb2YgYmluYXJ5TG9jcykge1xuICAgIGlmIChhd2FpdCBmcy5leGlzdHMobG9jKSkge1xuICAgICAgcmV0dXJuIGxvYztcbiAgICB9XG4gIH1cbiAgdGhyb3cgbmV3IEVycm9yKGBDb3VsZCBub3QgZmluZCAnJHtmdWxsQmluYXJ5TmFtZX0nIGluICR7SlNPTi5zdHJpbmdpZnkoYmluYXJ5TG9jcyl9LiBgICtcbiAgICBgRG8geW91IGhhdmUgQW5kcm9pZCBCdWlsZCBUb29scyBpbnN0YWxsZWQgYXQgJyR7c2RrUm9vdH0nP2ApO1xufVxuXG4vKipcbiAqIFJldHJpZXZlIGZ1bGwgcGF0aCB0byBhIGJpbmFyeSBmaWxlIHVzaW5nIHRoZSBzdGFuZGFyZCBzeXN0ZW0gbG9va3VwIHRvb2wuXG4gKlxuICogQHBhcmFtIHtzdHJpbmd9IGJpbmFyeU5hbWUgLSBUaGUgbmFtZSBvZiB0aGUgYmluYXJ5LlxuICogQHJldHVybiB7c3RyaW5nfSBGdWxsIHBhdGggdG8gdGhlIGJpbmFyeSByZWNlaXZlZCBmcm9tICd3aGljaCcvJ3doZXJlJ1xuICogICAgICAgICAgICAgICAgICBvdXRwdXQuXG4gKiBAdGhyb3dzIHtFcnJvcn0gSWYgbG9va3VwIHRvb2wgcmV0dXJucyBub24temVybyByZXR1cm4gY29kZS5cbiAqL1xuc3lzdGVtQ2FsbE1ldGhvZHMuZ2V0QmluYXJ5RnJvbVBhdGggPSBhc3luYyBmdW5jdGlvbiBnZXRCaW5hcnlGcm9tUGF0aCAoYmluYXJ5TmFtZSkge1xuICBpZiAodGhpcy5iaW5hcmllc1tiaW5hcnlOYW1lXSkge1xuICAgIHJldHVybiB0aGlzLmJpbmFyaWVzW2JpbmFyeU5hbWVdO1xuICB9XG5cbiAgY29uc3QgZnVsbEJpbmFyeU5hbWUgPSB0aGlzLmdldEJpbmFyeU5hbWVGb3JPUyhiaW5hcnlOYW1lKTtcbiAgdHJ5IHtcbiAgICBjb25zdCBiaW5hcnlMb2MgPSBhd2FpdCBmcy53aGljaChmdWxsQmluYXJ5TmFtZSk7XG4gICAgbG9nLmluZm8oYFVzaW5nICcke2Z1bGxCaW5hcnlOYW1lfScgZnJvbSAnJHtiaW5hcnlMb2N9J2ApO1xuICAgIHRoaXMuYmluYXJpZXNbYmluYXJ5TmFtZV0gPSBiaW5hcnlMb2M7XG4gICAgcmV0dXJuIGJpbmFyeUxvYztcbiAgfSBjYXRjaCAoZSkge1xuICAgIHRocm93IG5ldyBFcnJvcihgQ291bGQgbm90IGZpbmQgJyR7ZnVsbEJpbmFyeU5hbWV9JyBpbiBQQVRILiBQbGVhc2Ugc2V0IHRoZSBBTkRST0lEX0hPTUUgYCArXG4gICAgICBgb3IgQU5EUk9JRF9TREtfUk9PVCBlbnZpcm9ubWVudCB2YXJpYWJsZXMgdG8gdGhlIGNvcnJlY3QgQW5kcm9pZCBTREsgcm9vdCBkaXJlY3RvcnkgcGF0aC5gKTtcbiAgfVxufTtcblxuLyoqXG4gKiBAdHlwZWRlZiB7T2JqZWN0fSBEZXZpY2VcbiAqIEBwcm9wZXJ0eSB7c3RyaW5nfSB1ZGlkIC0gVGhlIGRldmljZSB1ZGlkLlxuICogQHByb3BlcnR5IHtzdHJpbmd9IHN0YXRlIC0gQ3VycmVudCBkZXZpY2Ugc3RhdGUsIGFzIGl0IGlzIHZpc2libGUgaW5cbiAqICAgICAgICAgICAgICAgICAgICAgICAgICAgIF9hZGIgZGV2aWNlcyAtbF8gb3V0cHV0LlxuICovXG5cbi8qKlxuICogUmV0cmlldmUgdGhlIGxpc3Qgb2YgZGV2aWNlcyB2aXNpYmxlIHRvIGFkYi5cbiAqXG4gKiBAcmV0dXJuIHtBcnJheS48RGV2aWNlPn0gVGhlIGxpc3Qgb2YgZGV2aWNlcyBvciBhbiBlbXB0eSBsaXN0IGlmXG4gKiAgICAgICAgICAgICAgICAgICAgICAgICAgbm8gZGV2aWNlcyBhcmUgY29ubmVjdGVkLlxuICogQHRocm93cyB7RXJyb3J9IElmIHRoZXJlIHdhcyBhbiBlcnJvciB3aGlsZSBsaXN0aW5nIGRldmljZXMuXG4gKi9cbnN5c3RlbUNhbGxNZXRob2RzLmdldENvbm5lY3RlZERldmljZXMgPSBhc3luYyBmdW5jdGlvbiBnZXRDb25uZWN0ZWREZXZpY2VzICgpIHtcbiAgbG9nLmRlYnVnKCdHZXR0aW5nIGNvbm5lY3RlZCBkZXZpY2VzJyk7XG4gIGxldCBzdGRvdXQ7XG4gIHRyeSB7XG4gICAgKHtzdGRvdXR9ID0gYXdhaXQgZXhlYyh0aGlzLmV4ZWN1dGFibGUucGF0aCwgWy4uLnRoaXMuZXhlY3V0YWJsZS5kZWZhdWx0QXJncywgJ2RldmljZXMnXSkpO1xuICB9IGNhdGNoIChlKSB7XG4gICAgdGhyb3cgbmV3IEVycm9yKGBFcnJvciB3aGlsZSBnZXR0aW5nIGNvbm5lY3RlZCBkZXZpY2VzLiBPcmlnaW5hbCBlcnJvcjogJHtlLm1lc3NhZ2V9YCk7XG4gIH1cbiAgY29uc3QgbGlzdEhlYWRlciA9ICdMaXN0IG9mIGRldmljZXMnO1xuICAvLyBleHBlY3RpbmcgYWRiIGRldmljZXMgdG8gcmV0dXJuIG91dHB1dCBhc1xuICAvLyBMaXN0IG9mIGRldmljZXMgYXR0YWNoZWRcbiAgLy8gZW11bGF0b3ItNTU1NFx0ZGV2aWNlXG4gIGNvbnN0IHN0YXJ0aW5nSW5kZXggPSBzdGRvdXQuaW5kZXhPZihsaXN0SGVhZGVyKTtcbiAgaWYgKHN0YXJ0aW5nSW5kZXggPCAwKSB7XG4gICAgdGhyb3cgbmV3IEVycm9yKGBVbmV4cGVjdGVkIG91dHB1dCB3aGlsZSB0cnlpbmcgdG8gZ2V0IGRldmljZXM6ICR7c3Rkb3V0fWApO1xuICB9XG4gIC8vIHNsaWNpbmcgb3V0cHV0IHdlIGNhcmUgYWJvdXRcbiAgc3Rkb3V0ID0gc3Rkb3V0LnNsaWNlKHN0YXJ0aW5nSW5kZXgpO1xuICBsZXQgZXhjbHVkZWRMaW5lcyA9IFtsaXN0SGVhZGVyLCAnYWRiIHNlcnZlcicsICcqIGRhZW1vbiddO1xuICBpZiAoIXRoaXMuYWxsb3dPZmZsaW5lRGV2aWNlcykge1xuICAgIGV4Y2x1ZGVkTGluZXMucHVzaCgnb2ZmbGluZScpO1xuICB9XG4gIGNvbnN0IGRldmljZXMgPSBzdGRvdXQuc3BsaXQoJ1xcbicpXG4gICAgLm1hcChfLnRyaW0pXG4gICAgLmZpbHRlcigobGluZSkgPT4gbGluZSAmJiAhZXhjbHVkZWRMaW5lcy5zb21lKCh4KSA9PiBsaW5lLmluY2x1ZGVzKHgpKSlcbiAgICAucmVkdWNlKChhY2MsIGxpbmUpID0+IHtcbiAgICAgIC8vIHN0YXRlIGlzIFwiZGV2aWNlXCIsIGFmYWljXG4gICAgICBjb25zdCBbdWRpZCwgc3RhdGVdID0gbGluZS5zcGxpdCgvXFxzKy8pO1xuICAgICAgYWNjLnB1c2goe3VkaWQsIHN0YXRlfSk7XG4gICAgICByZXR1cm4gYWNjO1xuICAgIH0sIFtdKTtcbiAgaWYgKF8uaXNFbXB0eShkZXZpY2VzKSkge1xuICAgIGxvZy5kZWJ1ZygnTm8gY29ubmVjdGVkIGRldmljZXMgaGF2ZSBiZWVuIGRldGVjdGVkJyk7XG4gIH0gZWxzZSB7XG4gICAgbG9nLmRlYnVnKGBDb25uZWN0ZWQgZGV2aWNlczogJHtKU09OLnN0cmluZ2lmeShkZXZpY2VzKX1gKTtcbiAgfVxuICByZXR1cm4gZGV2aWNlcztcbn07XG5cbi8qKlxuICogUmV0cmlldmUgdGhlIGxpc3Qgb2YgZGV2aWNlcyB2aXNpYmxlIHRvIGFkYiB3aXRoaW4gdGhlIGdpdmVuIHRpbWVvdXQuXG4gKlxuICogQHBhcmFtIHtudW1iZXJ9IHRpbWVvdXRNcyAtIFRoZSBtYXhpbXVtIG51bWJlciBvZiBtaWxsaXNlY29uZHMgdG8gZ2V0IGF0IGxlYXN0XG4gKiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgb25lIGxpc3QgaXRlbS5cbiAqIEByZXR1cm4ge0FycmF5LjxEZXZpY2U+fSBUaGUgbGlzdCBvZiBjb25uZWN0ZWQgZGV2aWNlcy5cbiAqIEB0aHJvd3Mge0Vycm9yfSBJZiBubyBjb25uZWN0ZWQgZGV2aWNlcyBjYW4gYmUgZGV0ZWN0ZWQgd2l0aGluIHRoZSBnaXZlbiB0aW1lb3V0LlxuICovXG5zeXN0ZW1DYWxsTWV0aG9kcy5nZXREZXZpY2VzV2l0aFJldHJ5ID0gYXN5bmMgZnVuY3Rpb24gZ2V0RGV2aWNlc1dpdGhSZXRyeSAodGltZW91dE1zID0gMjAwMDApIHtcbiAgY29uc3QgdGltZXIgPSBuZXcgdGltaW5nLlRpbWVyKCkuc3RhcnQoKTtcbiAgbG9nLmRlYnVnKCdUcnlpbmcgdG8gZmluZCBhIGNvbm5lY3RlZCBhbmRyb2lkIGRldmljZScpO1xuICBjb25zdCBnZXREZXZpY2VzID0gYXN5bmMgKCkgPT4ge1xuICAgIGlmICh0aW1lci5nZXREdXJhdGlvbigpLmFzTWlsbGlTZWNvbmRzID4gdGltZW91dE1zKSB7XG4gICAgICB0aHJvdyBuZXcgRXJyb3IoYENvdWxkIG5vdCBmaW5kIGEgY29ubmVjdGVkIEFuZHJvaWQgZGV2aWNlIGluICR7dGltZXIuZ2V0RHVyYXRpb24oKS5hc01pbGxpU2Vjb25kcy50b0ZpeGVkKDApfW1zLmApO1xuICAgIH1cbiAgICB0cnkge1xuICAgICAgY29uc3QgZGV2aWNlcyA9IGF3YWl0IHRoaXMuZ2V0Q29ubmVjdGVkRGV2aWNlcygpO1xuICAgICAgaWYgKGRldmljZXMubGVuZ3RoID4gMCkge1xuICAgICAgICByZXR1cm4gZGV2aWNlcztcbiAgICAgIH1cbiAgICB9IGNhdGNoIChpZ24pIHt9XG5cbiAgICBsb2cuZGVidWcoJ0NvdWxkIG5vdCBmaW5kIG9ubGluZSBkZXZpY2VzJyk7XG4gICAgdHJ5IHtcbiAgICAgIGF3YWl0IHRoaXMucmVjb25uZWN0KCk7XG4gICAgfSBjYXRjaCAoaWduKSB7XG4gICAgICBhd2FpdCB0aGlzLnJlc3RhcnRBZGIoKTtcbiAgICB9XG4gICAgLy8gY29vbCBkb3duXG4gICAgYXdhaXQgc2xlZXAoMjAwKTtcbiAgICByZXR1cm4gYXdhaXQgZ2V0RGV2aWNlcygpO1xuICB9O1xuICByZXR1cm4gYXdhaXQgZ2V0RGV2aWNlcygpO1xufTtcblxuLyoqXG4gKiBLaWNrIGN1cnJlbnQgY29ubmVjdGlvbiBmcm9tIGhvc3QvZGV2aWNlIHNpZGUgYW5kIG1ha2UgaXQgcmVjb25uZWN0XG4gKlxuICogQHBhcmFtIHs/c3RyaW5nfSB0YXJnZXQgW29mZmxpbmVdIE9uZSBvZiBwb3NzaWJsZSB0YXJnZXRzIHRvIHJlY29ubmVjdDpcbiAqIG9mZmxpbmUsIGRldmljZSBvciBudWxsXG4gKiBQcm92aWRpbmcgYG51bGxgIHdpbGwgY2F1c2UgcmVjb25uZWN0aW9uIHRvIGhhcHBlbiBmcm9tIHRoZSBob3N0IHNpZGUuXG4gKlxuICogQHRocm93cyB7RXJyb3J9IElmIGVpdGhlciBBREIgdmVyc2lvbiBpcyB0b28gb2xkIGFuZCBkb2VzIG5vdCBzdXBwb3J0IHRoaXNcbiAqIGNvbW1hbmQgb3IgdGhlcmUgd2FzIGEgZmFpbHVyZSBkdXJpbmcgcmVjb25uZWN0LlxuICovXG5zeXN0ZW1DYWxsTWV0aG9kcy5yZWNvbm5lY3QgPSBhc3luYyBmdW5jdGlvbiByZWNvbm5lY3QgKHRhcmdldCA9ICdvZmZsaW5lJykge1xuICBsb2cuZGVidWcoYFJlY29ubmVjdGluZyBhZGIgKHRhcmdldCAke3RhcmdldH0pYCk7XG5cbiAgY29uc3QgYXJncyA9IFsncmVjb25uZWN0J107XG4gIGlmICh0YXJnZXQpIHtcbiAgICBhcmdzLnB1c2godGFyZ2V0KTtcbiAgfVxuICB0cnkge1xuICAgIGF3YWl0IHRoaXMuYWRiRXhlYyhhcmdzKTtcbiAgfSBjYXRjaCAoZSkge1xuICAgIHRocm93IG5ldyBFcnJvcihgQ2Fubm90IHJlY29ubmVjdCBhZGIuIE9yaWdpbmFsIGVycm9yOiAke2Uuc3RkZXJyIHx8IGUubWVzc2FnZX1gKTtcbiAgfVxufTtcblxuLyoqXG4gKiBSZXN0YXJ0IGFkYiBzZXJ2ZXIsIHVubGVzcyBfdGhpcy5zdXBwcmVzc0tpbGxTZXJ2ZXJfIHByb3BlcnR5IGlzIHRydWUuXG4gKi9cbnN5c3RlbUNhbGxNZXRob2RzLnJlc3RhcnRBZGIgPSBhc3luYyBmdW5jdGlvbiByZXN0YXJ0QWRiICgpIHtcbiAgaWYgKHRoaXMuc3VwcHJlc3NLaWxsU2VydmVyKSB7XG4gICAgbG9nLmRlYnVnKGBOb3QgcmVzdGFydGluZyBhYmQgc2luY2UgJ3N1cHByZXNzS2lsbFNlcnZlcicgaXMgb25gKTtcbiAgICByZXR1cm47XG4gIH1cblxuICBsb2cuZGVidWcoJ1Jlc3RhcnRpbmcgYWRiJyk7XG4gIHRyeSB7XG4gICAgYXdhaXQgdGhpcy5raWxsU2VydmVyKCk7XG4gICAgYXdhaXQgdGhpcy5hZGJFeGVjKFsnc3RhcnQtc2VydmVyJ10pO1xuICB9IGNhdGNoIChlKSB7XG4gICAgbG9nLmVycm9yKGBFcnJvciBraWxsaW5nIEFEQiBzZXJ2ZXIsIGdvaW5nIHRvIHNlZSBpZiBpdCdzIG9ubGluZSBhbnl3YXlgKTtcbiAgfVxufTtcblxuLyoqXG4gKiBLaWxsIGFkYiBzZXJ2ZXIuXG4gKi9cbnN5c3RlbUNhbGxNZXRob2RzLmtpbGxTZXJ2ZXIgPSBhc3luYyBmdW5jdGlvbiBraWxsU2VydmVyICgpIHtcbiAgbG9nLmRlYnVnKGBLaWxsaW5nIGFkYiBzZXJ2ZXIgb24gcG9ydCAnJHt0aGlzLmFkYlBvcnR9J2ApO1xuICBhd2FpdCB0aGlzLmFkYkV4ZWMoWydraWxsLXNlcnZlciddLCB7XG4gICAgZXhjbHVzaXZlOiB0cnVlLFxuICB9KTtcbn07XG5cbi8qKlxuICogUmVzZXQgVGVsbmV0IGF1dGhlbnRpY2F0aW9uIHRva2VuLlxuICogQHNlZSB7QGxpbmsgaHR0cDovL3Rvb2xzLmFuZHJvaWQuY29tL3JlY2VudC9lbXVsYXRvcjI1MTZyZWxlYXNlbm90ZXN9IGZvciBtb3JlIGRldGFpbHMuXG4gKlxuICogQHJldHVybnMge2Jvb2xlYW59IElmIHRva2VuIHJlc2V0IHdhcyBzdWNjZXNzZnVsLlxuICovXG5zeXN0ZW1DYWxsTWV0aG9kcy5yZXNldFRlbG5ldEF1dGhUb2tlbiA9IF8ubWVtb2l6ZShhc3luYyBmdW5jdGlvbiByZXNldFRlbG5ldEF1dGhUb2tlbiAoKSB7XG4gIC8vIFRoZSBtZXRob2RzIGlzIHVzZWQgdG8gcmVtb3ZlIHRlbG5ldCBhdXRoIHRva2VuXG4gIC8vXG4gIGNvbnN0IGhvbWVGb2xkZXJQYXRoID0gcHJvY2Vzcy5lbnZbKHByb2Nlc3MucGxhdGZvcm0gPT09ICd3aW4zMicpID8gJ1VTRVJQUk9GSUxFJyA6ICdIT01FJ107XG4gIGlmICghaG9tZUZvbGRlclBhdGgpIHtcbiAgICBsb2cud2FybihgQ2Fubm90IGZpbmQgdGhlIHBhdGggdG8gdXNlciBob21lIGZvbGRlci4gSWdub3JpbmcgcmVzZXR0aW5nIG9mIGVtdWxhdG9yJ3MgdGVsbmV0IGF1dGhlbnRpY2F0aW9uIHRva2VuYCk7XG4gICAgcmV0dXJuIGZhbHNlO1xuICB9XG4gIGNvbnN0IGRzdFBhdGggPSBwYXRoLnJlc29sdmUoaG9tZUZvbGRlclBhdGgsICcuZW11bGF0b3JfY29uc29sZV9hdXRoX3Rva2VuJyk7XG4gIGxvZy5kZWJ1ZyhgT3ZlcnJpZGluZyAke2RzdFBhdGh9IHdpdGggYW4gZW1wdHkgc3RyaW5nIHRvIGF2b2lkIHRlbG5ldCBhdXRoZW50aWNhdGlvbiBmb3IgZW11bGF0b3IgY29tbWFuZHNgKTtcbiAgdHJ5IHtcbiAgICBhd2FpdCBmcy53cml0ZUZpbGUoZHN0UGF0aCwgJycpO1xuICB9IGNhdGNoIChlKSB7XG4gICAgbG9nLndhcm4oYEVycm9yICR7ZS5tZXNzYWdlfSB3aGlsZSByZXNldHRpbmcgdGhlIGNvbnRlbnQgb2YgJHtkc3RQYXRofS4gSWdub3JpbmcgcmVzZXR0aW5nIG9mIGVtdWxhdG9yJ3MgdGVsbmV0IGF1dGhlbnRpY2F0aW9uIHRva2VuYCk7XG4gICAgcmV0dXJuIGZhbHNlO1xuICB9XG4gIHJldHVybiB0cnVlO1xufSk7XG5cbi8qKlxuICogRXhlY3V0ZSB0aGUgZ2l2ZW4gZW11bGF0b3IgY29tbWFuZCB1c2luZyBfYWRiIGVtdV8gdG9vbC5cbiAqXG4gKiBAcGFyYW0ge0FycmF5LjxzdHJpbmc+fSBjbWQgLSBUaGUgYXJyYXkgb2YgcmVzdCBjb21tYW5kIGxpbmUgcGFyYW1ldGVycy5cbiAqL1xuc3lzdGVtQ2FsbE1ldGhvZHMuYWRiRXhlY0VtdSA9IGFzeW5jIGZ1bmN0aW9uIGFkYkV4ZWNFbXUgKGNtZCkge1xuICBhd2FpdCB0aGlzLnZlcmlmeUVtdWxhdG9yQ29ubmVjdGVkKCk7XG4gIGF3YWl0IHRoaXMucmVzZXRUZWxuZXRBdXRoVG9rZW4oKTtcbiAgYXdhaXQgdGhpcy5hZGJFeGVjKFsnZW11JywgLi4uY21kXSk7XG59O1xuXG5sZXQgaXNFeGVjTG9ja2VkID0gZmFsc2U7XG5cbi8qKlxuICogRXhlY3V0ZSB0aGUgZ2l2ZW4gYWRiIGNvbW1hbmQuXG4gKlxuICogQHBhcmFtIHtBcnJheS48c3RyaW5nPn0gY21kIC0gVGhlIGFycmF5IG9mIHJlc3QgY29tbWFuZCBsaW5lIHBhcmFtZXRlcnNcbiAqICAgICAgICAgICAgICAgICAgICAgIG9yIGEgc2luZ2xlIHN0cmluZyBwYXJhbWV0ZXIuXG4gKiBAcGFyYW0ge09iamVjdH0gb3B0cyAtIEFkZGl0aW9uYWwgb3B0aW9ucyBtYXBwaW5nLiBTZWVcbiAqICAgICAgICAgICAgICAgICAgICAgICAge0BsaW5rIGh0dHBzOi8vZ2l0aHViLmNvbS9hcHBpdW0vbm9kZS10ZWVuX3Byb2Nlc3N9XG4gKiAgICAgICAgICAgICAgICAgICAgICAgIGZvciBtb3JlIGRldGFpbHMuXG4gKiAgICAgICAgICAgICAgICAgICAgICAgIFlvdSBjYW4gYWxzbyBzZXQgdGhlIGFkZGl0aW9uYWwgYGV4Y2x1c2l2ZWAgcGFyYW1cbiAqICAgICAgICAgICAgICAgICAgICAgICAgdG8gYHRydWVgIHRoYXQgYXNzdXJlcyBubyBvdGhlciBwYXJhbGxlbCBhZGIgY29tbWFuZHNcbiAqICAgICAgICAgICAgICAgICAgICAgICAgYXJlIGdvaW5nIHRvIGJlIGV4ZWN1dGVkIHdoaWxlIHRoZSBjdXJyZW50IG9uZSBpcyBydW5uaW5nXG4gKiBAcmV0dXJuIHtzdHJpbmd9IC0gQ29tbWFuZCdzIHN0ZG91dC5cbiAqIEB0aHJvd3Mge0Vycm9yfSBJZiB0aGUgY29tbWFuZCByZXR1cm5lZCBub24temVybyBleGl0IGNvZGUuXG4gKi9cbnN5c3RlbUNhbGxNZXRob2RzLmFkYkV4ZWMgPSBhc3luYyBmdW5jdGlvbiBhZGJFeGVjIChjbWQsIG9wdHMgPSB7fSkge1xuICBpZiAoIWNtZCkge1xuICAgIHRocm93IG5ldyBFcnJvcignWW91IG5lZWQgdG8gcGFzcyBpbiBhIGNvbW1hbmQgdG8gYWRiRXhlYygpJyk7XG4gIH1cblxuICBvcHRzID0gXy5jbG9uZURlZXAob3B0cyk7XG4gIC8vIHNldHRpbmcgZGVmYXVsdCB0aW1lb3V0IGZvciBlYWNoIGNvbW1hbmQgdG8gcHJldmVudCBpbmZpbml0ZSB3YWl0LlxuICBvcHRzLnRpbWVvdXQgPSBvcHRzLnRpbWVvdXQgfHwgdGhpcy5hZGJFeGVjVGltZW91dCB8fCBERUZBVUxUX0FEQl9FWEVDX1RJTUVPVVQ7XG4gIG9wdHMudGltZW91dENhcE5hbWUgPSBvcHRzLnRpbWVvdXRDYXBOYW1lIHx8ICdhZGJFeGVjVGltZW91dCc7IC8vIEZvciBlcnJvciBtZXNzYWdlXG5cbiAgY21kID0gXy5pc0FycmF5KGNtZCkgPyBjbWQgOiBbY21kXTtcbiAgbGV0IGFkYlJldHJpZWQgPSBmYWxzZTtcbiAgY29uc3QgZXhlY0Z1bmMgPSBhc3luYyAoKSA9PiB7XG4gICAgdHJ5IHtcbiAgICAgIGNvbnN0IGFyZ3MgPSBbLi4udGhpcy5leGVjdXRhYmxlLmRlZmF1bHRBcmdzLCAuLi5jbWRdO1xuICAgICAgbG9nLmRlYnVnKGBSdW5uaW5nICcke3RoaXMuZXhlY3V0YWJsZS5wYXRofSAke3V0aWwucXVvdGUoYXJncyl9J2ApO1xuICAgICAgbGV0IHtzdGRvdXR9ID0gYXdhaXQgZXhlYyh0aGlzLmV4ZWN1dGFibGUucGF0aCwgYXJncywgb3B0cyk7XG4gICAgICAvLyBzb21ldGltZXMgQURCIHByaW50cyBvdXQgd2VpcmQgc3Rkb3V0IHdhcm5pbmdzIHRoYXQgd2UgZG9uJ3Qgd2FudFxuICAgICAgLy8gdG8gaW5jbHVkZSBpbiBhbnkgb2YgdGhlIHJlc3BvbnNlIGRhdGEsIHNvIGxldCdzIHN0cmlwIGl0IG91dFxuICAgICAgc3Rkb3V0ID0gc3Rkb3V0LnJlcGxhY2UoTElOS0VSX1dBUk5JTkdfUkVHRVhQLCAnJykudHJpbSgpO1xuICAgICAgcmV0dXJuIHN0ZG91dDtcbiAgICB9IGNhdGNoIChlKSB7XG4gICAgICBjb25zdCBlcnJUZXh0ID0gYCR7ZS5tZXNzYWdlfSwgJHtlLnN0ZG91dH0sICR7ZS5zdGRlcnJ9YDtcbiAgICAgIGlmIChBREJfUkVUUllfRVJST1JfUEFUVEVSTlMuc29tZSgocCkgPT4gcC50ZXN0KGVyclRleHQpKSkge1xuICAgICAgICBsb2cuaW5mbyhgRXJyb3Igc2VuZGluZyBjb21tYW5kLCByZWNvbm5lY3RpbmcgZGV2aWNlIGFuZCByZXRyeWluZzogJHtjbWR9YCk7XG4gICAgICAgIGF3YWl0IHNsZWVwKDEwMDApO1xuICAgICAgICBhd2FpdCB0aGlzLmdldERldmljZXNXaXRoUmV0cnkoKTtcblxuICAgICAgICAvLyB0cnkgYWdhaW4gb25lIHRpbWVcbiAgICAgICAgaWYgKGFkYlJldHJpZWQpIHtcbiAgICAgICAgICBhZGJSZXRyaWVkID0gdHJ1ZTtcbiAgICAgICAgICByZXR1cm4gYXdhaXQgZXhlY0Z1bmMoKTtcbiAgICAgICAgfVxuICAgICAgfVxuXG4gICAgICBpZiAoZS5jb2RlID09PSAwICYmIGUuc3Rkb3V0KSB7XG4gICAgICAgIHJldHVybiBlLnN0ZG91dC5yZXBsYWNlKExJTktFUl9XQVJOSU5HX1JFR0VYUCwgJycpLnRyaW0oKTtcbiAgICAgIH1cblxuICAgICAgaWYgKF8uaXNOdWxsKGUuY29kZSkpIHtcbiAgICAgICAgZS5tZXNzYWdlID0gYEVycm9yIGV4ZWN1dGluZyBhZGJFeGVjLiBPcmlnaW5hbCBlcnJvcjogJyR7ZS5tZXNzYWdlfScuIGAgK1xuICAgICAgICAgIGBUcnkgdG8gaW5jcmVhc2UgdGhlICR7b3B0cy50aW1lb3V0fW1zIGFkYiBleGVjdXRpb24gdGltZW91dCByZXByZXNlbnRlZCBieSAnJHtvcHRzLnRpbWVvdXRDYXBOYW1lfScgY2FwYWJpbGl0eWA7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICBlLm1lc3NhZ2UgPSBgRXJyb3IgZXhlY3V0aW5nIGFkYkV4ZWMuIE9yaWdpbmFsIGVycm9yOiAnJHtlLm1lc3NhZ2V9JzsgYCArXG4gICAgICAgICAgYFN0ZGVycjogJyR7KGUuc3RkZXJyIHx8ICcnKS50cmltKCl9JzsgQ29kZTogJyR7ZS5jb2RlfSdgO1xuICAgICAgfVxuICAgICAgdGhyb3cgZTtcbiAgICB9XG4gIH07XG5cbiAgaWYgKGlzRXhlY0xvY2tlZCkge1xuICAgIGxvZy5kZWJ1ZygnV2FpdGluZyB1bnRpbCB0aGUgb3RoZXIgZXhjbHVzaXZlIEFEQiBjb21tYW5kIGlzIGNvbXBsZXRlZCcpO1xuICAgIGF3YWl0IHdhaXRGb3JDb25kaXRpb24oKCkgPT4gIWlzRXhlY0xvY2tlZCwge1xuICAgICAgd2FpdE1zOiBOdW1iZXIuTUFYX1NBRkVfSU5URUdFUixcbiAgICAgIGludGVydmFsTXM6IDEwLFxuICAgIH0pO1xuICAgIGxvZy5kZWJ1ZygnQ29udGludWluZyB3aXRoIHRoZSBjdXJyZW50IEFEQiBjb21tYW5kJyk7XG4gIH1cbiAgaWYgKG9wdHMuZXhjbHVzaXZlKSB7XG4gICAgaXNFeGVjTG9ja2VkID0gdHJ1ZTtcbiAgfVxuICB0cnkge1xuICAgIHJldHVybiBhd2FpdCBleGVjRnVuYygpO1xuICB9IGZpbmFsbHkge1xuICAgIGlmIChvcHRzLmV4Y2x1c2l2ZSkge1xuICAgICAgaXNFeGVjTG9ja2VkID0gZmFsc2U7XG4gICAgfVxuICB9XG59O1xuXG4vKipcbiAqIEB0eXBlZGVmIHtPYmplY3R9IFNoZWxsRXhlY09wdGlvbnNcbiAqIEBwcm9wZXJ0eSB7P3N0cmluZ30gdGltZW91dENhcE5hbWUgW2FkYkV4ZWNUaW1lb3V0XSAtIHRoZSBuYW1lIG9mIHRoZSBjb3JyZXNwb25kaW5nIEFwcGl1bSdzIHRpbWVvdXQgY2FwYWJpbGl0eVxuICogKHVzZWQgaW4gdGhlIGVycm9yIG1lc3NhZ2VzKS5cbiAqIEBwcm9wZXJ0eSB7P251bWJlcn0gdGltZW91dCBbYWRiRXhlY1RpbWVvdXRdIC0gY29tbWFuZCBleGVjdXRpb24gdGltZW91dC5cbiAqIEBwcm9wZXJ0eSB7P2Jvb2xlYW59IHByaXZpbGVnZWQgW2ZhbHN5XSAtIFdoZXRoZXIgdG8gcnVuIHRoZSBnaXZlbiBjb21tYW5kIGFzIHJvb3QuXG4gKlxuICogQWxsIG90aGVyIHByb3BlcnRpZXMgYXJlIHRoZSBzYW1lIGFzIGZvciBgZXhlY2AgY2FsbCBmcm9tIHtAbGluayBodHRwczovL2dpdGh1Yi5jb20vYXBwaXVtL25vZGUtdGVlbl9wcm9jZXNzfVxuICogbW9kdWxlXG4gKi9cblxuLyoqXG4gKiBFeGVjdXRlIHRoZSBnaXZlbiBjb21tYW5kIHVzaW5nIF9hZGIgc2hlbGxfIHByZWZpeC5cbiAqXG4gKiBAcGFyYW0geyFBcnJheS48c3RyaW5nPnxzdHJpbmd9IGNtZCAtIFRoZSBhcnJheSBvZiByZXN0IGNvbW1hbmQgbGluZSBwYXJhbWV0ZXJzIG9yIGEgc2luZ2xlXG4gKiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgc3RyaW5nIHBhcmFtZXRlci5cbiAqIEBwYXJhbSB7P1NoZWxsRXhlY09wdGlvbnN9IG9wdHMgW3t9XSAtIEFkZGl0aW9uYWwgb3B0aW9ucyBtYXBwaW5nLlxuICogQHJldHVybiB7c3RyaW5nfSAtIENvbW1hbmQncyBzdGRvdXQuXG4gKiBAdGhyb3dzIHtFcnJvcn0gSWYgdGhlIGNvbW1hbmQgcmV0dXJuZWQgbm9uLXplcm8gZXhpdCBjb2RlLlxuICovXG5zeXN0ZW1DYWxsTWV0aG9kcy5zaGVsbCA9IGFzeW5jIGZ1bmN0aW9uIHNoZWxsIChjbWQsIG9wdHMgPSB7fSkge1xuICBjb25zdCB7XG4gICAgcHJpdmlsZWdlZCxcbiAgfSA9IG9wdHM7XG5cbiAgY29uc3QgY21kQXJyID0gXy5pc0FycmF5KGNtZCkgPyBjbWQgOiBbY21kXTtcbiAgY29uc3QgZnVsbENtZCA9IFsnc2hlbGwnXTtcbiAgaWYgKHByaXZpbGVnZWQpIHtcbiAgICBsb2cuaW5mbyhgJ2FkYiBzaGVsbCAke3V0aWwucXVvdGUoY21kQXJyKX0nIHJlcXVpcmVzIHJvb3QgYWNjZXNzYCk7XG4gICAgaWYgKGF3YWl0IHRoaXMuaXNSb290KCkpIHtcbiAgICAgIGxvZy5pbmZvKCdUaGUgZGV2aWNlIGFscmVhZHkgaGFkIHJvb3QgYWNjZXNzJyk7XG4gICAgICBmdWxsQ21kLnB1c2goLi4uY21kQXJyKTtcbiAgICB9IGVsc2Uge1xuICAgICAgZnVsbENtZC5wdXNoKCdzdScsICdyb290JywgdXRpbC5xdW90ZShjbWRBcnIpKTtcbiAgICB9XG4gIH0gZWxzZSB7XG4gICAgZnVsbENtZC5wdXNoKC4uLmNtZEFycik7XG4gIH1cbiAgcmV0dXJuIGF3YWl0IHRoaXMuYWRiRXhlYyhmdWxsQ21kLCBvcHRzKTtcbn07XG5cbnN5c3RlbUNhbGxNZXRob2RzLmNyZWF0ZVN1YlByb2Nlc3MgPSBmdW5jdGlvbiBjcmVhdGVTdWJQcm9jZXNzIChhcmdzID0gW10pIHtcbiAgLy8gYWRkIHRoZSBkZWZhdWx0IGFyZ3VtZW50c1xuICBhcmdzID0gWy4uLnRoaXMuZXhlY3V0YWJsZS5kZWZhdWx0QXJncywgLi4uYXJnc107XG4gIGxvZy5kZWJ1ZyhgQ3JlYXRpbmcgQURCIHN1YnByb2Nlc3Mgd2l0aCBhcmdzOiAke0pTT04uc3RyaW5naWZ5KGFyZ3MpfWApO1xuICByZXR1cm4gbmV3IFN1YlByb2Nlc3ModGhpcy5nZXRBZGJQYXRoKCksIGFyZ3MpO1xufTtcblxuLyoqXG4gKiBSZXRyaWV2ZSB0aGUgY3VycmVudCBhZGIgcG9ydC5cbiAqIEB0b2RvIGNhbiBwcm9iYWJseSBkZXByZWNhdGUgdGhpcyBub3cgdGhhdCB0aGUgbG9naWMgaXMganVzdCB0byByZWFkIHRoaXMuYWRiUG9ydFxuICogQHJldHVybiB7bnVtYmVyfSBUaGUgY3VycmVudCBhZGIgcG9ydCBudW1iZXIuXG4gKi9cbnN5c3RlbUNhbGxNZXRob2RzLmdldEFkYlNlcnZlclBvcnQgPSBmdW5jdGlvbiBnZXRBZGJTZXJ2ZXJQb3J0ICgpIHtcbiAgcmV0dXJuIHRoaXMuYWRiUG9ydDtcbn07XG5cbi8qKlxuICogUmV0cmlldmUgdGhlIGN1cnJlbnQgZW11bGF0b3IgcG9ydCBmcm9tIF9hZGIgZGV2aXZlc18gb3V0cHV0LlxuICpcbiAqIEByZXR1cm4ge251bWJlcn0gVGhlIGN1cnJlbnQgZW11bGF0b3IgcG9ydC5cbiAqIEB0aHJvd3Mge0Vycm9yfSBJZiB0aGVyZSBhcmUgbm8gY29ubmVjdGVkIGRldmljZXMuXG4gKi9cbnN5c3RlbUNhbGxNZXRob2RzLmdldEVtdWxhdG9yUG9ydCA9IGFzeW5jIGZ1bmN0aW9uIGdldEVtdWxhdG9yUG9ydCAoKSB7XG4gIGxvZy5kZWJ1ZygnR2V0dGluZyBydW5uaW5nIGVtdWxhdG9yIHBvcnQnKTtcbiAgaWYgKHRoaXMuZW11bGF0b3JQb3J0ICE9PSBudWxsKSB7XG4gICAgcmV0dXJuIHRoaXMuZW11bGF0b3JQb3J0O1xuICB9XG4gIHRyeSB7XG4gICAgbGV0IGRldmljZXMgPSBhd2FpdCB0aGlzLmdldENvbm5lY3RlZERldmljZXMoKTtcbiAgICBsZXQgcG9ydCA9IHRoaXMuZ2V0UG9ydEZyb21FbXVsYXRvclN0cmluZyhkZXZpY2VzWzBdLnVkaWQpO1xuICAgIGlmIChwb3J0KSB7XG4gICAgICByZXR1cm4gcG9ydDtcbiAgICB9IGVsc2Uge1xuICAgICAgdGhyb3cgbmV3IEVycm9yKGBFbXVsYXRvciBwb3J0IG5vdCBmb3VuZGApO1xuICAgIH1cbiAgfSBjYXRjaCAoZSkge1xuICAgIHRocm93IG5ldyBFcnJvcihgTm8gZGV2aWNlcyBjb25uZWN0ZWQuIE9yaWdpbmFsIGVycm9yOiAke2UubWVzc2FnZX1gKTtcbiAgfVxufTtcblxuLyoqXG4gKiBSZXRyaWV2ZSB0aGUgY3VycmVudCBlbXVsYXRvciBwb3J0IGJ5IHBhcnNpbmcgZW11bGF0b3IgbmFtZSBzdHJpbmcuXG4gKlxuICogQHBhcmFtIHtzdHJpbmd9IGVtU3RyIC0gRW11bGF0b3IgbmFtZSBzdHJpbmcuXG4gKiBAcmV0dXJuIHtudW1iZXJ8Ym9vbGVhbn0gRWl0aGVyIHRoZSBjdXJyZW50IGVtdWxhdG9yIHBvcnQgb3JcbiAqICAgICAgICAgICAgICAgICAgICAgICAgICBfZmFsc2VfIGlmIHBvcnQgbnVtYmVyIGNhbm5vdCBiZSBwYXJzZWQuXG4gKi9cbnN5c3RlbUNhbGxNZXRob2RzLmdldFBvcnRGcm9tRW11bGF0b3JTdHJpbmcgPSBmdW5jdGlvbiBnZXRQb3J0RnJvbUVtdWxhdG9yU3RyaW5nIChlbVN0cikge1xuICBsZXQgcG9ydFBhdHRlcm4gPSAvZW11bGF0b3ItKFxcZCspLztcbiAgaWYgKHBvcnRQYXR0ZXJuLnRlc3QoZW1TdHIpKSB7XG4gICAgcmV0dXJuIHBhcnNlSW50KHBvcnRQYXR0ZXJuLmV4ZWMoZW1TdHIpWzFdLCAxMCk7XG4gIH1cbiAgcmV0dXJuIGZhbHNlO1xufTtcblxuLyoqXG4gKiBSZXRyaWV2ZSB0aGUgbGlzdCBvZiBjdXJyZW50bHkgY29ubmVjdGVkIGVtdWxhdG9ycy5cbiAqXG4gKiBAcmV0dXJuIHtBcnJheS48RGV2aWNlPn0gVGhlIGxpc3Qgb2YgY29ubmVjdGVkIGRldmljZXMuXG4gKi9cbnN5c3RlbUNhbGxNZXRob2RzLmdldENvbm5lY3RlZEVtdWxhdG9ycyA9IGFzeW5jIGZ1bmN0aW9uIGdldENvbm5lY3RlZEVtdWxhdG9ycyAoKSB7XG4gIGxvZy5kZWJ1ZygnR2V0dGluZyBjb25uZWN0ZWQgZW11bGF0b3JzJyk7XG4gIHRyeSB7XG4gICAgbGV0IGRldmljZXMgPSBhd2FpdCB0aGlzLmdldENvbm5lY3RlZERldmljZXMoKTtcbiAgICBsZXQgZW11bGF0b3JzID0gW107XG4gICAgZm9yIChsZXQgZGV2aWNlIG9mIGRldmljZXMpIHtcbiAgICAgIGxldCBwb3J0ID0gdGhpcy5nZXRQb3J0RnJvbUVtdWxhdG9yU3RyaW5nKGRldmljZS51ZGlkKTtcbiAgICAgIGlmIChwb3J0KSB7XG4gICAgICAgIGRldmljZS5wb3J0ID0gcG9ydDtcbiAgICAgICAgZW11bGF0b3JzLnB1c2goZGV2aWNlKTtcbiAgICAgIH1cbiAgICB9XG4gICAgbG9nLmRlYnVnKGAke3V0aWwucGx1cmFsaXplKCdlbXVsYXRvcicsIGVtdWxhdG9ycy5sZW5ndGgsIHRydWUpfSBjb25uZWN0ZWRgKTtcbiAgICByZXR1cm4gZW11bGF0b3JzO1xuICB9IGNhdGNoIChlKSB7XG4gICAgdGhyb3cgbmV3IEVycm9yKGBFcnJvciBnZXR0aW5nIGVtdWxhdG9ycy4gT3JpZ2luYWwgZXJyb3I6ICR7ZS5tZXNzYWdlfWApO1xuICB9XG59O1xuXG4vKipcbiAqIFNldCBfZW11bGF0b3JQb3J0XyBwcm9wZXJ0eSBvZiB0aGUgY3VycmVudCBjbGFzcy5cbiAqXG4gKiBAcGFyYW0ge251bWJlcn0gZW1Qb3J0IC0gVGhlIGVtdWxhdG9yIHBvcnQgdG8gYmUgc2V0LlxuICovXG5zeXN0ZW1DYWxsTWV0aG9kcy5zZXRFbXVsYXRvclBvcnQgPSBmdW5jdGlvbiBzZXRFbXVsYXRvclBvcnQgKGVtUG9ydCkge1xuICB0aGlzLmVtdWxhdG9yUG9ydCA9IGVtUG9ydDtcbn07XG5cbi8qKlxuICogU2V0IHRoZSBpZGVudGlmaWVyIG9mIHRoZSBjdXJyZW50IGRldmljZSAoX3RoaXMuY3VyRGV2aWNlSWRfKS5cbiAqXG4gKiBAcGFyYW0ge3N0cmluZ30gLSBUaGUgZGV2aWNlIGlkZW50aWZpZXIuXG4gKi9cbnN5c3RlbUNhbGxNZXRob2RzLnNldERldmljZUlkID0gZnVuY3Rpb24gc2V0RGV2aWNlSWQgKGRldmljZUlkKSB7XG4gIGxvZy5kZWJ1ZyhgU2V0dGluZyBkZXZpY2UgaWQgdG8gJHtkZXZpY2VJZH1gKTtcbiAgdGhpcy5jdXJEZXZpY2VJZCA9IGRldmljZUlkO1xuICBsZXQgYXJnc0hhc0RldmljZSA9IHRoaXMuZXhlY3V0YWJsZS5kZWZhdWx0QXJncy5pbmRleE9mKCctcycpO1xuICBpZiAoYXJnc0hhc0RldmljZSAhPT0gLTEpIHtcbiAgICAvLyByZW1vdmUgdGhlIG9sZCBkZXZpY2UgaWQgZnJvbSB0aGUgYXJndW1lbnRzXG4gICAgdGhpcy5leGVjdXRhYmxlLmRlZmF1bHRBcmdzLnNwbGljZShhcmdzSGFzRGV2aWNlLCAyKTtcbiAgfVxuICB0aGlzLmV4ZWN1dGFibGUuZGVmYXVsdEFyZ3MucHVzaCgnLXMnLCBkZXZpY2VJZCk7XG59O1xuXG4vKipcbiAqIFNldCB0aGUgdGhlIGN1cnJlbnQgZGV2aWNlIG9iamVjdC5cbiAqXG4gKiBAcGFyYW0ge0RldmljZX0gZGV2aWNlT2JqIC0gVGhlIGRldmljZSBvYmplY3QgdG8gYmUgc2V0LlxuICovXG5zeXN0ZW1DYWxsTWV0aG9kcy5zZXREZXZpY2UgPSBmdW5jdGlvbiBzZXREZXZpY2UgKGRldmljZU9iaikge1xuICBsZXQgZGV2aWNlSWQgPSBkZXZpY2VPYmoudWRpZDtcbiAgbGV0IGVtUG9ydCA9IHRoaXMuZ2V0UG9ydEZyb21FbXVsYXRvclN0cmluZyhkZXZpY2VJZCk7XG4gIHRoaXMuc2V0RW11bGF0b3JQb3J0KGVtUG9ydCk7XG4gIHRoaXMuc2V0RGV2aWNlSWQoZGV2aWNlSWQpO1xufTtcblxuLyoqXG4gKiBHZXQgdGhlIG9iamVjdCBmb3IgdGhlIGN1cnJlbnRseSBydW5uaW5nIGVtdWxhdG9yLlxuICogISEhIFRoaXMgbWV0aG9kIGhhcyBhIHNpZGUgZWZmZWN0IC0gaXQgaW1wbGljaXRseSBjaGFuZ2VzIHRoZVxuICogYGRldmljZUlkYCAob25seSBpZiBBVkQgd2l0aCBhIG1hdGNoaW5nIG5hbWUgaXMgZm91bmQpXG4gKiBhbmQgYGVtdWxhdG9yUG9ydGAgaW5zdGFuY2UgcHJvcGVydGllcy5cbiAqXG4gKiBAcGFyYW0ge3N0cmluZ30gYXZkTmFtZSAtIEVtdWxhdG9yIG5hbWUuXG4gKiBAcmV0dXJuIHs/RGV2aWNlfSBDdXJyZW50bHkgcnVubmluZyBlbXVsYXRvciBvciBfbnVsbF8uXG4gKi9cbnN5c3RlbUNhbGxNZXRob2RzLmdldFJ1bm5pbmdBVkQgPSBhc3luYyBmdW5jdGlvbiBnZXRSdW5uaW5nQVZEIChhdmROYW1lKSB7XG4gIGxvZy5kZWJ1ZyhgVHJ5aW5nIHRvIGZpbmQgJyR7YXZkTmFtZX0nIGVtdWxhdG9yYCk7XG4gIHRyeSB7XG4gICAgY29uc3QgZW11bGF0b3JzID0gYXdhaXQgdGhpcy5nZXRDb25uZWN0ZWRFbXVsYXRvcnMoKTtcbiAgICBmb3IgKGNvbnN0IGVtdWxhdG9yIG9mIGVtdWxhdG9ycykge1xuICAgICAgdGhpcy5zZXRFbXVsYXRvclBvcnQoZW11bGF0b3IucG9ydCk7XG4gICAgICBjb25zdCBydW5uaW5nQVZETmFtZSA9IGF3YWl0IHRoaXMuZXhlY0VtdUNvbnNvbGVDb21tYW5kKFsnYXZkJywgJ25hbWUnXSwge1xuICAgICAgICBwb3J0OiBlbXVsYXRvci5wb3J0LFxuICAgICAgICBleGVjVGltZW91dDogNTAwMCxcbiAgICAgICAgY29ublRpbWVvdXQ6IDEwMDAsXG4gICAgICB9KTtcbiAgICAgIGlmIChfLnRvTG93ZXIoYXZkTmFtZSkgPT09IF8udG9Mb3dlcihydW5uaW5nQVZETmFtZS50cmltKCkpKSB7XG4gICAgICAgIGxvZy5kZWJ1ZyhgRm91bmQgZW11bGF0b3IgJyR7YXZkTmFtZX0nIG9uIHBvcnQgJHtlbXVsYXRvci5wb3J0fWApO1xuICAgICAgICB0aGlzLnNldERldmljZUlkKGVtdWxhdG9yLnVkaWQpO1xuICAgICAgICByZXR1cm4gZW11bGF0b3I7XG4gICAgICB9XG4gICAgfVxuICAgIGxvZy5kZWJ1ZyhgRW11bGF0b3IgJyR7YXZkTmFtZX0nIG5vdCBydW5uaW5nYCk7XG4gICAgcmV0dXJuIG51bGw7XG4gIH0gY2F0Y2ggKGUpIHtcbiAgICB0aHJvdyBuZXcgRXJyb3IoYEVycm9yIGdldHRpbmcgQVZELiBPcmlnaW5hbCBlcnJvcjogJHtlLm1lc3NhZ2V9YCk7XG4gIH1cbn07XG5cbi8qKlxuICogR2V0IHRoZSBvYmplY3QgZm9yIHRoZSBjdXJyZW50bHkgcnVubmluZyBlbXVsYXRvci5cbiAqXG4gKiBAcGFyYW0ge3N0cmluZ30gYXZkTmFtZSAtIEVtdWxhdG9yIG5hbWUuXG4gKiBAcGFyYW0ge251bWJlcn0gdGltZW91dE1zIFsyMDAwMF0gLSBUaGUgbWF4aW11bSBudW1iZXIgb2YgbWlsbGlzZWNvbmRzXG4gKiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB0byB3YWl0IHVudGlsIGF0IGxlYXN0IG9uZSBydW5uaW5nIEFWRCBvYmplY3RcbiAqICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlzIGRldGVjdGVkLlxuICogQHJldHVybiB7P0RldmljZX0gQ3VycmVudGx5IHJ1bm5pbmcgZW11bGF0b3Igb3IgX251bGxfLlxuICogQHRocm93cyB7RXJyb3J9IElmIG5vIGRldmljZSBoYXMgYmVlbiBkZXRlY3RlZCB3aXRoaW4gdGhlIHRpbWVvdXQuXG4gKi9cbnN5c3RlbUNhbGxNZXRob2RzLmdldFJ1bm5pbmdBVkRXaXRoUmV0cnkgPSBhc3luYyBmdW5jdGlvbiBnZXRSdW5uaW5nQVZEV2l0aFJldHJ5IChhdmROYW1lLCB0aW1lb3V0TXMgPSAyMDAwMCkge1xuICB0cnkge1xuICAgIHJldHVybiBhd2FpdCB3YWl0Rm9yQ29uZGl0aW9uKGFzeW5jICgpID0+IHtcbiAgICAgIHRyeSB7XG4gICAgICAgIHJldHVybiBhd2FpdCB0aGlzLmdldFJ1bm5pbmdBVkQoYXZkTmFtZS5yZXBsYWNlKCdAJywgJycpKTtcbiAgICAgIH0gY2F0Y2ggKGUpIHtcbiAgICAgICAgbG9nLmRlYnVnKGUubWVzc2FnZSk7XG4gICAgICAgIHJldHVybiBmYWxzZTtcbiAgICAgIH1cbiAgICB9LCB7XG4gICAgICB3YWl0TXM6IHRpbWVvdXRNcyxcbiAgICAgIGludGVydmFsTXM6IDEwMDAsXG4gICAgfSk7XG4gIH0gY2F0Y2ggKGUpIHtcbiAgICB0aHJvdyBuZXcgRXJyb3IoYEVycm9yIGdldHRpbmcgQVZEIHdpdGggcmV0cnkuIE9yaWdpbmFsIGVycm9yOiAke2UubWVzc2FnZX1gKTtcbiAgfVxufTtcblxuLyoqXG4gKiBTaHV0ZG93biBhbGwgcnVubmluZyBlbXVsYXRvcnMgYnkga2lsbGluZyB0aGVpciBwcm9jZXNzZXMuXG4gKlxuICogQHRocm93cyB7RXJyb3J9IElmIGtpbGxpbmcgdG9vbCByZXR1cm5lZCBub24temVybyByZXR1cm4gY29kZS5cbiAqL1xuc3lzdGVtQ2FsbE1ldGhvZHMua2lsbEFsbEVtdWxhdG9ycyA9IGFzeW5jIGZ1bmN0aW9uIGtpbGxBbGxFbXVsYXRvcnMgKCkge1xuICBsZXQgY21kLCBhcmdzO1xuICBpZiAoc3lzdGVtLmlzV2luZG93cygpKSB7XG4gICAgY21kID0gJ1RBU0tLSUxMJztcbiAgICBhcmdzID0gWydUQVNLS0lMTCcsICcvSU0nLCAnZW11bGF0b3IuZXhlJ107XG4gIH0gZWxzZSB7XG4gICAgY21kID0gJy91c3IvYmluL2tpbGxhbGwnO1xuICAgIGFyZ3MgPSBbJy1tJywgJ2VtdWxhdG9yKiddO1xuICB9XG4gIHRyeSB7XG4gICAgYXdhaXQgZXhlYyhjbWQsIGFyZ3MpO1xuICB9IGNhdGNoIChlKSB7XG4gICAgdGhyb3cgbmV3IEVycm9yKGBFcnJvciBraWxsaW5nIGVtdWxhdG9ycy4gT3JpZ2luYWwgZXJyb3I6ICR7ZS5tZXNzYWdlfWApO1xuICB9XG59O1xuXG4vKipcbiAqIEtpbGwgZW11bGF0b3Igd2l0aCB0aGUgZ2l2ZW4gbmFtZS4gTm8gZXJyb3JcbiAqIGlzIHRocm93biBpcyBnaXZlbiBhdmQgZG9lcyBub3QgZXhpc3QvaXMgbm90IHJ1bm5pbmcuXG4gKlxuICogQHBhcmFtIHs/c3RyaW5nfSBhdmROYW1lIC0gVGhlIG5hbWUgb2YgdGhlIGVtdWxhdG9yIHRvIGJlIGtpbGxlZC4gSWYgZW1wdHksXG4gKiAgICAgICAgICAgICAgICAgICAgICAgICAgICB0aGUgY3VycmVudCBlbXVsYXRvciB3aWxsIGJlIGtpbGxlZC5cbiAqIEBwYXJhbSB7P251bWJlcn0gdGltZW91dCBbNjAwMDBdIC0gVGhlIGFtb3VudCBvZiB0aW1lIHRvIHdhaXQgYmVmb3JlIHRocm93aW5nXG4gKiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGFuIGV4Y2VwdGlvbiBhYm91dCB1bnN1Y2Nlc3NmdWwga2lsbGluZ1xuICogQHJldHVybiB7Ym9vbGVhbn0gLSBUcnVlIGlmIHRoZSBlbXVsYXRvciB3YXMga2lsbGVkLCBmYWxzZSBvdGhlcndpc2UuXG4gKiBAdGhyb3dzIHtFcnJvcn0gaWYgdGhlcmUgd2FzIGEgZmFpbHVyZSBieSBraWxsaW5nIHRoZSBlbXVsYXRvclxuICovXG5zeXN0ZW1DYWxsTWV0aG9kcy5raWxsRW11bGF0b3IgPSBhc3luYyBmdW5jdGlvbiBraWxsRW11bGF0b3IgKGF2ZE5hbWUgPSBudWxsLCB0aW1lb3V0ID0gNjAwMDApIHtcbiAgaWYgKHV0aWwuaGFzVmFsdWUoYXZkTmFtZSkpIHtcbiAgICBsb2cuZGVidWcoYEtpbGxpbmcgYXZkICcke2F2ZE5hbWV9J2ApO1xuICAgIGNvbnN0IGRldmljZSA9IGF3YWl0IHRoaXMuZ2V0UnVubmluZ0FWRChhdmROYW1lKTtcbiAgICBpZiAoIWRldmljZSkge1xuICAgICAgbG9nLmluZm8oYE5vIGF2ZCB3aXRoIG5hbWUgJyR7YXZkTmFtZX0nIHJ1bm5pbmcuIFNraXBwaW5nIGtpbGwgc3RlcC5gKTtcbiAgICAgIHJldHVybiBmYWxzZTtcbiAgICB9XG4gIH0gZWxzZSB7XG4gICAgLy8ga2lsbGluZyB0aGUgY3VycmVudCBhdmRcbiAgICBsb2cuZGVidWcoYEtpbGxpbmcgYXZkIHdpdGggaWQgJyR7dGhpcy5jdXJEZXZpY2VJZH0nYCk7XG4gICAgaWYgKCFhd2FpdCB0aGlzLmlzRW11bGF0b3JDb25uZWN0ZWQoKSkge1xuICAgICAgbG9nLmRlYnVnKGBFbXVsYXRvciB3aXRoIGlkICcke3RoaXMuY3VyRGV2aWNlSWR9JyBub3QgY29ubmVjdGVkLiBTa2lwcGluZyBraWxsIHN0ZXBgKTtcbiAgICAgIHJldHVybiBmYWxzZTtcbiAgICB9XG4gIH1cbiAgYXdhaXQgdGhpcy5hZGJFeGVjKFsnZW11JywgJ2tpbGwnXSk7XG4gIGxvZy5kZWJ1ZyhgV2FpdGluZyB1cCB0byAke3RpbWVvdXR9bXMgdW50aWwgdGhlIGVtdWxhdG9yICcke2F2ZE5hbWUgPyBhdmROYW1lIDogdGhpcy5jdXJEZXZpY2VJZH0nIGlzIGtpbGxlZGApO1xuICB0cnkge1xuICAgIGF3YWl0IHdhaXRGb3JDb25kaXRpb24oYXN5bmMgKCkgPT4ge1xuICAgICAgdHJ5IHtcbiAgICAgICAgcmV0dXJuIHV0aWwuaGFzVmFsdWUoYXZkTmFtZSlcbiAgICAgICAgICA/ICFhd2FpdCB0aGlzLmdldFJ1bm5pbmdBVkQoYXZkTmFtZSlcbiAgICAgICAgICA6ICFhd2FpdCB0aGlzLmlzRW11bGF0b3JDb25uZWN0ZWQoKTtcbiAgICAgIH0gY2F0Y2ggKGlnbikge31cbiAgICAgIHJldHVybiBmYWxzZTtcbiAgICB9LCB7XG4gICAgICB3YWl0TXM6IHRpbWVvdXQsXG4gICAgICBpbnRlcnZhbE1zOiAyMDAwLFxuICAgIH0pO1xuICB9IGNhdGNoIChlKSB7XG4gICAgdGhyb3cgbmV3IEVycm9yKGBUaGUgZW11bGF0b3IgJyR7YXZkTmFtZSA/IGF2ZE5hbWUgOiB0aGlzLmN1ckRldmljZUlkfScgaXMgc3RpbGwgcnVubmluZyBhZnRlciBiZWluZyBraWxsZWQgJHt0aW1lb3V0fW1zIGFnb2ApO1xuICB9XG4gIGxvZy5pbmZvKGBTdWNjZXNzZnVsbHkga2lsbGVkIHRoZSAnJHthdmROYW1lID8gYXZkTmFtZSA6IHRoaXMuY3VyRGV2aWNlSWR9JyBlbXVsYXRvcmApO1xuICByZXR1cm4gdHJ1ZTtcbn07XG5cbi8qKlxuICogQHR5cGVkZWYge09iamVjdH0gQXZkTGF1bmNoT3B0aW9uc1xuICogQHByb3BlcnR5IHtzdHJpbmd8QXJyYXk8c3RyaW5nPn0gYXJncyBBZGRpdGlvbmFsIGVtdWxhdG9yIGNvbW1hbmQgbGluZSBhcmd1bWVudHNcbiAqIEBwcm9wZXJ0eSB7T2JqZWN0fSBlbnYgQWRkaXRpb25hbCBlbXVsYXRvciBlbnZpcm9ubWVudCB2YXJpYWJsZXNcbiAqIEBwcm9wZXJ0eSB7c3RyaW5nfSBsYW5ndWFnZSBFbXVsYXRvciBzeXN0ZW0gbGFuZ3VhZ2VcbiAqIEBwcm9wZXJ0eSB7c3RyaW5nfSBjb3VudHJ5IEVtdWxhdG9yIHN5c3RlbSBjb3VudHJ5XG4gKiBAcHJvcGVydHkge251bWJlcn0gbGF1bmNoVGltZW91dCBbNjAwMDBdIEVtdWxhdG9yIHN0YXJ0dXAgdGltZW91dCBpbiBtaWxsaXNlY29uZHNcbiAqIEBwcm9wZXJ0eSB7bnVtYmVyfSByZWFkeVRpbWVvdXQgWzYwMDAwXSBUaGUgbWF4aW11bSBwZXJpb2Qgb2YgdGltZSB0byB3YWl0IHVudGlsIEVtdWxhdG9yXG4gKiBpcyByZWFkeSBmb3IgdXNhZ2UgaW4gbWlsbGlzZWNvbmRzXG4gKiBAcHJvcGVydHkge251bWJlcn0gcmV0cnlUaW1lcyBbMV0gVGhlIG1heGltdW0gbnVtYmVyIG9mIHN0YXJ0dXAgcmV0cmllc1xuICovXG5cbi8qKlxuICogU3RhcnQgYW4gZW11bGF0b3Igd2l0aCBnaXZlbiBwYXJhbWV0ZXJzIGFuZCB3YWl0IHVudGlsIGl0IGlzIGZ1bGx5IHN0YXJ0ZWQuXG4gKlxuICogQHBhcmFtIHtzdHJpbmd9IGF2ZE5hbWUgLSBUaGUgbmFtZSBvZiBhbiBleGlzdGluZyBlbXVsYXRvci5cbiAqIEBwYXJhbSB7P0F2ZExhdW5jaE9wdGlvbnN9IG9wdHNcbiAqIEByZXR1cm5zIHtTdWJQcm9jZXNzfSBFbXVsYXRvciBzdWJwcm9jZXNzIGluc3RhbmNlXG4gKiBAdGhyb3dzIHtFcnJvcn0gSWYgdGhlIGVtdWxhdG9yIGZhaWxzIHRvIHN0YXJ0IHdpdGhpbiB0aGUgZ2l2ZW4gdGltZW91dC5cbiAqL1xuc3lzdGVtQ2FsbE1ldGhvZHMubGF1bmNoQVZEID0gYXN5bmMgZnVuY3Rpb24gbGF1bmNoQVZEIChhdmROYW1lLCBvcHRzID0ge30pIHtcbiAgY29uc3Qge1xuICAgIGFyZ3MgPSBbXSxcbiAgICBlbnYgPSB7fSxcbiAgICBsYW5ndWFnZSxcbiAgICBjb3VudHJ5LFxuICAgIGxhdW5jaFRpbWVvdXQgPSA2MDAwMCxcbiAgICByZWFkeVRpbWVvdXQgPSA2MDAwMCxcbiAgICByZXRyeVRpbWVzID0gMSxcbiAgfSA9IG9wdHM7XG4gIGxvZy5kZWJ1ZyhgTGF1bmNoaW5nIEVtdWxhdG9yIHdpdGggQVZEICR7YXZkTmFtZX0sIGxhdW5jaFRpbWVvdXQgYCArXG4gICAgICAgICAgICBgJHtsYXVuY2hUaW1lb3V0fW1zIGFuZCByZWFkeVRpbWVvdXQgJHtyZWFkeVRpbWVvdXR9bXNgKTtcbiAgY29uc3QgZW11bGF0b3JCaW5hcnlQYXRoID0gYXdhaXQgdGhpcy5nZXRTZGtCaW5hcnlQYXRoKCdlbXVsYXRvcicpO1xuICBpZiAoYXZkTmFtZVswXSA9PT0gJ0AnKSB7XG4gICAgYXZkTmFtZSA9IGF2ZE5hbWUuc3Vic3RyKDEpO1xuICB9XG4gIGF3YWl0IHRoaXMuY2hlY2tBdmRFeGlzdChhdmROYW1lKTtcblxuICBjb25zdCBsYXVuY2hBcmdzID0gWyctYXZkJywgYXZkTmFtZV07XG4gIGxhdW5jaEFyZ3MucHVzaCguLi4odG9BdmRMb2NhbGVBcmdzKGxhbmd1YWdlLCBjb3VudHJ5KSkpO1xuXG4gIGNvbnN0IHtyZXZpc2lvbn0gPSBhd2FpdCB0aGlzLmdldEVtdVZlcnNpb25JbmZvKCk7XG4gIGxldCBzdXBwb3J0c0RlbGF5QWRiRmVhdHVyZSA9IGZhbHNlO1xuICBpZiAocmV2aXNpb24gJiYgdXRpbC5jb21wYXJlVmVyc2lvbnMocmV2aXNpb24sICc+PScsICcyOS4wLjcnKSkge1xuICAgIC8vIGh0dHBzOi8vYW5kcm9pZHN0dWRpby5nb29nbGVibG9nLmNvbS8yMDE5LzA1L2VtdWxhdG9yLTI5MDctY2FuYXJ5Lmh0bWxcbiAgICB0cnkge1xuICAgICAgY29uc3Qge3RhcmdldH0gPSBhd2FpdCB0aGlzLmdldEVtdUltYWdlUHJvcGVydGllcyhhdmROYW1lKTtcbiAgICAgIGNvbnN0IGFwaU1hdGNoID0gL1xcZCsvLmV4ZWModGFyZ2V0KTtcbiAgICAgIC8vIGh0dHBzOi8vaXNzdWV0cmFja2VyLmdvb2dsZS5jb20vaXNzdWVzLzE0MjUzMzM1NVxuICAgICAgaWYgKGFwaU1hdGNoICYmIHBhcnNlSW50KGFwaU1hdGNoWzBdLCAxMCkgPj0gMjgpIHtcbiAgICAgICAgbGF1bmNoQXJncy5wdXNoKCctZGVsYXktYWRiJyk7XG4gICAgICAgIHN1cHBvcnRzRGVsYXlBZGJGZWF0dXJlID0gdHJ1ZTtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIHRocm93IG5ldyBFcnJvcihgVGhlIGFjdHVhbCBpbWFnZSBBUEkgdmVyc2lvbiBpcyBiZWxvdyAyOGApO1xuICAgICAgfVxuICAgIH0gY2F0Y2ggKGUpIHtcbiAgICAgIGxvZy5pbmZvKGBUaGUgLWRlbGF5LWFkYiBlbXVsYXRvciBzdGFydHVwIGRldGVjdGlvbiBmZWF0dXJlIHdpbGwgbm90IGJlIGVuYWJsZWQuIGAgK1xuICAgICAgICBgT3JpZ2luYWwgZXJyb3I6ICR7ZS5tZXNzYWdlfWApO1xuICAgIH1cbiAgfVxuXG4gIGlmICghXy5pc0VtcHR5KGFyZ3MpKSB7XG4gICAgbGF1bmNoQXJncy5wdXNoKC4uLihfLmlzQXJyYXkoYXJncykgPyBhcmdzIDogdXRpbC5zaGVsbFBhcnNlKGAke2FyZ3N9YCkpKTtcbiAgfVxuXG4gIGxvZy5kZWJ1ZyhgUnVubmluZyAnJHtlbXVsYXRvckJpbmFyeVBhdGh9JyB3aXRoIGFyZ3M6ICR7dXRpbC5xdW90ZShsYXVuY2hBcmdzKX1gKTtcbiAgaWYgKCFfLmlzRW1wdHkoZW52KSkge1xuICAgIGxvZy5kZWJ1ZyhgQ3VzdG9taXplZCBlbXVsYXRvciBlbnZpcm9ubWVudDogJHtKU09OLnN0cmluZ2lmeShlbnYpfWApO1xuICB9XG4gIGNvbnN0IHByb2MgPSBuZXcgU3ViUHJvY2VzcyhlbXVsYXRvckJpbmFyeVBhdGgsIGxhdW5jaEFyZ3MsIHtcbiAgICBlbnY6IE9iamVjdC5hc3NpZ24oe30sIHByb2Nlc3MuZW52LCBlbnYpLFxuICB9KTtcbiAgYXdhaXQgcHJvYy5zdGFydCgwKTtcbiAgcHJvYy5vbignb3V0cHV0JywgKHN0ZG91dCwgc3RkZXJyKSA9PiB7XG4gICAgZm9yIChsZXQgbGluZSBvZiAoc3Rkb3V0IHx8IHN0ZGVyciB8fCAnJykuc3BsaXQoJ1xcbicpLmZpbHRlcihCb29sZWFuKSkge1xuICAgICAgbG9nLmluZm8oYFtBVkQgT1VUUFVUXSAke2xpbmV9YCk7XG4gICAgfVxuICB9KTtcbiAgcHJvYy5vbignZGllJywgKGNvZGUsIHNpZ25hbCkgPT4ge1xuICAgIGxvZy53YXJuKGBFbXVsYXRvciBhdmQgJHthdmROYW1lfSBleGl0ZWQgd2l0aCBjb2RlICR7Y29kZX0ke3NpZ25hbCA/IGAsIHNpZ25hbCAke3NpZ25hbH1gIDogJyd9YCk7XG4gIH0pO1xuICBhd2FpdCByZXRyeShyZXRyeVRpbWVzLCBhc3luYyAoKSA9PiBhd2FpdCB0aGlzLmdldFJ1bm5pbmdBVkRXaXRoUmV0cnkoYXZkTmFtZSwgbGF1bmNoVGltZW91dCkpO1xuICAvLyBBdCB0aGlzIHBvaW50IHdlIGhhdmUgZGV2aWNlSWQgYWxyZWFkeSBhc3NpZ25lZFxuICBpZiAoc3VwcG9ydHNEZWxheUFkYkZlYXR1cmUpIHtcbiAgICB0cnkge1xuICAgICAgYXdhaXQgdGhpcy5hZGJFeGVjKFsnd2FpdC1mb3ItZGV2aWNlJ10sIHt0aW1lb3V0OiByZWFkeVRpbWVvdXR9KTtcbiAgICB9IGNhdGNoIChlKSB7XG4gICAgICB0aHJvdyBuZXcgRXJyb3IoYCcke2F2ZE5hbWV9JyBFbXVsYXRvciBoYXMgZmFpbGVkIHRvIGJvb3Q6ICR7ZS5zdGRlcnIgfHwgZS5tZXNzYWdlfWApO1xuICAgIH1cbiAgfSBlbHNlIHtcbiAgICBhd2FpdCB0aGlzLndhaXRGb3JFbXVsYXRvclJlYWR5KHJlYWR5VGltZW91dCk7XG4gIH1cbiAgcmV0dXJuIHByb2M7XG59O1xuXG4vKipcbiAqIEB0eXBlZGVmIHtPYmplY3R9IEJpbmFyeVZlcnNpb25cbiAqIEBwcm9wZXJ0eSB7U2VtVmVyfSB2ZXJzaW9uIC0gVGhlIEFEQiBiaW5hcnkgdmVyc2lvbiBudW1iZXJcbiAqIEBwcm9wZXJ0eSB7bnVtYmVyfSBidWlsZCAtIFRoZSBBREIgYmluYXJ5IGJ1aWxkIG51bWJlclxuICovXG5cbi8qKlxuICogQHR5cGVkZWYge09iamVjdH0gQnJpZGdlVmVyc2lvblxuICogQHByb3BlcnR5IHtTZW1WZXJ9IHZlcnNpb24gLSBUaGUgQW5kcm9pZCBEZWJ1ZyBCcmlkZ2UgdmVyc2lvbiBudW1iZXJcbiAqL1xuXG4vKipcbiAqIEB0eXBlZGVmIHtPYmplY3R9IFZlcnNpb25cbiAqIEBwcm9wZXJ0eSB7P0JpbmFyeVZlcnNpb259IGJpbmFyeSBUaGlzIHZlcnNpb24gbnVtYmVyIG1pZ2h0IG5vdCBiZVxuICogYmUgcHJlc2VudCBmb3Igb2xkZXIgQURCIHJlbGVhc2VzLlxuICogQHByb3BlcnR5IHtCcmlkZ2VWZXJzaW9ufSBicmlkZ2VcbiAqL1xuXG4vKipcbiAqIEdldCB0aGUgYWRiIHZlcnNpb24uIFRoZSByZXN1bHQgb2YgdGhpcyBtZXRob2QgaXMgY2FjaGVkLlxuICpcbiAqIEByZXR1cm4ge1ZlcnNpb259XG4gKiBAdGhyb3dzIHtFcnJvcn0gSWYgaXQgaXMgbm90IHBvc3NpYmxlIHRvIHBhcnNlIGFkYiBiaW5hcnkgdmVyc2lvbi5cbiAqL1xuc3lzdGVtQ2FsbE1ldGhvZHMuZ2V0VmVyc2lvbiA9IF8ubWVtb2l6ZShhc3luYyBmdW5jdGlvbiBnZXRWZXJzaW9uICgpIHtcbiAgbGV0IHN0ZG91dDtcbiAgdHJ5IHtcbiAgICBzdGRvdXQgPSBhd2FpdCB0aGlzLmFkYkV4ZWMoJ3ZlcnNpb24nKTtcbiAgfSBjYXRjaCAoZSkge1xuICAgIHRocm93IG5ldyBFcnJvcihgRXJyb3IgZ2V0dGluZyBhZGIgdmVyc2lvbjogJHtlLnN0ZGVyciB8fCBlLm1lc3NhZ2V9YCk7XG4gIH1cblxuICBjb25zdCByZXN1bHQgPSB7fTtcbiAgY29uc3QgYmluYXJ5VmVyc2lvbk1hdGNoID0gQklOQVJZX1ZFUlNJT05fUEFUVEVSTi5leGVjKHN0ZG91dCk7XG4gIGlmIChiaW5hcnlWZXJzaW9uTWF0Y2gpIHtcbiAgICByZXN1bHQuYmluYXJ5ID0ge1xuICAgICAgdmVyc2lvbjogc2VtdmVyLmNvZXJjZShiaW5hcnlWZXJzaW9uTWF0Y2hbMV0pLFxuICAgICAgYnVpbGQ6IHBhcnNlSW50KGJpbmFyeVZlcnNpb25NYXRjaFsyXSwgMTApLFxuICAgIH07XG4gIH1cbiAgY29uc3QgYnJpZGdlVmVyc2lvbk1hdGNoID0gQlJJREdFX1ZFUlNJT05fUEFUVEVSTi5leGVjKHN0ZG91dCk7XG4gIGlmIChicmlkZ2VWZXJzaW9uTWF0Y2gpIHtcbiAgICByZXN1bHQuYnJpZGdlID0ge1xuICAgICAgdmVyc2lvbjogc2VtdmVyLmNvZXJjZShicmlkZ2VWZXJzaW9uTWF0Y2hbMV0pLFxuICAgIH07XG4gIH1cbiAgcmV0dXJuIHJlc3VsdDtcbn0pO1xuXG4vKipcbiAqIENoZWNrIGlmIHRoZSBjdXJyZW50IGVtdWxhdG9yIGlzIHJlYWR5IHRvIGFjY2VwdCBmdXJ0aGVyIGNvbW1hbmRzIChib290aW5nIGNvbXBsZXRlZCkuXG4gKlxuICogQHBhcmFtIHtudW1iZXJ9IHRpbWVvdXRNcyBbMjAwMDBdIC0gVGhlIG1heGltdW0gbnVtYmVyIG9mIG1pbGxpc2Vjb25kcyB0byB3YWl0LlxuICogQHRocm93cyB7RXJyb3J9IElmIHRoZSBlbXVsYXRvciBpcyBub3QgcmVhZHkgd2l0aGluIHRoZSBnaXZlbiB0aW1lb3V0LlxuICovXG5zeXN0ZW1DYWxsTWV0aG9kcy53YWl0Rm9yRW11bGF0b3JSZWFkeSA9IGFzeW5jIGZ1bmN0aW9uIHdhaXRGb3JFbXVsYXRvclJlYWR5ICh0aW1lb3V0TXMgPSAyMDAwMCkge1xuICB0cnkge1xuICAgIGF3YWl0IHdhaXRGb3JDb25kaXRpb24oYXN5bmMgKCkgPT4ge1xuICAgICAgdHJ5IHtcbiAgICAgICAgaWYgKCEoYXdhaXQgdGhpcy5zaGVsbChbJ2dldHByb3AnLCAnaW5pdC5zdmMuYm9vdGFuaW0nXSkpLmluY2x1ZGVzKCdzdG9wcGVkJykpIHtcbiAgICAgICAgICByZXR1cm4gZmFsc2U7XG4gICAgICAgIH1cbiAgICAgICAgLy8gU29tZXRpbWVzIHRoZSBwYWNrYWdlIG1hbmFnZXIgc2VydmljZSBtaWdodCBzdGlsbCBiZWluZyBpbml0aWFsaXplZFxuICAgICAgICAvLyBvbiBzbG93IHN5c3RlbXMgZXZlbiBhZnRlciBlbXVsYXRvciBib290aW5nIGlzIGNvbXBsZXRlZC5cbiAgICAgICAgLy8gVGhlIHVzdWFsIG91dHB1dCBvZiBgcG0gZ2V0LWluc3RhbGwtbG9jYXRpb25gIGNvbW1hbmQgbG9va3MgbGlrZSBgMFthdXRvXWBcbiAgICAgICAgcmV0dXJuIC9cXGQrXFxbXFx3K1xcXS8udGVzdChhd2FpdCB0aGlzLnNoZWxsKFsncG0nLCAnZ2V0LWluc3RhbGwtbG9jYXRpb24nXSkpO1xuICAgICAgfSBjYXRjaCAoZXJyKSB7XG4gICAgICAgIGxvZy5kZWJ1ZyhgV2FpdGluZyBmb3IgZW11bGF0b3Igc3RhcnR1cC4gSW50ZXJtZWRpYXRlIGVycm9yOiAke2Vyci5tZXNzYWdlfWApO1xuICAgICAgICByZXR1cm4gZmFsc2U7XG4gICAgICB9XG4gICAgfSwge1xuICAgICAgd2FpdE1zOiB0aW1lb3V0TXMsXG4gICAgICBpbnRlcnZhbE1zOiAzMDAwLFxuICAgIH0pO1xuICB9IGNhdGNoIChlKSB7XG4gICAgdGhyb3cgbmV3IEVycm9yKGBFbXVsYXRvciBpcyBub3QgcmVhZHkgd2l0aGluICR7dGltZW91dE1zfW1zYCk7XG4gIH1cbn07XG5cbi8qKlxuICogQ2hlY2sgaWYgdGhlIGN1cnJlbnQgZGV2aWNlIGlzIHJlYWR5IHRvIGFjY2VwdCBmdXJ0aGVyIGNvbW1hbmRzIChib290aW5nIGNvbXBsZXRlZCkuXG4gKlxuICogQHBhcmFtIHtudW1iZXJ9IGFwcERldmljZVJlYWR5VGltZW91dCBbMzBdIC0gVGhlIG1heGltdW0gbnVtYmVyIG9mIHNlY29uZHMgdG8gd2FpdC5cbiAqIEB0aHJvd3Mge0Vycm9yfSBJZiB0aGUgZGV2aWNlIGlzIG5vdCByZWFkeSB3aXRoaW4gdGhlIGdpdmVuIHRpbWVvdXQuXG4gKi9cbnN5c3RlbUNhbGxNZXRob2RzLndhaXRGb3JEZXZpY2UgPSBhc3luYyBmdW5jdGlvbiB3YWl0Rm9yRGV2aWNlIChhcHBEZXZpY2VSZWFkeVRpbWVvdXQgPSAzMCkge1xuICB0aGlzLmFwcERldmljZVJlYWR5VGltZW91dCA9IGFwcERldmljZVJlYWR5VGltZW91dDtcbiAgY29uc3QgcmV0cmllcyA9IDM7XG4gIGNvbnN0IHRpbWVvdXQgPSBwYXJzZUludCh0aGlzLmFwcERldmljZVJlYWR5VGltZW91dCwgMTApICogMTAwMCAvIHJldHJpZXM7XG4gIGF3YWl0IHJldHJ5KHJldHJpZXMsIGFzeW5jICgpID0+IHtcbiAgICB0cnkge1xuICAgICAgYXdhaXQgdGhpcy5hZGJFeGVjKCd3YWl0LWZvci1kZXZpY2UnLCB7dGltZW91dH0pO1xuICAgICAgYXdhaXQgdGhpcy5waW5nKCk7XG4gICAgfSBjYXRjaCAoZSkge1xuICAgICAgdHJ5IHtcbiAgICAgICAgYXdhaXQgdGhpcy5yZWNvbm5lY3QoKTtcbiAgICAgIH0gY2F0Y2ggKGlnbikge1xuICAgICAgICBhd2FpdCB0aGlzLnJlc3RhcnRBZGIoKTtcbiAgICAgIH1cbiAgICAgIGF3YWl0IHRoaXMuZ2V0Q29ubmVjdGVkRGV2aWNlcygpO1xuICAgICAgdGhyb3cgbmV3IEVycm9yKGBFcnJvciB3YWl0aW5nIGZvciB0aGUgZGV2aWNlIHRvIGJlIGF2YWlsYWJsZS4gT3JpZ2luYWwgZXJyb3I6ICcke2UubWVzc2FnZX0nYCk7XG4gICAgfVxuICB9KTtcbn07XG5cbi8qKlxuICogUmVib290IHRoZSBjdXJyZW50IGRldmljZSBhbmQgd2FpdCB1bnRpbCBpdCBpcyBjb21wbGV0ZWQuXG4gKlxuICogQHBhcmFtIHtudW1iZXJ9IHJldHJpZXMgW0RFRkFVTFRfQURCX1JFQk9PVF9SRVRSSUVTXSAtIFRoZSBtYXhpbXVtIG51bWJlciBvZiByZWJvb3QgcmV0cmllcy5cbiAqIEB0aHJvd3Mge0Vycm9yfSBJZiB0aGUgZGV2aWNlIGZhaWxlZCB0byByZWJvb3QgYW5kIG51bWJlciBvZiByZXRyaWVzIGlzIGV4Y2VlZGVkLlxuICovXG5zeXN0ZW1DYWxsTWV0aG9kcy5yZWJvb3QgPSBhc3luYyBmdW5jdGlvbiByZWJvb3QgKHJldHJpZXMgPSBERUZBVUxUX0FEQl9SRUJPT1RfUkVUUklFUykge1xuICAvLyBHZXQgcm9vdCBhY2Nlc3Mgc28gd2UgY2FuIHJ1biB0aGUgbmV4dCBzaGVsbCBjb21tYW5kcyB3aGljaCByZXF1aXJlIHJvb3QgYWNjZXNzXG4gIGNvbnN0IHsgd2FzQWxyZWFkeVJvb3RlZCB9ID0gYXdhaXQgdGhpcy5yb290KCk7XG4gIHRyeSB7XG4gICAgLy8gU3RvcCBhbmQgcmUtc3RhcnQgdGhlIGRldmljZVxuICAgIGF3YWl0IHRoaXMuc2hlbGwoWydzdG9wJ10pO1xuICAgIGF3YWl0IEIuZGVsYXkoMjAwMCk7IC8vIGxldCB0aGUgZW11IGZpbmlzaCBzdG9wcGluZztcbiAgICBhd2FpdCB0aGlzLnNldERldmljZVByb3BlcnR5KCdzeXMuYm9vdF9jb21wbGV0ZWQnLCAwLCB7XG4gICAgICBwcml2aWxlZ2VkOiBmYWxzZSAvLyBubyBuZWVkIHRvIHNldCBwcml2aWxlZ2VkIHRydWUgYmVjYXVzZSBkZXZpY2UgYWxyZWFkeSByb290ZWRcbiAgICB9KTtcbiAgICBhd2FpdCB0aGlzLnNoZWxsKFsnc3RhcnQnXSk7XG4gIH0gY2F0Y2ggKGUpIHtcbiAgICBjb25zdCB7bWVzc2FnZX0gPSBlO1xuXG4gICAgLy8gcHJvdmlkZSBhIGhlbHBmdWwgZXJyb3IgbWVzc2FnZSBpZiB0aGUgcmVhc29uIHJlYm9vdCBmYWlsZWQgd2FzIGJlY2F1c2UgQURCIGNvdWxkbid0IGdhaW4gcm9vdCBhY2Nlc3NcbiAgICBpZiAobWVzc2FnZS5pbmNsdWRlcygnbXVzdCBiZSByb290JykpIHtcbiAgICAgIHRocm93IG5ldyBFcnJvcihgQ291bGQgbm90IHJlYm9vdCBkZXZpY2UuIFJlYm9vdGluZyByZXF1aXJlcyByb290IGFjY2VzcyBhbmQgYCArXG4gICAgICAgIGBhdHRlbXB0IHRvIGdldCByb290IGFjY2VzcyBvbiBkZXZpY2UgZmFpbGVkIHdpdGggZXJyb3I6ICcke21lc3NhZ2V9J2ApO1xuICAgIH1cbiAgICB0aHJvdyBlO1xuICB9IGZpbmFsbHkge1xuICAgIC8vIFJldHVybiByb290IHN0YXRlIHRvIHdoYXQgaXQgd2FzIGJlZm9yZVxuICAgIGlmICghd2FzQWxyZWFkeVJvb3RlZCkge1xuICAgICAgYXdhaXQgdGhpcy51bnJvb3QoKTtcbiAgICB9XG4gIH1cbiAgY29uc3QgdGltZXIgPSBuZXcgdGltaW5nLlRpbWVyKCkuc3RhcnQoKTtcbiAgYXdhaXQgcmV0cnlJbnRlcnZhbChyZXRyaWVzLCAxMDAwLCBhc3luYyAoKSA9PiB7XG4gICAgaWYgKChhd2FpdCB0aGlzLmdldERldmljZVByb3BlcnR5KCdzeXMuYm9vdF9jb21wbGV0ZWQnKSkgPT09ICcxJykge1xuICAgICAgcmV0dXJuO1xuICAgIH1cbiAgICAvLyB3ZSBkb24ndCB3YW50IHRoZSBzdGFjayB0cmFjZSwgc28gbm8gbG9nLmVycm9yQW5kVGhyb3dcbiAgICBjb25zdCBtc2cgPSBgUmVib290IGlzIG5vdCBjb21wbGV0ZWQgYWZ0ZXIgJHt0aW1lci5nZXREdXJhdGlvbigpLmFzTWlsbGlTZWNvbmRzLnRvRml4ZWQoMCl9bXNgO1xuICAgIGxvZy5kZWJ1Zyhtc2cpO1xuICAgIHRocm93IG5ldyBFcnJvcihtc2cpO1xuICB9KTtcbn07XG5cbi8qKlxuICogQHR5cGVkZWYge09iamVjdH0gcm9vdFJlc3VsdFxuICogQHByb3BlcnR5IHtib29sZWFufSBpc1N1Y2Nlc3NmdWwgVHJ1ZSBpZiB0aGUgY2FsbCB0byByb290L3Vucm9vdCB3YXMgc3VjY2Vzc2Z1bFxuICogQHByb3BlcnR5IHtib29sZWFufSB3YXNBbHJlYWR5Um9vdGVkIFRydWUgaWYgdGhlIGRldmljZSB3YXMgYWxyZWFkeSByb290ZWRcbiAqL1xuXG4vKipcbiAqIFN3aXRjaCBhZGIgc2VydmVyIHJvb3QgcHJpdmlsZWdlcy5cbiAqIEBwYXJhbSB7Ym9vbGVhbn0gaXNFbGV2YXRlZCAtIFNob3VsZCB3ZSBlbGV2YXRlIHRvIHRvIHJvb3Qgb3IgdW5yb290PyAoZGVmYXVsdCB0cnVlKVxuICogQHJldHVybiB7cm9vdFJlc3VsdH1cbiAqL1xuc3lzdGVtQ2FsbE1ldGhvZHMuY2hhbmdlVXNlclByaXZpbGVnZXMgPSBhc3luYyBmdW5jdGlvbiBjaGFuZ2VVc2VyUHJpdmlsZWdlcyAoaXNFbGV2YXRlZCkge1xuICBjb25zdCBjbWQgPSBpc0VsZXZhdGVkID8gJ3Jvb3QnIDogJ3Vucm9vdCc7XG5cbiAgY29uc3QgcmV0cnlJZk9mZmxpbmUgPSBhc3luYyAoY21kRnVuYykgPT4ge1xuICAgIHRyeSB7XG4gICAgICByZXR1cm4gYXdhaXQgY21kRnVuYygpO1xuICAgIH0gY2F0Y2ggKGVycikge1xuICAgICAgLy8gQ2hlY2sgdGhlIG91dHB1dCBvZiB0aGUgc3RkRXJyIHRvIHNlZSBpZiB0aGVyZSdzIGFueSBjbHVlcyB0aGF0IHNob3cgdGhhdCB0aGUgZGV2aWNlIHdlbnQgb2ZmbGluZVxuICAgICAgLy8gYW5kIGlmIGl0IGRpZCBnbyBvZmZsaW5lLCByZXN0YXJ0IEFEQlxuICAgICAgaWYgKFsnY2xvc2VkJywgJ2RldmljZSBvZmZsaW5lJywgJ3RpbWVvdXQgZXhwaXJlZCddXG4gICAgICAgICAgLnNvbWUoKHgpID0+IChlcnIuc3RkZXJyIHx8ICcnKS50b0xvd2VyQ2FzZSgpLmluY2x1ZGVzKHgpKSkge1xuICAgICAgICBsb2cud2FybihgQXR0ZW1wdCB0byAke2NtZH0gY2F1c2VkIEFEQiB0byB0aGluayB0aGUgZGV2aWNlIHdlbnQgb2ZmbGluZWApO1xuICAgICAgICB0cnkge1xuICAgICAgICAgIGF3YWl0IHRoaXMucmVjb25uZWN0KCk7XG4gICAgICAgIH0gY2F0Y2ggKGlnbikge1xuICAgICAgICAgIGF3YWl0IHRoaXMucmVzdGFydEFkYigpO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiBhd2FpdCBjbWRGdW5jKCk7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICB0aHJvdyBlcnI7XG4gICAgICB9XG4gICAgfVxuICB9O1xuXG4gIC8vIElmIGl0J3MgYWxyZWFkeSByb290ZWQsIG91ciBqb2IgaXMgZG9uZS4gTm8gbmVlZCB0byByb290IGl0IGFnYWluLlxuICBjb25zdCBpc1Jvb3QgPSBhd2FpdCByZXRyeUlmT2ZmbGluZShhc3luYyAoKSA9PiBhd2FpdCB0aGlzLmlzUm9vdCgpKTtcbiAgaWYgKChpc1Jvb3QgJiYgaXNFbGV2YXRlZCkgfHwgKCFpc1Jvb3QgJiYgIWlzRWxldmF0ZWQpKSB7XG4gICAgcmV0dXJuIHtpc1N1Y2Nlc3NmdWw6IHRydWUsIHdhc0FscmVhZHlSb290ZWQ6IGlzUm9vdH07XG4gIH1cblxuICBsZXQgd2FzQWxyZWFkeVJvb3RlZCA9IGlzUm9vdDtcbiAgdHJ5IHtcbiAgICBjb25zdCB7c3Rkb3V0fSA9IGF3YWl0IHJldHJ5SWZPZmZsaW5lKGFzeW5jICgpID0+IGF3YWl0IHRoaXMuYWRiRXhlYyhbY21kXSkpO1xuICAgIGxvZy5kZWJ1ZyhzdGRvdXQpO1xuXG4gICAgLy8gb24gcmVhbCBkZXZpY2VzIGluIHNvbWUgc2l0dWF0aW9ucyB3ZSBnZXQgYW4gZXJyb3IgaW4gdGhlIHN0ZG91dFxuICAgIGlmIChzdGRvdXQpIHtcbiAgICAgIGlmIChzdGRvdXQuaW5jbHVkZXMoJ2FkYmQgY2Fubm90IHJ1biBhcyByb290JykpIHtcbiAgICAgICAgcmV0dXJuIHtpc1N1Y2Nlc3NmdWw6IGZhbHNlLCB3YXNBbHJlYWR5Um9vdGVkfTtcbiAgICAgIH1cbiAgICAgIC8vIGlmIHRoZSBkZXZpY2Ugd2FzIGFscmVhZHkgcm9vdGVkLCByZXR1cm4gdGhhdCBpbiB0aGUgcmVzdWx0XG4gICAgICBpZiAoc3Rkb3V0LmluY2x1ZGVzKCdhbHJlYWR5IHJ1bm5pbmcgYXMgcm9vdCcpKSB7XG4gICAgICAgIHdhc0FscmVhZHlSb290ZWQgPSB0cnVlO1xuICAgICAgfVxuICAgIH1cbiAgICByZXR1cm4ge2lzU3VjY2Vzc2Z1bDogdHJ1ZSwgd2FzQWxyZWFkeVJvb3RlZH07XG4gIH0gY2F0Y2ggKGVycikge1xuICAgIGNvbnN0IHtzdGRlcnIgPSAnJywgbWVzc2FnZX0gPSBlcnI7XG4gICAgbG9nLndhcm4oYFVuYWJsZSB0byAke2NtZH0gYWRiIGRhZW1vbi4gT3JpZ2luYWwgZXJyb3I6ICcke21lc3NhZ2V9Jy4gU3RkZXJyOiAnJHtzdGRlcnJ9Jy4gQ29udGludWluZy5gKTtcbiAgICByZXR1cm4ge2lzU3VjY2Vzc2Z1bDogZmFsc2UsIHdhc0FscmVhZHlSb290ZWR9O1xuICB9XG59O1xuXG4vKipcbiAqIFN3aXRjaCBhZGIgc2VydmVyIHRvIHJvb3QgbW9kZVxuICogQHJldHVybiB7cm9vdFJlc3VsdH1cbiAqL1xuc3lzdGVtQ2FsbE1ldGhvZHMucm9vdCA9IGFzeW5jIGZ1bmN0aW9uIHJvb3QgKCkge1xuICByZXR1cm4gYXdhaXQgdGhpcy5jaGFuZ2VVc2VyUHJpdmlsZWdlcyh0cnVlKTtcbn07XG5cbi8qKlxuICogU3dpdGNoIGFkYiBzZXJ2ZXIgdG8gbm9uLXJvb3QgbW9kZS5cbiAqXG4gKiBAcmV0dXJuIHtyb290UmVzdWx0fVxuICovXG5zeXN0ZW1DYWxsTWV0aG9kcy51bnJvb3QgPSBhc3luYyBmdW5jdGlvbiB1bnJvb3QgKCkge1xuICByZXR1cm4gYXdhaXQgdGhpcy5jaGFuZ2VVc2VyUHJpdmlsZWdlcyhmYWxzZSk7XG59O1xuXG4vKipcbiAqIENoZWNrcyB3aGV0aGVyIHRoZSBjdXJyZW50IHVzZXIgaXMgcm9vdFxuICpcbiAqIEByZXR1cm4ge2Jvb2xlYW59IFRydWUgaWYgdGhlIHVzZXIgaXMgcm9vdFxuICogQHRocm93cyB7RXJyb3J9IGlmIHRoZXJlIHdhcyBhbiBlcnJvciB3aGlsZSBpZGVudGlmeWluZ1xuICogdGhlIHVzZXIuXG4gKi9cbnN5c3RlbUNhbGxNZXRob2RzLmlzUm9vdCA9IGFzeW5jIGZ1bmN0aW9uIGlzUm9vdCAoKSB7XG4gIHJldHVybiAoYXdhaXQgdGhpcy5zaGVsbChbJ3dob2FtaSddKSkudHJpbSgpID09PSAncm9vdCc7XG59O1xuXG4vKipcbiAqIFZlcmlmeSB3aGV0aGVyIGEgcmVtb3RlIHBhdGggZXhpc3RzIG9uIHRoZSBkZXZpY2UgdW5kZXIgdGVzdC5cbiAqXG4gKiBAcGFyYW0ge3N0cmluZ30gcmVtb3RlUGF0aCAtIFRoZSByZW1vdGUgcGF0aCB0byB2ZXJpZnkuXG4gKiBAcmV0dXJuIHtib29sZWFufSBUcnVlIGlmIHRoZSBnaXZlbiBwYXRoIGV4aXN0cyBvbiB0aGUgZGV2aWNlLlxuICovXG5zeXN0ZW1DYWxsTWV0aG9kcy5maWxlRXhpc3RzID0gYXN5bmMgZnVuY3Rpb24gZmlsZUV4aXN0cyAocmVtb3RlUGF0aCkge1xuICBjb25zdCBwYXNzRmxhZyA9ICdfX1BBU1NfXyc7XG4gIGNvbnN0IGNoZWNrQ21kID0gYFsgLWUgJyR7cmVtb3RlUGF0aC5yZXBsYWNlKC8nL2csIGBcXFxcJ2ApfScgXSAmJiBlY2hvICR7cGFzc0ZsYWd9YDtcbiAgdHJ5IHtcbiAgICByZXR1cm4gXy5pbmNsdWRlcyhhd2FpdCB0aGlzLnNoZWxsKFtjaGVja0NtZF0pLCBwYXNzRmxhZyk7XG4gIH0gY2F0Y2ggKGlnbikge1xuICAgIHJldHVybiBmYWxzZTtcbiAgfVxufTtcblxuLyoqXG4gKiBHZXQgdGhlIG91dHB1dCBvZiBfbHNfIGNvbW1hbmQgb24gdGhlIGRldmljZSB1bmRlciB0ZXN0LlxuICpcbiAqIEBwYXJhbSB7c3RyaW5nfSByZW1vdGVQYXRoIC0gVGhlIHJlbW90ZSBwYXRoICh0aGUgZmlyc3QgYXJndW1lbnQgdG8gdGhlIF9sc18gY29tbWFuZCkuXG4gKiBAcGFyYW0ge0FycmF5LjxTdHJpbmc+fSBvcHRzIFtbXV0gLSBBZGRpdGlvbmFsIF9sc18gb3B0aW9ucy5cbiAqIEByZXR1cm4ge0FycmF5LjxTdHJpbmc+fSBUaGUgX2xzXyBvdXRwdXQgYXMgYW4gYXJyYXkgb2Ygc3BsaXQgbGluZXMuXG4gKiAgICAgICAgICAgICAgICAgICAgICAgICAgQW4gZW1wdHkgYXJyYXkgaXMgcmV0dXJuZWQgb2YgdGhlIGdpdmVuIF9yZW1vdGVQYXRoX1xuICogICAgICAgICAgICAgICAgICAgICAgICAgIGRvZXMgbm90IGV4aXN0LlxuICovXG5zeXN0ZW1DYWxsTWV0aG9kcy5scyA9IGFzeW5jIGZ1bmN0aW9uIGxzIChyZW1vdGVQYXRoLCBvcHRzID0gW10pIHtcbiAgdHJ5IHtcbiAgICBsZXQgYXJncyA9IFsnbHMnLCAuLi5vcHRzLCByZW1vdGVQYXRoXTtcbiAgICBsZXQgc3Rkb3V0ID0gYXdhaXQgdGhpcy5zaGVsbChhcmdzKTtcbiAgICBsZXQgbGluZXMgPSBzdGRvdXQuc3BsaXQoJ1xcbicpO1xuICAgIHJldHVybiBsaW5lcy5tYXAoKGwpID0+IGwudHJpbSgpKVxuICAgICAgLmZpbHRlcihCb29sZWFuKVxuICAgICAgLmZpbHRlcigobCkgPT4gbC5pbmRleE9mKCdObyBzdWNoIGZpbGUnKSA9PT0gLTEpO1xuICB9IGNhdGNoIChlcnIpIHtcbiAgICBpZiAoZXJyLm1lc3NhZ2UuaW5kZXhPZignTm8gc3VjaCBmaWxlIG9yIGRpcmVjdG9yeScpID09PSAtMSkge1xuICAgICAgdGhyb3cgZXJyO1xuICAgIH1cbiAgICByZXR1cm4gW107XG4gIH1cbn07XG5cbi8qKlxuICogR2V0IHRoZSBzaXplIG9mIHRoZSBwYXJ0aWN1bGFyIGZpbGUgbG9jYXRlZCBvbiB0aGUgZGV2aWNlIHVuZGVyIHRlc3QuXG4gKlxuICogQHBhcmFtIHtzdHJpbmd9IHJlbW90ZVBhdGggLSBUaGUgcmVtb3RlIHBhdGggdG8gdGhlIGZpbGUuXG4gKiBAcmV0dXJuIHtudW1iZXJ9IEZpbGUgc2l6ZSBpbiBieXRlcy5cbiAqIEB0aHJvd3Mge0Vycm9yfSBJZiB0aGVyZSB3YXMgYW4gZXJyb3Igd2hpbGUgZ2V0dGluZyB0aGUgc2l6ZSBvZiB0aGUgZ2l2ZW4gZmlsZS5cbiAqL1xuc3lzdGVtQ2FsbE1ldGhvZHMuZmlsZVNpemUgPSBhc3luYyBmdW5jdGlvbiBmaWxlU2l6ZSAocmVtb3RlUGF0aCkge1xuICB0cnkge1xuICAgIGNvbnN0IGZpbGVzID0gYXdhaXQgdGhpcy5scyhyZW1vdGVQYXRoLCBbJy1sYSddKTtcbiAgICBpZiAoZmlsZXMubGVuZ3RoICE9PSAxKSB7XG4gICAgICB0aHJvdyBuZXcgRXJyb3IoYFJlbW90ZSBwYXRoIGlzIG5vdCBhIGZpbGVgKTtcbiAgICB9XG4gICAgLy8gaHR0cHM6Ly9yZWdleDEwMS5jb20vci9mT3M0UDQvOFxuICAgIGNvbnN0IG1hdGNoID0gL1tyd3hzU3RUXFwtK117MTB9W1xcc1xcZF0qXFxzW15cXHNdK1xccytbXlxcc10rXFxzKyhcXGQrKS8uZXhlYyhmaWxlc1swXSk7XG4gICAgaWYgKCFtYXRjaCB8fCBfLmlzTmFOKHBhcnNlSW50KG1hdGNoWzFdLCAxMCkpKSB7XG4gICAgICB0aHJvdyBuZXcgRXJyb3IoYFVuYWJsZSB0byBwYXJzZSBzaXplIGZyb20gbGlzdCBvdXRwdXQ6ICcke2ZpbGVzWzBdfSdgKTtcbiAgICB9XG4gICAgcmV0dXJuIHBhcnNlSW50KG1hdGNoWzFdLCAxMCk7XG4gIH0gY2F0Y2ggKGVycikge1xuICAgIHRocm93IG5ldyBFcnJvcihgVW5hYmxlIHRvIGdldCBmaWxlIHNpemUgZm9yICcke3JlbW90ZVBhdGh9JzogJHtlcnIubWVzc2FnZX1gKTtcbiAgfVxufTtcblxuLyoqXG4gKiBJbnN0YWxscyB0aGUgZ2l2ZW4gY2VydGlmaWNhdGUgb24gYSByb290ZWQgcmVhbCBkZXZpY2Ugb3JcbiAqIGFuIGVtdWxhdG9yLiBUaGUgZW11bGF0b3IgbXVzdCBiZSBleGVjdXRlZCB3aXRoIGAtd3JpdGFibGUtc3lzdGVtYFxuICogY29tbWFuZCBsaW5lIG9wdGlvbiBhbmQgYWRiIGRhZW1vbiBzaG91bGQgYmUgcnVubmluZyBpbiByb290XG4gKiBtb2RlIGZvciB0aGlzIG1ldGhvZCB0byB3b3JrIHByb3Blcmx5LiBUaGUgbWV0aG9kIGFsc28gcmVxdWlyZXNcbiAqIG9wZW5zc2wgdG9vbCB0byBiZSBhdmFpbGFibGUgb24gdGhlIGRlc3RpbmF0aW9uIHN5c3RlbS5cbiAqIFJlYWQgaHR0cHM6Ly9naXRodWIuY29tL2FwcGl1bS9hcHBpdW0vaXNzdWVzLzEwOTY0XG4gKiBmb3IgbW9yZSBkZXRhaWxzIG9uIHRoaXMgdG9waWNcbiAqXG4gKiBAcGFyYW0ge0J1ZmZlcnxzdHJpbmd9IGNlcnQgLSBiYXNlNjQtZGVjb2RlZCBjb250ZW50IG9mIHRoZSBhY3R1YWwgY2VydGlmaWNhdGVcbiAqIHJlcHJlc2VudGVkIGFzIGEgc3RyaW5nIG9yIGEgYnVmZmVyXG4gKiBAdGhyb3dzIHtFcnJvcn0gSWYgb3BlbnNzbCB0b29sIGlzIG5vdCBhdmFpbGFibGUgb24gdGhlIGRlc3RpbmF0aW9uIHN5c3RlbVxuICogb3IgaWYgdGhlcmUgd2FzIGFuIGVycm9yIHdoaWxlIGluc3RhbGxpbmcgdGhlIGNlcnRpZmljYXRlXG4gKi9cbnN5c3RlbUNhbGxNZXRob2RzLmluc3RhbGxNaXRtQ2VydGlmaWNhdGUgPSBhc3luYyBmdW5jdGlvbiBpbnN0YWxsTWl0bUNlcnRpZmljYXRlIChjZXJ0KSB7XG4gIGNvbnN0IG9wZW5Tc2wgPSBhd2FpdCBnZXRPcGVuU3NsRm9yT3MoKTtcblxuICBpZiAoIV8uaXNCdWZmZXIoY2VydCkpIHtcbiAgICBjZXJ0ID0gQnVmZmVyLmZyb20oY2VydCwgJ2Jhc2U2NCcpO1xuICB9XG5cbiAgY29uc3QgdG1wUm9vdCA9IGF3YWl0IHRlbXBEaXIub3BlbkRpcigpO1xuICB0cnkge1xuICAgIGNvbnN0IHNyY0NlcnQgPSBwYXRoLnJlc29sdmUodG1wUm9vdCwgJ3NvdXJjZS5jZXInKTtcbiAgICBhd2FpdCBmcy53cml0ZUZpbGUoc3JjQ2VydCwgY2VydCk7XG4gICAgbGV0IHtzdGRvdXR9ID0gYXdhaXQgZXhlYyhvcGVuU3NsLCBbJ3g1MDknLCAnLW5vb3V0JywgJy1oYXNoJywgJy1pbicsIHNyY0NlcnRdKTtcbiAgICBjb25zdCBjZXJ0SGFzaCA9IHN0ZG91dC50cmltKCk7XG4gICAgbG9nLmRlYnVnKGBHb3QgY2VydGlmaWNhdGUgaGFzaDogJHtjZXJ0SGFzaH1gKTtcbiAgICBsb2cuZGVidWcoJ1ByZXBhcmluZyBjZXJ0aWZpY2F0ZSBjb250ZW50Jyk7XG4gICAgKHtzdGRvdXR9ID0gYXdhaXQgZXhlYyhvcGVuU3NsLCBbJ3g1MDknLCAnLWluJywgc3JjQ2VydF0sIHtpc0J1ZmZlcjogdHJ1ZX0pKTtcbiAgICBsZXQgZHN0Q2VydENvbnRlbnQgPSBzdGRvdXQ7XG4gICAgKHtzdGRvdXR9ID0gYXdhaXQgZXhlYyhvcGVuU3NsLCBbJ3g1MDknLFxuICAgICAgJy1pbicsIHNyY0NlcnQsXG4gICAgICAnLXRleHQnLFxuICAgICAgJy1maW5nZXJwcmludCcsXG4gICAgICAnLW5vb3V0J10sIHtpc0J1ZmZlcjogdHJ1ZX0pKTtcbiAgICBkc3RDZXJ0Q29udGVudCA9IEJ1ZmZlci5jb25jYXQoW2RzdENlcnRDb250ZW50LCBzdGRvdXRdKTtcbiAgICBjb25zdCBkc3RDZXJ0ID0gcGF0aC5yZXNvbHZlKHRtcFJvb3QsIGAke2NlcnRIYXNofS4wYCk7XG4gICAgYXdhaXQgZnMud3JpdGVGaWxlKGRzdENlcnQsIGRzdENlcnRDb250ZW50KTtcbiAgICBsb2cuZGVidWcoJ1JlbW91bnRpbmcgL3N5c3RlbSBpbiBydyBtb2RlJyk7XG4gICAgLy8gU29tZXRpbWVzIGVtdWxhdG9yIHJlYm9vdCBpcyBzdGlsbCBub3QgZnVsbHkgZmluaXNoZWQgb24gdGhpcyBzdGFnZSwgc28gcmV0cnlcbiAgICBhd2FpdCByZXRyeUludGVydmFsKDUsIDIwMDAsIGFzeW5jICgpID0+IGF3YWl0IHRoaXMuYWRiRXhlYyhbJ3JlbW91bnQnXSkpO1xuICAgIGxvZy5kZWJ1ZyhgVXBsb2FkaW5nIHRoZSBnZW5lcmF0ZWQgY2VydGlmaWNhdGUgZnJvbSAnJHtkc3RDZXJ0fScgdG8gJyR7Q0VSVFNfUk9PVH0nYCk7XG4gICAgYXdhaXQgdGhpcy5wdXNoKGRzdENlcnQsIENFUlRTX1JPT1QpO1xuICAgIGxvZy5kZWJ1ZygnUmVtb3VudGluZyAvc3lzdGVtIHRvIGNvbmZpcm0gY2hhbmdlcycpO1xuICAgIGF3YWl0IHRoaXMuYWRiRXhlYyhbJ3JlbW91bnQnXSk7XG4gIH0gY2F0Y2ggKGVycikge1xuICAgIHRocm93IG5ldyBFcnJvcihgQ2Fubm90IGluamVjdCB0aGUgY3VzdG9tIGNlcnRpZmljYXRlLiBgICtcbiAgICAgICAgICAgICAgICAgICAgYElzIHRoZSBjZXJ0aWZpY2F0ZSBwcm9wZXJseSBlbmNvZGVkIGludG8gYmFzZTY0LXN0cmluZz8gYCArXG4gICAgICAgICAgICAgICAgICAgIGBEbyB5b3UgaGF2ZSByb290IHBlcm1pc3Npb25zIG9uIHRoZSBkZXZpY2U/IGAgK1xuICAgICAgICAgICAgICAgICAgICBgT3JpZ2luYWwgZXJyb3I6ICR7ZXJyLm1lc3NhZ2V9YCk7XG4gIH0gZmluYWxseSB7XG4gICAgYXdhaXQgZnMucmltcmFmKHRtcFJvb3QpO1xuICB9XG59O1xuXG4vKipcbiAqIFZlcmlmaWVzIGlmIHRoZSBnaXZlbiByb290IGNlcnRpZmljYXRlIGlzIGFscmVhZHkgaW5zdGFsbGVkIG9uIHRoZSBkZXZpY2UuXG4gKlxuICogQHBhcmFtIHtCdWZmZXJ8c3RyaW5nfSBjZXJ0IC0gYmFzZTY0LWRlY29kZWQgY29udGVudCBvZiB0aGUgYWN0dWFsIGNlcnRpZmljYXRlXG4gKiByZXByZXNlbnRlZCBhcyBhIHN0cmluZyBvciBhIGJ1ZmZlclxuICogQHRocm93cyB7RXJyb3J9IElmIG9wZW5zc2wgdG9vbCBpcyBub3QgYXZhaWxhYmxlIG9uIHRoZSBkZXN0aW5hdGlvbiBzeXN0ZW1cbiAqIG9yIGlmIHRoZXJlIHdhcyBhbiBlcnJvciB3aGlsZSBjaGVja2luZyB0aGUgY2VydGlmaWNhdGVcbiAqIEByZXR1cm5zIHtib29sZWFufSB0cnVlIGlmIHRoZSBnaXZlbiBjZXJ0aWZpY2F0ZSBpcyBhbHJlYWR5IGluc3RhbGxlZFxuICovXG5zeXN0ZW1DYWxsTWV0aG9kcy5pc01pdG1DZXJ0aWZpY2F0ZUluc3RhbGxlZCA9IGFzeW5jIGZ1bmN0aW9uIGlzTWl0bUNlcnRpZmljYXRlSW5zdGFsbGVkIChjZXJ0KSB7XG4gIGNvbnN0IG9wZW5Tc2wgPSBhd2FpdCBnZXRPcGVuU3NsRm9yT3MoKTtcblxuICBpZiAoIV8uaXNCdWZmZXIoY2VydCkpIHtcbiAgICBjZXJ0ID0gQnVmZmVyLmZyb20oY2VydCwgJ2Jhc2U2NCcpO1xuICB9XG5cbiAgY29uc3QgdG1wUm9vdCA9IGF3YWl0IHRlbXBEaXIub3BlbkRpcigpO1xuICBsZXQgY2VydEhhc2g7XG4gIHRyeSB7XG4gICAgY29uc3QgdG1wQ2VydCA9IHBhdGgucmVzb2x2ZSh0bXBSb290LCAnc291cmNlLmNlcicpO1xuICAgIGF3YWl0IGZzLndyaXRlRmlsZSh0bXBDZXJ0LCBjZXJ0KTtcbiAgICBjb25zdCB7c3Rkb3V0fSA9IGF3YWl0IGV4ZWMob3BlblNzbCwgWyd4NTA5JywgJy1ub291dCcsICctaGFzaCcsICctaW4nLCB0bXBDZXJ0XSk7XG4gICAgY2VydEhhc2ggPSBzdGRvdXQudHJpbSgpO1xuICB9IGNhdGNoIChlcnIpIHtcbiAgICB0aHJvdyBuZXcgRXJyb3IoYENhbm5vdCByZXRyaWV2ZSB0aGUgY2VydGlmaWNhdGUgaGFzaC4gYCArXG4gICAgICAgICAgICAgICAgICAgIGBJcyB0aGUgY2VydGlmaWNhdGUgcHJvcGVybHkgZW5jb2RlZCBpbnRvIGJhc2U2NC1zdHJpbmc/IGAgK1xuICAgICAgICAgICAgICAgICAgICBgT3JpZ2luYWwgZXJyb3I6ICR7ZXJyLm1lc3NhZ2V9YCk7XG4gIH0gZmluYWxseSB7XG4gICAgYXdhaXQgZnMucmltcmFmKHRtcFJvb3QpO1xuICB9XG4gIGNvbnN0IGRzdFBhdGggPSBwYXRoLnBvc2l4LnJlc29sdmUoQ0VSVFNfUk9PVCwgYCR7Y2VydEhhc2h9LjBgKTtcbiAgbG9nLmRlYnVnKGBDaGVja2luZyBpZiB0aGUgY2VydGlmaWNhdGUgaXMgYWxyZWFkeSBpbnN0YWxsZWQgYXQgJyR7ZHN0UGF0aH0nYCk7XG4gIHJldHVybiBhd2FpdCB0aGlzLmZpbGVFeGlzdHMoZHN0UGF0aCk7XG59O1xuXG5leHBvcnQgZGVmYXVsdCBzeXN0ZW1DYWxsTWV0aG9kcztcbmV4cG9ydCB7IERFRkFVTFRfQURCX0VYRUNfVElNRU9VVCwgZ2V0QW5kcm9pZEJpbmFyeVBhdGggfTtcbiJdLCJmaWxlIjoibGliL3Rvb2xzL3N5c3RlbS1jYWxscy5qcyIsInNvdXJjZVJvb3QiOiIuLi8uLi8uLiJ9
