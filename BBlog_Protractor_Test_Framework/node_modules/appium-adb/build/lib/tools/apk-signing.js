"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

require("source-map-support/register");

var _lodash = _interopRequireDefault(require("lodash"));

var _fs2 = _interopRequireDefault(require("fs"));

var _teen_process = require("teen_process");

var _path = _interopRequireDefault(require("path"));

var _logger = _interopRequireDefault(require("../logger.js"));

var _appiumSupport = require("appium-support");

var _helpers = require("../helpers.js");

const DEFAULT_PRIVATE_KEY = _path.default.resolve(_helpers.rootDir, 'keys', 'testkey.pk8');

const DEFAULT_CERTIFICATE = _path.default.resolve(_helpers.rootDir, 'keys', 'testkey.x509.pem');

const BUNDLETOOL_TUTORIAL = 'https://developer.android.com/studio/command-line/bundletool';
const APKSIGNER_VERIFY_FAIL = 'DOES NOT VERIFY';
const SHA1 = 'sha1';
const SHA256 = 'sha256';
const SHA512 = 'sha512';
const MD5 = 'md5';
const DEFAULT_CERT_HASH = {
  [SHA256]: 'a40da80a59d170caa950cf15c18c454d47a39b26989d8b640ecd745ba71bf5dc'
};
let apkSigningMethods = {};

apkSigningMethods.executeApksigner = async function executeApksigner(args = []) {
  const apkSignerJar = await (0, _helpers.getApksignerForOs)(this);
  const fullCmd = [await (0, _helpers.getJavaForOs)(), '-Xmx1024M', '-Xss1m', '-jar', apkSignerJar, ...args];

  _logger.default.debug(`Starting apksigner: ${_appiumSupport.util.quote(fullCmd)}`);

  const {
    stdout,
    stderr
  } = await (0, _teen_process.exec)(fullCmd[0], fullCmd.slice(1));

  for (let [name, stream] of [['stdout', stdout], ['stderr', stderr]]) {
    if (!_lodash.default.trim(stream)) {
      continue;
    }

    if (name === 'stdout') {
      stream = stream.split('\n').filter(line => !line.includes('WARNING:')).join('\n');
    }

    _logger.default.debug(`apksigner ${name}: ${stream}`);
  }

  return stdout;
};

apkSigningMethods.signWithDefaultCert = async function signWithDefaultCert(apk) {
  _logger.default.debug(`Signing '${apk}' with default cert`);

  if (!(await _appiumSupport.fs.exists(apk))) {
    throw new Error(`${apk} file doesn't exist.`);
  }

  const args = ['sign', '--key', DEFAULT_PRIVATE_KEY, '--cert', DEFAULT_CERTIFICATE, apk];

  try {
    await this.executeApksigner(args);
  } catch (e) {
    throw new Error(`Could not sign '${apk}' with the default certificate. ` + `Original error: ${e.stderr || e.message}`);
  }
};

apkSigningMethods.signWithCustomCert = async function signWithCustomCert(apk) {
  _logger.default.debug(`Signing '${apk}' with custom cert`);

  if (!(await _appiumSupport.fs.exists(this.keystorePath))) {
    throw new Error(`Keystore: ${this.keystorePath} doesn't exist.`);
  }

  if (!(await _appiumSupport.fs.exists(apk))) {
    throw new Error(`'${apk}' doesn't exist.`);
  }

  try {
    await this.executeApksigner(['sign', '--ks', this.keystorePath, '--ks-key-alias', this.keyAlias, '--ks-pass', `pass:${this.keystorePassword}`, '--key-pass', `pass:${this.keyPassword}`, apk]);
  } catch (err) {
    _logger.default.warn(`Cannot use apksigner tool for signing. Defaulting to jarsigner. ` + `Original error: ${err.stderr || err.message}`);

    try {
      if (await (0, _helpers.unsignApk)(apk)) {
        _logger.default.debug(`'${apk}' has been successfully unsigned`);
      } else {
        _logger.default.debug(`'${apk}' does not need to be unsigned`);
      }

      const jarsigner = _path.default.resolve(await (0, _helpers.getJavaHome)(), 'bin', `jarsigner${_appiumSupport.system.isWindows() ? '.exe' : ''}`);

      const fullCmd = [jarsigner, '-sigalg', 'MD5withRSA', '-digestalg', 'SHA1', '-keystore', this.keystorePath, '-storepass', this.keystorePassword, '-keypass', this.keyPassword, apk, this.keyAlias];

      _logger.default.debug(`Starting jarsigner: ${_appiumSupport.util.quote(fullCmd)}`);

      await (0, _teen_process.exec)(fullCmd[0], fullCmd.slice(1));
    } catch (e) {
      throw new Error(`Could not sign with custom certificate. ` + `Original error: ${e.stderr || e.message}`);
    }
  }
};

apkSigningMethods.sign = async function sign(appPath) {
  if (appPath.endsWith(_helpers.APKS_EXTENSION)) {
    let message = 'Signing of .apks-files is not supported. ';

    if (this.useKeystore) {
      message += 'Consider manual application bundle signing with the custom keystore ' + `like it is described at ${BUNDLETOOL_TUTORIAL}`;
    } else {
      message += `Consider manual application bundle signing with the key at '${DEFAULT_PRIVATE_KEY}' ` + `and the certificate at '${DEFAULT_CERTIFICATE}'. Read ${BUNDLETOOL_TUTORIAL} for more details.`;
    }

    _logger.default.warn(message);

    return;
  }

  let apksignerFound = true;

  try {
    await (0, _helpers.getApksignerForOs)(this);
  } catch (err) {
    apksignerFound = false;
  }

  if (apksignerFound) {
    await this.zipAlignApk(appPath);
  }

  if (this.useKeystore) {
    await this.signWithCustomCert(appPath);
  } else {
    await this.signWithDefaultCert(appPath);
  }

  if (!apksignerFound) {
    await this.zipAlignApk(appPath);
  }
};

apkSigningMethods.zipAlignApk = async function zipAlignApk(apk) {
  await this.initZipAlign();

  try {
    await (0, _teen_process.exec)(this.binaries.zipalign, ['-c', '4', apk]);

    _logger.default.debug(`${apk}' is already zip-aligned. Doing nothing`);

    return false;
  } catch (e) {
    _logger.default.debug(`'${apk}' is not zip-aligned. Aligning`);
  }

  try {
    await _appiumSupport.fs.access(apk, _fs2.default.W_OK);
  } catch (e) {
    throw new Error(`The file at '${apk}' is not writeable. ` + `Please grant write permissions to this file or to its parent folder '${_path.default.dirname(apk)}' ` + `for the Appium process, so it can zip-align the file`);
  }

  const alignedApk = await _appiumSupport.tempDir.path({
    prefix: 'appium',
    suffix: '.tmp'
  });
  await (0, _appiumSupport.mkdirp)(_path.default.dirname(alignedApk));

  try {
    await (0, _teen_process.exec)(this.binaries.zipalign, ['-f', '4', apk, alignedApk]);
    await _appiumSupport.fs.mv(alignedApk, apk, {
      mkdirp: true
    });
    return true;
  } catch (e) {
    if (await _appiumSupport.fs.exists(alignedApk)) {
      await _appiumSupport.fs.unlink(alignedApk);
    }

    throw new Error(`zipAlignApk failed. Original error: ${e.stderr || e.message}`);
  }
};

apkSigningMethods.checkApkCert = async function checkApkCert(appPath, pkg, opts = {}) {
  _logger.default.debug(`Checking app cert for ${appPath}`);

  if (!(await _appiumSupport.fs.exists(appPath))) {
    _logger.default.debug(`'${appPath}' does not exist`);

    return false;
  }

  if (_path.default.extname(appPath) === _helpers.APKS_EXTENSION) {
    appPath = await this.extractBaseApk(appPath);
  }

  const expectedHash = this.useKeystore ? await this.getKeystoreHash(appPath, pkg) : DEFAULT_CERT_HASH;

  const hashMatches = apksignerOutput => {
    for (const [name, value] of _lodash.default.toPairs(expectedHash)) {
      if (new RegExp(`digest:\\s+${value}\\b`, 'i').test(apksignerOutput)) {
        _logger.default.debug(`${name} hash did match for '${_path.default.basename(appPath)}'`);

        return true;
      }
    }

    return false;
  };

  const {
    requireDefaultCert = true
  } = opts;

  try {
    await (0, _helpers.getApksignerForOs)(this);
    const output = await this.executeApksigner(['verify', '--print-certs', appPath]);
    const hasMatch = hashMatches(output);

    if (hasMatch) {
      _logger.default.info(`'${appPath}' is signed with the ` + `${this.useKeystore ? 'keystore' : 'default'} certificate`);
    } else {
      _logger.default.info(`'${appPath}' is signed with a ` + `non-${this.useKeystore ? 'keystore' : 'default'} certificate`);
    }

    return !this.useKeystore && !requireDefaultCert || hasMatch;
  } catch (err) {
    if (_lodash.default.includes(err.stderr, APKSIGNER_VERIFY_FAIL)) {
      _logger.default.info(`'${appPath}' is not signed`);

      return false;
    }

    throw new Error(`Cannot verify the signature of '${appPath}'. ` + `Original error: ${err.stderr || err.message}`);
  }
};

apkSigningMethods.getKeystoreHash = async function getKeystoreHash() {
  _logger.default.debug(`Getting hash of the '${this.keystorePath}' keystore`);

  const keytool = _path.default.resolve(await (0, _helpers.getJavaHome)(), 'bin', `keytool${_appiumSupport.system.isWindows() ? '.exe' : ''}`);

  if (!(await _appiumSupport.fs.exists(keytool))) {
    throw new Error(`The keytool utility cannot be found at '${keytool}'`);
  }

  const args = ['-v', '-list', '-alias', this.keyAlias, '-keystore', this.keystorePath, '-storepass', this.keystorePassword];

  _logger.default.info(`Running '${keytool}' with arguments: ${_appiumSupport.util.quote(args)}`);

  try {
    const {
      stdout
    } = await (0, _teen_process.exec)(keytool, args);
    const result = {};

    for (const hashName of [SHA512, SHA256, SHA1, MD5]) {
      const hashRe = new RegExp(`^\\s*${hashName}:\\s*([a-f0-9:]+)`, 'mi');
      const match = hashRe.exec(stdout);

      if (!match) {
        continue;
      }

      result[hashName] = match[1].replace(/:/g, '').toLowerCase();
    }

    if (_lodash.default.isEmpty(result)) {
      _logger.default.debug(stdout);

      throw new Error('Cannot parse the hash value from the keytool output');
    }

    _logger.default.debug(`Keystore hash: ${JSON.stringify(result)}`);

    return result;
  } catch (e) {
    throw new Error(`Cannot get the hash of '${this.keystorePath}' keystore. ` + `Original error: ${e.stderr || e.message}`);
  }
};

var _default = apkSigningMethods;
exports.default = _default;require('source-map-support').install();


//# sourceMappingURL=data:application/json;charset=utf8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbImxpYi90b29scy9hcGstc2lnbmluZy5qcyJdLCJuYW1lcyI6WyJERUZBVUxUX1BSSVZBVEVfS0VZIiwicGF0aCIsInJlc29sdmUiLCJyb290RGlyIiwiREVGQVVMVF9DRVJUSUZJQ0FURSIsIkJVTkRMRVRPT0xfVFVUT1JJQUwiLCJBUEtTSUdORVJfVkVSSUZZX0ZBSUwiLCJTSEExIiwiU0hBMjU2IiwiU0hBNTEyIiwiTUQ1IiwiREVGQVVMVF9DRVJUX0hBU0giLCJhcGtTaWduaW5nTWV0aG9kcyIsImV4ZWN1dGVBcGtzaWduZXIiLCJhcmdzIiwiYXBrU2lnbmVySmFyIiwiZnVsbENtZCIsImxvZyIsImRlYnVnIiwidXRpbCIsInF1b3RlIiwic3Rkb3V0Iiwic3RkZXJyIiwic2xpY2UiLCJuYW1lIiwic3RyZWFtIiwiXyIsInRyaW0iLCJzcGxpdCIsImZpbHRlciIsImxpbmUiLCJpbmNsdWRlcyIsImpvaW4iLCJzaWduV2l0aERlZmF1bHRDZXJ0IiwiYXBrIiwiZnMiLCJleGlzdHMiLCJFcnJvciIsImUiLCJtZXNzYWdlIiwic2lnbldpdGhDdXN0b21DZXJ0Iiwia2V5c3RvcmVQYXRoIiwia2V5QWxpYXMiLCJrZXlzdG9yZVBhc3N3b3JkIiwia2V5UGFzc3dvcmQiLCJlcnIiLCJ3YXJuIiwiamFyc2lnbmVyIiwic3lzdGVtIiwiaXNXaW5kb3dzIiwic2lnbiIsImFwcFBhdGgiLCJlbmRzV2l0aCIsIkFQS1NfRVhURU5TSU9OIiwidXNlS2V5c3RvcmUiLCJhcGtzaWduZXJGb3VuZCIsInppcEFsaWduQXBrIiwiaW5pdFppcEFsaWduIiwiYmluYXJpZXMiLCJ6aXBhbGlnbiIsImFjY2VzcyIsIl9mcyIsIldfT0siLCJkaXJuYW1lIiwiYWxpZ25lZEFwayIsInRlbXBEaXIiLCJwcmVmaXgiLCJzdWZmaXgiLCJtdiIsIm1rZGlycCIsInVubGluayIsImNoZWNrQXBrQ2VydCIsInBrZyIsIm9wdHMiLCJleHRuYW1lIiwiZXh0cmFjdEJhc2VBcGsiLCJleHBlY3RlZEhhc2giLCJnZXRLZXlzdG9yZUhhc2giLCJoYXNoTWF0Y2hlcyIsImFwa3NpZ25lck91dHB1dCIsInZhbHVlIiwidG9QYWlycyIsIlJlZ0V4cCIsInRlc3QiLCJiYXNlbmFtZSIsInJlcXVpcmVEZWZhdWx0Q2VydCIsIm91dHB1dCIsImhhc01hdGNoIiwiaW5mbyIsImtleXRvb2wiLCJyZXN1bHQiLCJoYXNoTmFtZSIsImhhc2hSZSIsIm1hdGNoIiwiZXhlYyIsInJlcGxhY2UiLCJ0b0xvd2VyQ2FzZSIsImlzRW1wdHkiLCJKU09OIiwic3RyaW5naWZ5Il0sIm1hcHBpbmdzIjoiOzs7Ozs7Ozs7OztBQUFBOztBQUNBOztBQUNBOztBQUNBOztBQUNBOztBQUNBOztBQUNBOztBQUtBLE1BQU1BLG1CQUFtQixHQUFHQyxjQUFLQyxPQUFMLENBQWFDLGdCQUFiLEVBQXNCLE1BQXRCLEVBQThCLGFBQTlCLENBQTVCOztBQUNBLE1BQU1DLG1CQUFtQixHQUFHSCxjQUFLQyxPQUFMLENBQWFDLGdCQUFiLEVBQXNCLE1BQXRCLEVBQThCLGtCQUE5QixDQUE1Qjs7QUFDQSxNQUFNRSxtQkFBbUIsR0FBRyw4REFBNUI7QUFDQSxNQUFNQyxxQkFBcUIsR0FBRyxpQkFBOUI7QUFDQSxNQUFNQyxJQUFJLEdBQUcsTUFBYjtBQUNBLE1BQU1DLE1BQU0sR0FBRyxRQUFmO0FBQ0EsTUFBTUMsTUFBTSxHQUFHLFFBQWY7QUFDQSxNQUFNQyxHQUFHLEdBQUcsS0FBWjtBQUNBLE1BQU1DLGlCQUFpQixHQUFHO0FBQ3hCLEdBQUNILE1BQUQsR0FBVTtBQURjLENBQTFCO0FBS0EsSUFBSUksaUJBQWlCLEdBQUcsRUFBeEI7O0FBVUFBLGlCQUFpQixDQUFDQyxnQkFBbEIsR0FBcUMsZUFBZUEsZ0JBQWYsQ0FBaUNDLElBQUksR0FBRyxFQUF4QyxFQUE0QztBQUMvRSxRQUFNQyxZQUFZLEdBQUcsTUFBTSxnQ0FBa0IsSUFBbEIsQ0FBM0I7QUFDQSxRQUFNQyxPQUFPLEdBQUcsQ0FDZCxNQUFNLDRCQURRLEVBQ1EsV0FEUixFQUNx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QUFMLEVBQVk7QUFDVjtBQUNEOztBQUNESCxNQUFBQSxNQUFNLENBQUNDLFFBQUQsQ0FBTixHQUFtQkUsS0FBSyxDQUFDLENBQUQsQ0FBTCxDQUFTRSxPQUFULENBQWlCLElBQWpCLEVBQXVCLEVBQXZCLEVBQTJCQyxXQUEzQixFQUFuQjtBQUNEOztBQUNELFFBQUl0RSxnQkFBRXVFLE9BQUYsQ0FBVVAsTUFBVixDQUFKLEVBQXVCO0FBQ3JCekUsc0JBQUlDLEtBQUosQ0FBVUcsTUFBVjs7QUFDQSxZQUFNLElBQUlnQixLQUFKLENBQVUscURBQVYsQ0FBTjtBQUNEOztBQUNEcEIsb0JBQUlDLEtBQUosQ0FBVyxrQkFBaUJnRixJQUFJLENBQUNDLFNBQUwsQ0FBZVQsTUFBZixDQUF1QixFQUFuRDs7QUFDQSxXQUFPQSxNQUFQO0FBQ0QsR0FqQkQsQ0FpQkUsT0FBT3BELENBQVAsRUFBVTtBQUNWLFVBQU0sSUFBSUQsS0FBSixDQUFXLDJCQUEwQixLQUFLSSxZQUFhLGNBQTdDLEdBQ2IsbUJBQWtCSCxDQUFDLENBQUNoQixNQUFGLElBQVlnQixDQUFDLENBQUNDLE9BQVEsRUFEckMsQ0FBTjtBQUVEO0FBQ0YsQ0FuQ0Q7O2VBcUNlM0IsaUIiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgXyBmcm9tICdsb2Rhc2gnO1xuaW1wb3J0IF9mcyBmcm9tICdmcyc7XG5pbXBvcnQgeyBleGVjIH0gZnJvbSAndGVlbl9wcm9jZXNzJztcbmltcG9ydCBwYXRoIGZyb20gJ3BhdGgnO1xuaW1wb3J0IGxvZyBmcm9tICcuLi9sb2dnZXIuanMnO1xuaW1wb3J0IHsgdGVtcERpciwgc3lzdGVtLCBta2RpcnAsIGZzLCB1dGlsIH0gZnJvbSAnYXBwaXVtLXN1cHBvcnQnO1xuaW1wb3J0IHtcbiAgZ2V0SmF2YUZvck9zLCBnZXRBcGtzaWduZXJGb3JPcywgZ2V0SmF2YUhvbWUsXG4gIHJvb3REaXIsIEFQS1NfRVhURU5TSU9OLCB1bnNpZ25BcGssXG59IGZyb20gJy4uL2hlbHBlcnMuanMnO1xuXG5jb25zdCBERUZBVUxUX1BSSVZBVEVfS0VZID0gcGF0aC5yZXNvbHZlKHJvb3REaXIsICdrZXlzJywgJ3Rlc3RrZXkucGs4Jyk7XG5jb25zdCBERUZBVUxUX0NFUlRJRklDQVRFID0gcGF0aC5yZXNvbHZlKHJvb3REaXIsICdrZXlzJywgJ3Rlc3RrZXkueDUwOS5wZW0nKTtcbmNvbnN0IEJVTkRMRVRPT0xfVFVUT1JJQUwgPSAnaHR0cHM6Ly9kZXZlbG9wZXIuYW5kcm9pZC5jb20vc3R1ZGlvL2NvbW1hbmQtbGluZS9idW5kbGV0b29sJztcbmNvbnN0IEFQS1NJR05FUl9WRVJJRllfRkFJTCA9ICdET0VTIE5PVCBWRVJJRlknO1xuY29uc3QgU0hBMSA9ICdzaGExJztcbmNvbnN0IFNIQTI1NiA9ICdzaGEyNTYnO1xuY29uc3QgU0hBNTEyID0gJ3NoYTUxMic7XG5jb25zdCBNRDUgPSAnbWQ1JztcbmNvbnN0IERFRkFVTFRfQ0VSVF9IQVNIID0ge1xuICBbU0hBMjU2XTogJ2E0MGRhODBhNTlkMTcwY2FhOTUwY2YxNWMxOGM0NTRkNDdhMzliMjY5ODlkOGI2NDBlY2Q3NDViYTcxYmY1ZGMnXG59O1xuXG5cbmxldCBhcGtTaWduaW5nTWV0aG9kcyA9IHt9O1xuXG4vKipcbiAqIEV4ZWN1dGUgYXBrc2lnbmVyIHV0aWxpdHkgd2l0aCBnaXZlbiBhcmd1bWVudHMuXG4gKlxuICogQHBhcmFtIHs/QXJyYXk8U3RyaW5nPn0gYXJncyAtIFRoZSBsaXN0IG9mIHRvb2wgYXJndW1lbnRzLlxuICogQHJldHVybiB7c3RyaW5nfSAtIENvbW1hbmQgc3Rkb3V0XG4gKiBAdGhyb3dzIHtFcnJvcn0gSWYgYXBrc2lnbmVyIGJpbmFyeSBpcyBub3QgcHJlc2VudCBvbiB0aGUgbG9jYWwgZmlsZSBzeXN0ZW1cbiAqICAgICAgICAgICAgICAgICBvciB0aGUgcmV0dXJuIGNvZGUgaXMgbm90IGVxdWFsIHRvIHplcm8uXG4gKi9cbmFwa1NpZ25pbmdNZXRob2RzLmV4ZWN1dGVBcGtzaWduZXIgPSBhc3luYyBmdW5jdGlvbiBleGVjdXRlQXBrc2lnbmVyIChhcmdzID0gW10pIHtcbiAgY29uc3QgYXBrU2lnbmVySmFyID0gYXdhaXQgZ2V0QXBrc2lnbmVyRm9yT3ModGhpcyk7XG4gIGNvbnN0IGZ1bGxDbWQgPSBbXG4gICAgYXdhaXQgZ2V0SmF2YUZvck9zKCksICctWG14MTAyNE0nLCAnLVhzczFtJyxcbiAgICAnLWphcicsIGFwa1NpZ25lckphcixcbiAgICAuLi5hcmdzXG4gIF07XG4gIGxvZy5kZWJ1ZyhgU3RhcnRpbmcgYXBrc2lnbmVyOiAke3V0aWwucXVvdGUoZnVsbENtZCl9YCk7XG4gIGNvbnN0IHtzdGRvdXQsIHN0ZGVycn0gPSBhd2FpdCBleGVjKGZ1bGxDbWRbMF0sIGZ1bGxDbWQuc2xpY2UoMSkpO1xuICBmb3IgKGxldCBbbmFtZSwgc3RyZWFtXSBvZiBbWydzdGRvdXQnLCBzdGRvdXRdLCBbJ3N0ZGVycicsIHN0ZGVycl1dKSB7XG4gICAgaWYgKCFfLnRyaW0oc3RyZWFtKSkge1xuICAgICAgY29udGludWU7XG4gICAgfVxuXG4gICAgaWYgKG5hbWUgPT09ICdzdGRvdXQnKSB7XG4gICAgICAvLyBNYWtlIHRoZSBvdXRwdXQgbGVzcyB0YWxrYXRpdmVcbiAgICAgIHN0cmVhbSA9IHN0cmVhbS5zcGxpdCgnXFxuJylcbiAgICAgICAgLmZpbHRlcigobGluZSkgPT4gIWxpbmUuaW5jbHVkZXMoJ1dBUk5JTkc6JykpXG4gICAgICAgIC5qb2luKCdcXG4nKTtcbiAgICB9XG4gICAgbG9nLmRlYnVnKGBhcGtzaWduZXIgJHtuYW1lfTogJHtzdHJlYW19YCk7XG4gIH1cbiAgcmV0dXJuIHN0ZG91dDtcbn07XG5cbi8qKlxuICogKFJlKXNpZ24gdGhlIGdpdmVuIGFwayBmaWxlIG9uIHRoZSBsb2NhbCBmaWxlIHN5c3RlbSB3aXRoIHRoZSBkZWZhdWx0IGNlcnRpZmljYXRlLlxuICpcbiAqIEBwYXJhbSB7c3RyaW5nfSBhcGsgLSBUaGUgZnVsbCBwYXRoIHRvIHRoZSBsb2NhbCBhcGsgZmlsZS5cbiAqIEB0aHJvd3Mge0Vycm9yfSBJZiBzaWduaW5nIGZhaWxzLlxuICovXG5hcGtTaWduaW5nTWV0aG9kcy5zaWduV2l0aERlZmF1bHRDZXJ0ID0gYXN5bmMgZnVuY3Rpb24gc2lnbldpdGhEZWZhdWx0Q2VydCAoYXBrKSB7XG4gIGxvZy5kZWJ1ZyhgU2lnbmluZyAnJHthcGt9JyB3aXRoIGRlZmF1bHQgY2VydGApO1xuICBpZiAoIShhd2FpdCBmcy5leGlzdHMoYXBrKSkpIHtcbiAgICB0aHJvdyBuZXcgRXJyb3IoYCR7YXBrfSBmaWxlIGRvZXNuJ3QgZXhpc3QuYCk7XG4gIH1cblxuICBjb25zdCBhcmdzID0gW1xuICAgICdzaWduJyxcbiAgICAnLS1rZXknLCBERUZBVUxUX1BSSVZBVEVfS0VZLFxuICAgICctLWNlcnQnLCBERUZBVUxUX0NFUlRJRklDQVRFLFxuICAgIGFwayxcbiAgXTtcbiAgdHJ5IHtcbiAgICBhd2FpdCB0aGlzLmV4ZWN1dGVBcGtzaWduZXIoYXJncyk7XG4gIH0gY2F0Y2ggKGUpIHtcbiAgICB0aHJvdyBuZXcgRXJyb3IoYENvdWxkIG5vdCBzaWduICcke2Fwa30nIHdpdGggdGhlIGRlZmF1bHQgY2VydGlmaWNhdGUuIGAgK1xuICAgICAgYE9yaWdpbmFsIGVycm9yOiAke2Uuc3RkZXJyIHx8IGUubWVzc2FnZX1gKTtcbiAgfVxufTtcblxuLyoqXG4gKiAoUmUpc2lnbiB0aGUgZ2l2ZW4gYXBrIGZpbGUgb24gdGhlIGxvY2FsIGZpbGUgc3lzdGVtIHdpdGggYSBjdXN0b20gY2VydGlmaWNhdGUuXG4gKlxuICogQHBhcmFtIHtzdHJpbmd9IGFwayAtIFRoZSBmdWxsIHBhdGggdG8gdGhlIGxvY2FsIGFwayBmaWxlLlxuICogQHRocm93cyB7RXJyb3J9IElmIHNpZ25pbmcgZmFpbHMuXG4gKi9cbmFwa1NpZ25pbmdNZXRob2RzLnNpZ25XaXRoQ3VzdG9tQ2VydCA9IGFzeW5jIGZ1bmN0aW9uIHNpZ25XaXRoQ3VzdG9tQ2VydCAoYXBrKSB7XG4gIGxvZy5kZWJ1ZyhgU2lnbmluZyAnJHthcGt9JyB3aXRoIGN1c3RvbSBjZXJ0YCk7XG4gIGlmICghKGF3YWl0IGZzLmV4aXN0cyh0aGlzLmtleXN0b3JlUGF0aCkpKSB7XG4gICAgdGhyb3cgbmV3IEVycm9yKGBLZXlzdG9yZTogJHt0aGlzLmtleXN0b3JlUGF0aH0gZG9lc24ndCBleGlzdC5gKTtcbiAgfVxuICBpZiAoIShhd2FpdCBmcy5leGlzdHMoYXBrKSkpIHtcbiAgICB0aHJvdyBuZXcgRXJyb3IoYCcke2Fwa30nIGRvZXNuJ3QgZXhpc3QuYCk7XG4gIH1cblxuICB0cnkge1xuICAgIGF3YWl0IHRoaXMuZXhlY3V0ZUFwa3NpZ25lcihbJ3NpZ24nLFxuICAgICAgJy0ta3MnLCB0aGlzLmtleXN0b3JlUGF0aCxcbiAgICAgICctLWtzLWtleS1hbGlhcycsIHRoaXMua2V5QWxpYXMsXG4gICAgICAnLS1rcy1wYXNzJywgYHBhc3M6JHt0aGlzLmtleXN0b3JlUGFzc3dvcmR9YCxcbiAgICAgICctLWtleS1wYXNzJywgYHBhc3M6JHt0aGlzLmtleVBhc3N3b3JkfWAsXG4gICAgICBhcGtdKTtcbiAgfSBjYXRjaCAoZXJyKSB7XG4gICAgbG9nLndhcm4oYENhbm5vdCB1c2UgYXBrc2lnbmVyIHRvb2wgZm9yIHNpZ25pbmcuIERlZmF1bHRpbmcgdG8gamFyc2lnbmVyLiBgICtcbiAgICAgIGBPcmlnaW5hbCBlcnJvcjogJHtlcnIuc3RkZXJyIHx8IGVyci5tZXNzYWdlfWApO1xuICAgIHRyeSB7XG4gICAgICBpZiAoYXdhaXQgdW5zaWduQXBrKGFwaykpIHtcbiAgICAgICAgbG9nLmRlYnVnKGAnJHthcGt9JyBoYXMgYmVlbiBzdWNjZXNzZnVsbHkgdW5zaWduZWRgKTtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIGxvZy5kZWJ1ZyhgJyR7YXBrfScgZG9lcyBub3QgbmVlZCB0byBiZSB1bnNpZ25lZGApO1xuICAgICAgfVxuICAgICAgY29uc3QgamFyc2lnbmVyID0gcGF0aC5yZXNvbHZlKGF3YWl0IGdldEphdmFIb21lKCksICdiaW4nLFxuICAgICAgICBgamFyc2lnbmVyJHtzeXN0ZW0uaXNXaW5kb3dzKCkgPyAnLmV4ZScgOiAnJ31gKTtcbiAgICAgIGNvbnN0IGZ1bGxDbWQgPSBbamFyc2lnbmVyLFxuICAgICAgICAnLXNpZ2FsZycsICdNRDV3aXRoUlNBJyxcbiAgICAgICAgJy1kaWdlc3RhbGcnLCAnU0hBMScsXG4gICAgICAgICcta2V5c3RvcmUnLCB0aGlzLmtleXN0b3JlUGF0aCxcbiAgICAgICAgJy1zdG9yZXBhc3MnLCB0aGlzLmtleXN0b3JlUGFzc3dvcmQsXG4gICAgICAgICcta2V5cGFzcycsIHRoaXMua2V5UGFzc3dvcmQsXG4gICAgICAgIGFwaywgdGhpcy5rZXlBbGlhc107XG4gICAgICBsb2cuZGVidWcoYFN0YXJ0aW5nIGphcnNpZ25lcjogJHt1dGlsLnF1b3RlKGZ1bGxDbWQpfWApO1xuICAgICAgYXdhaXQgZXhlYyhmdWxsQ21kWzBdLCBmdWxsQ21kLnNsaWNlKDEpKTtcbiAgICB9IGNhdGNoIChlKSB7XG4gICAgICB0aHJvdyBuZXcgRXJyb3IoYENvdWxkIG5vdCBzaWduIHdpdGggY3VzdG9tIGNlcnRpZmljYXRlLiBgICtcbiAgICAgICAgYE9yaWdpbmFsIGVycm9yOiAke2Uuc3RkZXJyIHx8IGUubWVzc2FnZX1gKTtcbiAgICB9XG4gIH1cbn07XG5cbi8qKlxuICogKFJlKXNpZ24gdGhlIGdpdmVuIGFwayBmaWxlIG9uIHRoZSBsb2NhbCBmaWxlIHN5c3RlbSB3aXRoIGVpdGhlclxuICogY3VzdG9tIG9yIGRlZmF1bHQgY2VydGlmaWNhdGUgYmFzZWQgb24gX3RoaXMudXNlS2V5c3RvcmVfIHByb3BlcnR5IHZhbHVlXG4gKiBhbmQgWmlwLWFsaWducyBpdCBhZnRlciBzaWduaW5nLlxuICpcbiAqIEBwYXJhbSB7c3RyaW5nfSBhcHBQYXRoIC0gVGhlIGZ1bGwgcGF0aCB0byB0aGUgbG9jYWwgLmFwayhzKSBmaWxlLlxuICogQHRocm93cyB7RXJyb3J9IElmIHNpZ25pbmcgZmFpbHMuXG4gKi9cbmFwa1NpZ25pbmdNZXRob2RzLnNpZ24gPSBhc3luYyBmdW5jdGlvbiBzaWduIChhcHBQYXRoKSB7XG4gIGlmIChhcHBQYXRoLmVuZHNXaXRoKEFQS1NfRVhURU5TSU9OKSkge1xuICAgIGxldCBtZXNzYWdlID0gJ1NpZ25pbmcgb2YgLmFwa3MtZmlsZXMgaXMgbm90IHN1cHBvcnRlZC4gJztcbiAgICBpZiAodGhpcy51c2VLZXlzdG9yZSkge1xuICAgICAgbWVzc2FnZSArPSAnQ29uc2lkZXIgbWFudWFsIGFwcGxpY2F0aW9uIGJ1bmRsZSBzaWduaW5nIHdpdGggdGhlIGN1c3RvbSBrZXlzdG9yZSAnICtcbiAgICAgICAgYGxpa2UgaXQgaXMgZGVzY3JpYmVkIGF0ICR7QlVORExFVE9PTF9UVVRPUklBTH1gO1xuICAgIH0gZWxzZSB7XG4gICAgICBtZXNzYWdlICs9IGBDb25zaWRlciBtYW51YWwgYXBwbGljYXRpb24gYnVuZGxlIHNpZ25pbmcgd2l0aCB0aGUga2V5IGF0ICcke0RFRkFVTFRfUFJJVkFURV9LRVl9JyBgICtcbiAgICAgICAgYGFuZCB0aGUgY2VydGlmaWNhdGUgYXQgJyR7REVGQVVMVF9DRVJUSUZJQ0FURX0nLiBSZWFkICR7QlVORExFVE9PTF9UVVRPUklBTH0gZm9yIG1vcmUgZGV0YWlscy5gO1xuICAgIH1cbiAgICBsb2cud2FybihtZXNzYWdlKTtcbiAgICByZXR1cm47XG4gIH1cblxuICBsZXQgYXBrc2lnbmVyRm91bmQgPSB0cnVlO1xuICB0cnkge1xuICAgIGF3YWl0IGdldEFwa3NpZ25lckZvck9zKHRoaXMpO1xuICB9IGNhdGNoIChlcnIpIHtcbiAgICBhcGtzaWduZXJGb3VuZCA9IGZhbHNlO1xuICB9XG5cbiAgaWYgKGFwa3NpZ25lckZvdW5kKSB7XG4gICAgLy8gaXQgaXMgbmVjZXNzYXJ5IHRvIGFwcGx5IHppcGFsaWduIG9ubHkgYmVmb3JlIHNpZ25pbmdcbiAgICAvLyBpZiBhcGtzaWduZXIgaXMgdXNlZCBvciBvbmx5IGFmdGVyIHNpZ25pbmcgaWYgd2Ugb25seSBoYXZlXG4gICAgLy8gc2lnbi5qYXIgdXRpbGl0eVxuICAgIGF3YWl0IHRoaXMuemlwQWxpZ25BcGsoYXBwUGF0aCk7XG4gIH1cblxuICBpZiAodGhpcy51c2VLZXlzdG9yZSkge1xuICAgIGF3YWl0IHRoaXMuc2lnbldpdGhDdXN0b21DZXJ0KGFwcFBhdGgpO1xuICB9IGVsc2Uge1xuICAgIGF3YWl0IHRoaXMuc2lnbldpdGhEZWZhdWx0Q2VydChhcHBQYXRoKTtcbiAgfVxuXG4gIGlmICghYXBrc2lnbmVyRm91bmQpIHtcbiAgICBhd2FpdCB0aGlzLnppcEFsaWduQXBrKGFwcFBhdGgpO1xuICB9XG59O1xuXG4vKipcbiAqIFBlcmZvcm0gemlwLWFsaWduaW5nIHRvIHRoZSBnaXZlbiBsb2NhbCBhcGsgZmlsZS5cbiAqXG4gKiBAcGFyYW0ge3N0cmluZ30gYXBrIC0gVGhlIGZ1bGwgcGF0aCB0byB0aGUgbG9jYWwgYXBrIGZpbGUuXG4gKiBAcmV0dXJucyB7Ym9vbGVhbn0gVHJ1ZSBpZiB0aGUgYXBrIGhhcyBiZWVuIHN1Y2Nlc3NmdWxseSBhbGlnbmVkXG4gKiBvciBmYWxzZSBpZiB0aGUgYXBrIGhhcyBiZWVuIGFscmVhZHkgYWxpZ25lZC5cbiAqIEB0aHJvd3Mge0Vycm9yfSBJZiB6aXAtYWxpZ24gZmFpbHMuXG4gKi9cbmFwa1NpZ25pbmdNZXRob2RzLnppcEFsaWduQXBrID0gYXN5bmMgZnVuY3Rpb24gemlwQWxpZ25BcGsgKGFwaykge1xuICBhd2FpdCB0aGlzLmluaXRaaXBBbGlnbigpO1xuICB0cnkge1xuICAgIGF3YWl0IGV4ZWModGhpcy5iaW5hcmllcy56aXBhbGlnbiwgWyctYycsICc0JywgYXBrXSk7XG4gICAgbG9nLmRlYnVnKGAke2Fwa30nIGlzIGFscmVhZHkgemlwLWFsaWduZWQuIERvaW5nIG5vdGhpbmdgKTtcbiAgICByZXR1cm4gZmFsc2U7XG4gIH0gY2F0Y2ggKGUpIHtcbiAgICBsb2cuZGVidWcoYCcke2Fwa30nIGlzIG5vdCB6aXAtYWxpZ25lZC4gQWxpZ25pbmdgKTtcbiAgfVxuICB0cnkge1xuICAgIGF3YWl0IGZzLmFjY2VzcyhhcGssIF9mcy5XX09LKTtcbiAgfSBjYXRjaCAoZSkge1xuICAgIHRocm93IG5ldyBFcnJvcihgVGhlIGZpbGUgYXQgJyR7YXBrfScgaXMgbm90IHdyaXRlYWJsZS4gYCArXG4gICAgICBgUGxlYXNlIGdyYW50IHdyaXRlIHBlcm1pc3Npb25zIHRvIHRoaXMgZmlsZSBvciB0byBpdHMgcGFyZW50IGZvbGRlciAnJHtwYXRoLmRpcm5hbWUoYXBrKX0nIGAgK1xuICAgICAgYGZvciB0aGUgQXBwaXVtIHByb2Nlc3MsIHNvIGl0IGNhbiB6aXAtYWxpZ24gdGhlIGZpbGVgKTtcbiAgfVxuICBjb25zdCBhbGlnbmVkQXBrID0gYXdhaXQgdGVtcERpci5wYXRoKHtwcmVmaXg6ICdhcHBpdW0nLCBzdWZmaXg6ICcudG1wJ30pO1xuICBhd2FpdCBta2RpcnAocGF0aC5kaXJuYW1lKGFsaWduZWRBcGspKTtcbiAgdHJ5IHtcbiAgICBhd2FpdCBleGVjKHRoaXMuYmluYXJpZXMuemlwYWxpZ24sIFsnLWYnLCAnNCcsIGFwaywgYWxpZ25lZEFwa10pO1xuICAgIGF3YWl0IGZzLm12KGFsaWduZWRBcGssIGFwaywgeyBta2RpcnA6IHRydWUgfSk7XG4gICAgcmV0dXJuIHRydWU7XG4gIH0gY2F0Y2ggKGUpIHtcbiAgICBpZiAoYXdhaXQgZnMuZXhpc3RzKGFsaWduZWRBcGspKSB7XG4gICAgICBhd2FpdCBmcy51bmxpbmsoYWxpZ25lZEFwayk7XG4gICAgfVxuICAgIHRocm93IG5ldyBFcnJvcihgemlwQWxpZ25BcGsgZmFpbGVkLiBPcmlnaW5hbCBlcnJvcjogJHtlLnN0ZGVyciB8fCBlLm1lc3NhZ2V9YCk7XG4gIH1cbn07XG5cbi8qKlxuICogQHR5cGVkZWYge09iamVjdH0gQ2VydENoZWNrT3B0aW9uc1xuICogQHByb3BlcnR5IHtib29sZWFufSByZXF1aXJlRGVmYXVsdENlcnQgW3RydWVdIFdoZXRoZXIgdG8gcmVxdWlyZSB0aGF0IHRoZSBkZXN0aW5hdGlvbiBBUEtcbiAqIGlzIHNpZ25lZCB3aXRoIHRoZSBkZWZhdWx0IEFwcGl1bSBjZXJ0aWZpY2F0ZSBvciBhbnkgdmFsaWQgY2VydGlmaWNhdGUuIFRoaXMgb3B0aW9uXG4gKiBvbmx5IGhhcyBlZmZlY3QgaWYgYHVzZUtleXN0b3JlYCBwcm9wZXJ0eSBpcyB1bnNldC5cbiAqL1xuXG4vKipcbiAqIENoZWNrIGlmIHRoZSBhcHAgaXMgYWxyZWFkeSBzaWduZWQgd2l0aCB0aGUgZGVmYXVsdCBBcHBpdW0gY2VydGlmaWNhdGUuXG4gKlxuICogQHBhcmFtIHtzdHJpbmd9IGFwcFBhdGggLSBUaGUgZnVsbCBwYXRoIHRvIHRoZSBsb2NhbCAuYXBrKHMpIGZpbGUuXG4gKiBAcGFyYW0ge3N0cmluZ30gcGdrIC0gVGhlIG5hbWUgb2YgYXBwbGljYXRpb24gcGFja2FnZS5cbiAqIEBwYXJhbSB7Q2VydENoZWNrT3B0aW9uc30gb3B0cyAtIENlcnRpZmljYXRlIGNoZWNraW5nIG9wdGlvbnNcbiAqIEByZXR1cm4ge2Jvb2xlYW59IFRydWUgaWYgZ2l2ZW4gYXBwbGljYXRpb24gaXMgYWxyZWFkeSBzaWduZWQuXG4gKi9cbmFwa1NpZ25pbmdNZXRob2RzLmNoZWNrQXBrQ2VydCA9IGFzeW5jIGZ1bmN0aW9uIGNoZWNrQXBrQ2VydCAoYXBwUGF0aCwgcGtnLCBvcHRzID0ge30pIHtcbiAgbG9nLmRlYnVnKGBDaGVja2luZyBhcHAgY2VydCBmb3IgJHthcHBQYXRofWApO1xuICBpZiAoIWF3YWl0IGZzLmV4aXN0cyhhcHBQYXRoKSkge1xuICAgIGxvZy5kZWJ1ZyhgJyR7YXBwUGF0aH0nIGRvZXMgbm90IGV4aXN0YCk7XG4gICAgcmV0dXJuIGZhbHNlO1xuICB9XG5cbiAgaWYgKHBhdGguZXh0bmFtZShhcHBQYXRoKSA9PT0gQVBLU19FWFRFTlNJT04pIHtcbiAgICBhcHBQYXRoID0gYXdhaXQgdGhpcy5leHRyYWN0QmFzZUFwayhhcHBQYXRoKTtcbiAgfVxuXG4gIGNvbnN0IGV4cGVjdGVkSGFzaCA9IHRoaXMudXNlS2V5c3RvcmVcbiAgICA/IGF3YWl0IHRoaXMuZ2V0S2V5c3RvcmVIYXNoKGFwcFBhdGgsIHBrZylcbiAgICA6IERFRkFVTFRfQ0VSVF9IQVNIO1xuXG4gIGNvbnN0IGhhc2hNYXRjaGVzID0gKGFwa3NpZ25lck91dHB1dCkgPT4ge1xuICAgIGZvciAoY29uc3QgW25hbWUsIHZhbHVlXSBvZiBfLnRvUGFpcnMoZXhwZWN0ZWRIYXNoKSkge1xuICAgICAgaWYgKG5ldyBSZWdFeHAoYGRpZ2VzdDpcXFxccyske3ZhbHVlfVxcXFxiYCwgJ2knKS50ZXN0KGFwa3NpZ25lck91dHB1dCkpIHtcbiAgICAgICAgbG9nLmRlYnVnKGAke25hbWV9IGhhc2ggZGlkIG1hdGNoIGZvciAnJHtwYXRoLmJhc2VuYW1lKGFwcFBhdGgpfSdgKTtcbiAgICAgICAgcmV0dXJuIHRydWU7XG4gICAgICB9XG4gICAgfVxuICAgIHJldHVybiBmYWxzZTtcbiAgfTtcblxuICBjb25zdCB7XG4gICAgcmVxdWlyZURlZmF1bHRDZXJ0ID0gdHJ1ZSxcbiAgfSA9IG9wdHM7XG4gIHRyeSB7XG4gICAgYXdhaXQgZ2V0QXBrc2lnbmVyRm9yT3ModGhpcyk7XG4gICAgY29uc3Qgb3V0cHV0ID0gYXdhaXQgdGhpcy5leGVjdXRlQXBrc2lnbmVyKFsndmVyaWZ5JywgJy0tcHJpbnQtY2VydHMnLCBhcHBQYXRoXSk7XG4gICAgY29uc3QgaGFzTWF0Y2ggPSBoYXNoTWF0Y2hlcyhvdXRwdXQpO1xuICAgIGlmIChoYXNNYXRjaCkge1xuICAgICAgbG9nLmluZm8oYCcke2FwcFBhdGh9JyBpcyBzaWduZWQgd2l0aCB0aGUgYCArXG4gICAgICAgIGAke3RoaXMudXNlS2V5c3RvcmUgPyAna2V5c3RvcmUnIDogJ2RlZmF1bHQnfSBjZXJ0aWZpY2F0ZWApO1xuICAgIH0gZWxzZSB7XG4gICAgICBsb2cuaW5mbyhgJyR7YXBwUGF0aH0nIGlzIHNpZ25lZCB3aXRoIGEgYCArXG4gICAgICAgIGBub24tJHt0aGlzLnVzZUtleXN0b3JlID8gJ2tleXN0b3JlJyA6ICdkZWZhdWx0J30gY2VydGlmaWNhdGVgKTtcbiAgICB9XG4gICAgcmV0dXJuICghdGhpcy51c2VLZXlzdG9yZSAmJiAhcmVxdWlyZURlZmF1bHRDZXJ0KSB8fCBoYXNNYXRjaDtcbiAgfSBjYXRjaCAoZXJyKSB7XG4gICAgLy8gY2hlY2sgaWYgdGhlcmUgaXMgbm8gc2lnbmF0dXJlXG4gICAgaWYgKF8uaW5jbHVkZXMoZXJyLnN0ZGVyciwgQVBLU0lHTkVSX1ZFUklGWV9GQUlMKSkge1xuICAgICAgbG9nLmluZm8oYCcke2FwcFBhdGh9JyBpcyBub3Qgc2lnbmVkYCk7XG4gICAgICByZXR1cm4gZmFsc2U7XG4gICAgfVxuICAgIHRocm93IG5ldyBFcnJvcihgQ2Fubm90IHZlcmlmeSB0aGUgc2lnbmF0dXJlIG9mICcke2FwcFBhdGh9Jy4gYCArXG4gICAgICBgT3JpZ2luYWwgZXJyb3I6ICR7ZXJyLnN0ZGVyciB8fCBlcnIubWVzc2FnZX1gKTtcbiAgfVxufTtcblxuLyoqXG4gKiBAdHlwZWRlZiB7T2JqZWN0fSBLZXlzdG9yZUhhc2hcbiAqIEBwcm9wZXJ0eSB7P3N0cmluZ30gbWQ1IHRoZSBtZDUgaGFzaCB2YWx1ZSBvZiB0aGUga2V5c3RvcmVcbiAqIEBwcm9wZXJ0eSB7P3N0cmluZ30gc2hhMSB0aGUgc2hhMSBoYXNoIHZhbHVlIG9mIHRoZSBrZXlzdG9yZVxuICogQHByb3BlcnR5IHs/c3RyaW5nfSBzaGEyNTYgdGhlIHNoYTI1NiBoYXNoIHZhbHVlIG9mIHRoZSBrZXlzdG9yZVxuICogQHByb3BlcnR5IHs/c3RyaW5nfSBzaGE1MTIgdGhlIHNoYTUxMiBoYXNoIHZhbHVlIG9mIHRoZSBrZXlzdG9yZVxuICovXG5cbi8qKlxuICogUmV0cmlldmUgdGhlIHRoZSBoYXNoIG9mIHRoZSBnaXZlbiBrZXlzdG9yZS5cbiAqXG4gKiBAcmV0dXJuIHtLZXlzdG9yZUhhc2h9XG4gKiBAdGhyb3dzIHtFcnJvcn0gSWYgZ2V0dGluZyBrZXlzdG9yZSBoYXNoIGZhaWxzLlxuICovXG5hcGtTaWduaW5nTWV0aG9kcy5nZXRLZXlzdG9yZUhhc2ggPSBhc3luYyBmdW5jdGlvbiBnZXRLZXlzdG9yZUhhc2ggKCkge1xuICBsb2cuZGVidWcoYEdldHRpbmcgaGFzaCBvZiB0aGUgJyR7dGhpcy5rZXlzdG9yZVBhdGh9JyBrZXlzdG9yZWApO1xuICBjb25zdCBrZXl0b29sID0gcGF0aC5yZXNvbHZlKGF3YWl0IGdldEphdmFIb21lKCksICdiaW4nLFxuICAgIGBrZXl0b29sJHtzeXN0ZW0uaXNXaW5kb3dzKCkgPyAnLmV4ZScgOiAnJ31gKTtcbiAgaWYgKCFhd2FpdCBmcy5leGlzdHMoa2V5dG9vbCkpIHtcbiAgICB0aHJvdyBuZXcgRXJyb3IoYFRoZSBrZXl0b29sIHV0aWxpdHkgY2Fubm90IGJlIGZvdW5kIGF0ICcke2tleXRvb2x9J2ApO1xuICB9XG4gIGNvbnN0IGFyZ3MgPSBbXG4gICAgJy12JywgJy1saXN0JyxcbiAgICAnLWFsaWFzJywgdGhpcy5rZXlBbGlhcyxcbiAgICAnLWtleXN0b3JlJywgdGhpcy5rZXlzdG9yZVBhdGgsXG4gICAgJy1zdG9yZXBhc3MnLCB0aGlzLmtleXN0b3JlUGFzc3dvcmRcbiAgXTtcbiAgbG9nLmluZm8oYFJ1bm5pbmcgJyR7a2V5dG9vbH0nIHdpdGggYXJndW1lbnRzOiAke3V0aWwucXVvdGUoYXJncyl9YCk7XG4gIHRyeSB7XG4gICAgY29uc3Qge3N0ZG91dH0gPSBhd2FpdCBleGVjKGtleXRvb2wsIGFyZ3MpO1xuICAgIGNvbnN0IHJlc3VsdCA9IHt9O1xuICAgIGZvciAoY29uc3QgaGFzaE5hbWUgb2YgW1NIQTUxMiwgU0hBMjU2LCBTSEExLCBNRDVdKSB7XG4gICAgICBjb25zdCBoYXNoUmUgPSBuZXcgUmVnRXhwKGBeXFxcXHMqJHtoYXNoTmFtZX06XFxcXHMqKFthLWYwLTk6XSspYCwgJ21pJyk7XG4gICAgICBjb25zdCBtYXRjaCA9IGhhc2hSZS5leGVjKHN0ZG91dCk7XG4gICAgICBpZiAoIW1hdGNoKSB7XG4gICAgICAgIGNvbnRpbnVlO1xuICAgICAgfVxuICAgICAgcmVzdWx0W2hhc2hOYW1lXSA9IG1hdGNoWzFdLnJlcGxhY2UoLzovZywgJycpLnRvTG93ZXJDYXNlKCk7XG4gICAgfVxuICAgIGlmIChfLmlzRW1wdHkocmVzdWx0KSkge1xuICAgICAgbG9nLmRlYnVnKHN0ZG91dCk7XG4gICAgICB0aHJvdyBuZXcgRXJyb3IoJ0Nhbm5vdCBwYXJzZSB0aGUgaGFzaCB2YWx1ZSBmcm9tIHRoZSBrZXl0b29sIG91dHB1dCcpO1xuICAgIH1cbiAgICBsb2cuZGVidWcoYEtleXN0b3JlIGhhc2g6ICR7SlNPTi5zdHJpbmdpZnkocmVzdWx0KX1gKTtcbiAgICByZXR1cm4gcmVzdWx0O1xuICB9IGNhdGNoIChlKSB7XG4gICAgdGhyb3cgbmV3IEVycm9yKGBDYW5ub3QgZ2V0IHRoZSBoYXNoIG9mICcke3RoaXMua2V5c3RvcmVQYXRofScga2V5c3RvcmUuIGAgK1xuICAgICAgYE9yaWdpbmFsIGVycm9yOiAke2Uuc3RkZXJyIHx8IGUubWVzc2FnZX1gKTtcbiAgfVxufTtcblxuZXhwb3J0IGRlZmF1bHQgYXBrU2lnbmluZ01ldGhvZHM7XG4iXSwiZmlsZSI6ImxpYi90b29scy9hcGstc2lnbmluZy5qcyIsInNvdXJjZVJvb3QiOiIuLi8uLi8uLiJ9
