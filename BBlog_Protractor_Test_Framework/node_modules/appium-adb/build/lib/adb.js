"use strict";

var _interopRequireWildcard = require("@babel/runtime/helpers/interopRequireWildcard");

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

Object.defineProperty(exports, "__esModule", {
  value: true
});
Object.defineProperty(exports, "getAndroidBinaryPath", {
  enumerable: true,
  get: function () {
    return _index.getAndroidBinaryPath;
  }
});
Object.defineProperty(exports, "getSdkRootFromEnv", {
  enumerable: true,
  get: function () {
    return _helpers.getSdkRootFromEnv;
  }
});
exports.DEFAULT_ADB_PORT = exports.ADB = exports.default = void 0;

require("source-map-support/register");

var _lodash = _interopRequireDefault(require("lodash"));

var _os = _interopRequireDefault(require("os"));

var _index = _interopRequireWildcard(require("./tools/index.js"));

var _helpers = require("./helpers");

var _logger = _interopRequireDefault(require("./logger.js"));

const DEFAULT_ADB_PORT = 5037;
exports.DEFAULT_ADB_PORT = DEFAULT_ADB_PORT;
const DEFAULT_OPTS = {
  sdkRoot: (0, _helpers.getSdkRootFromEnv)() || null,
  udid: null,
  appDeviceReadyTimeout: null,
  useKeystore: null,
  keystorePath: null,
  keystorePassword: null,
  keyAlias: null,
  keyPassword: null,
  executable: {
    path: 'adb',
    defaultArgs: []
  },
  tmpDir: _os.default.tmpdir(),
  curDeviceId: null,
  emulatorPort: null,
  logcat: null,
  binaries: {},
  instrumentProc: null,
  suppressKillServer: null,
  jars: {},
  adbPort: DEFAULT_ADB_PORT,
  adbExecTimeout: _helpers.DEFAULT_ADB_EXEC_TIMEOUT,
  remoteAppsCacheLimit: 10,
  buildToolsVersion: null,
  allowOfflineDevices: false
};

class ADB {
  constructor(opts = {}) {
    Object.assign(this, opts);

    _lodash.default.defaultsDeep(this, _lodash.default.cloneDeep(DEFAULT_OPTS));

    if (opts.remoteAdbHost) {
      this.executable.defaultArgs.push('-H', opts.remoteAdbHost);
    }

    if (opts.remoteAdbPort) {
      this.adbPort = opts.remoteAdbPort;
    }

    this.executable.defaultArgs.push('-P', this.adbPort);
  }

}

exports.ADB = ADB;

ADB.createADB = async function createADB(opts) {
  const adb = new ADB(opts);
  adb.sdkRoot = await (0, _helpers.requireSdkRoot)(adb.sdkRoot);
  await adb.getAdbWithCorrectAdbPath();

  try {
    await adb.adbExec(['start-server']);
  } catch (e) {
    _logger.default.warn(e.stderr || e.message);
  }

  return adb;
};

for (const [fnName, fn] of _lodash.default.toPairs(_index.default)) {
  ADB.prototype[fnName] = fn;
}

var _default = ADB;
exports.default = _default;require('source-map-support').install();


//# sourceMappingURL=data:application/json;charset=utf8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbImxpYi9hZGIuanMiXSwibmFtZXMiOlsiREVGQVVMVF9BREJfUE9SVCIsIkRFRkFVTFRfT1BUUyIsInNka1Jvb3QiLCJ1ZGlkIiwiYXBwRGV2aWNlUmVhZHlUaW1lb3V0IiwidXNlS2V5c3RvcmUiLCJrZXlzdG9yZVBhdGgiLCJrZXlzdG9yZVBhc3N3b3JkIiwia2V5QWxpYXMiLCJrZXlQYXNzd29yZCIsImV4ZWN1dGFibGUiLCJwYXRoIiwiZGVmYXVsdEFyZ3MiLCJ0bXBEaXIiLCJvcyIsInRtcGRpciIsImN1ckRldmljZUlkIiwiZW11bGF0b3JQb3J0IiwibG9nY2F0IiwiYmluYXJpZXMiLCJpbnN0cnVtZW50UHJvYyIsInN1cHByZXNzS2lsbFNlcnZlciIsImphcnMiLCJhZGJQb3J0IiwiYWRiRXhlY1RpbWVvdXQiLCJERUZBVUxUX0FEQl9FWEVDX1RJTUVPVVQiLCJyZW1vdGVBcHBzQ2FjaGVMaW1pdCIsImJ1aWxkVG9vbHNWZXJzaW9uIiwiYWxsb3dPZmZsaW5lRGV2aWNlcyIsIkFEQiIsImNvbnN0cnVjdG9yIiwib3B0cyIsIk9iamVjdCIsImFzc2lnbiIsIl8iLCJkZWZhdWx0c0RlZXAiLCJjbG9uZURlZXAiLCJyZW1vdGVBZGJIb3N0IiwicHVzaCIsInJlbW90ZUFkYlBvcnQiLCJjcmVhdGVBREIiLCJhZGIiLCJnZXRBZGJXaXRoQ29ycmVjdEFkYlBhdGgiLCJhZGJFeGVjIiwiZSIsImxvZyIsIndhcm4iLCJzdGRlcnIiLCJtZXNzYWdlIiwiZm5OYW1lIiwiZm4iLCJ0b1BhaXJzIiwibWV0aG9kcyIsInByb3RvdHlwZSJdLCJtYXBwaW5ncyI6Ijs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7OztBQUFBOztBQUNBOztBQUNBOztBQUNBOztBQUdBOztBQUVBLE1BQU1BLGdCQUFnQixHQUFHLElBQXpCOztBQUNBLE1BQU1DLFlBQVksR0FBRztBQUNuQkMsRUFBQUEsT0FBTyxFQUFFLHFDQUF1QixJQURiO0FBRW5CQyxFQUFBQSxJQUFJLEVBQUUsSUFGYTtBQUduQkMsRUFBQUEscUJBQXFCLEVBQUUsSUFISjtBQUluQkMsRUFBQUEsV0FBVyxFQUFFLElBSk07QUFLbkJDLEVBQUFBLFlBQVksRUFBRSxJQUxLO0FBTW5CQyxFQUFBQSxnQkFBZ0IsRUFBRSxJQU5DO0FBT25CQyxFQUFBQSxRQUFRLEVBQUUsSUFQUztBQVFuQkMsRUFBQUEsV0FBVyxFQUFFLElBUk07QUFTbkJDLEVBQUFBLFVBQVUsRUFBRTtBQUFDQyxJQUFBQSxJQUFJLEVBQUUsS0FBUDtBQUFjQyxJQUFBQSxXQUFXLEVBQUU7QUFBM0IsR0FUTztBQVVuQkMsRUFBQUEsTUFBTSxFQUFFQyxZQUFHQyxNQUFILEVBVlc7QUFXbkJDLEVBQUFBLFdBQVcsRUFBRSxJQVhNO0FBWW5CQyxFQUFBQSxZQUFZLEVBQUUsSUFaSztBQWFuQkMsRUFBQUEsTUFBTSxFQUFFLElBYlc7QUFjbkJDLEVBQUFBLFFBQVEsRUFBRSxFQWRTO0FBZW5CQyxFQUFBQSxjQUFjLEVBQUUsSUFmRztBQWdCbkJDLEVBQUFBLGtCQUFrQixFQUFFLElBaEJEO0FBaUJuQkMsRUFBQUEsSUFBSSxFQUFFLEVBakJhO0FBa0JuQkMsRUFBQUEsT0FBTyxFQUFFdkIsZ0JBbEJVO0FBbUJuQndCLEVBQUFBLGNBQWMsRUFBRUMsaUNBbkJHO0FBb0JuQkMsRUFBQUEsb0JBQW9CLEVBQUUsRUFwQkg7QUFxQm5CQyxFQUFBQSxpQkFBaUIsRUFBRSxJQXJCQTtBQXNCbkJDLEVBQUFBLG1CQUFtQixFQUFFO0FBdEJGLENBQXJCOztBQXlCQSxNQUFNQyxHQUFOLENBQVU7QUFDUkMsRUFBQUEsV0FBVyxDQUFFQyxJQUFJLEdBQUcsRUFBVCxFQUFhO0FBQ3RCQyxJQUFBQSxNQUFNLENBQUNDLE1BQVAsQ0FBYyxJQUFkLEVBQW9CRixJQUFwQjs7QUFDQUcsb0JBQUVDLFlBQUYsQ0FBZSxJQUFmLEVBQXFCRCxnQkFBRUUsU0FBRixDQUFZbkMsWUFBWixDQUFyQjs7QUFFQSxRQUFJOEIsSUFBSSxDQUFDTSxhQUFULEVBQXdCO0FBQ3RCLFdBQUszQixVQUFMLENBQWdCRSxXQUFoQixDQUE0QjBCLElBQTVCLENBQWlDLElBQWpDLEVBQXVDUCxJQUFJLENBQUNNLGFBQTVDO0FBQ0Q7O0FBR0QsUUFBSU4sSUFBSSxDQUFDUSxhQUFULEVBQXdCO0FBQ3RCLFdBQUtoQixPQUFMLEdBQWVRLElBQUksQ0FBQ1EsYUFBcEI7QUFDRDs7QUFDRCxTQUFLN0IsVUFBTCxDQUFnQkUsV0FBaEIsQ0FBNEIwQixJQUE1QixDQUFpQyxJQUFqQyxFQUF1QyxLQUFLZixPQUE1QztBQUNEOztBQWRPOzs7O0FBaUJWTSxHQUFHLENBQUNXLFNBQUosR0FBZ0IsZUFBZUEsU0FBZixDQUEwQlQsSUFBMUIsRUFBZ0M7QUFDOUMsUUFBTVUsR0FBRyxHQUFHLElBQUlaLEdBQUosQ0FBUUUsSUFBUixDQUFaO0FBQ0FVLEVBQUFBLEdBQUcsQ0FBQ3ZDLE9BQUosR0FBYyxNQUFNLDZCQUFldUMsR0FBRyxDQUFDdkMsT0FBbkIsQ0FBcEI7QUFDQSxRQUFNdUMsR0FBRyxDQUFDQyx3QkFBSixFQUFOOztBQUNBLE1BQUk7QUFDRixVQUFNRCxHQUFHLENBQUNFLE9BQUosQ0FBWSxDQUFDLGNBQUQsQ0FBWixDQUFOO0FBQ0QsR0FGRCxDQUVFLE9BQU9DLENBQVAsRUFBVTtBQUNWQyxvQkFBSUMsSUFBSixDQUFTRixDQUFDLENBQUNHLE1BQUYsSUFBWUgsQ0FBQyxDQUFDSSxPQUF2QjtBQUNEOztBQUNELFNBQU9QLEdBQVA7QUFDRCxDQVZEOztBQWFBLEtBQUssTUFBTSxDQUFDUSxNQUFELEVBQVNDLEVBQVQsQ0FBWCxJQUEyQmhCLGdCQUFFaUIsT0FBRixDQUFVQyxjQUFWLENBQTNCLEVBQStDO0FBQzdDdkIsRUFBQUEsR0FBRyxDQUFDd0IsU0FBSixDQUFjSixNQUFkLElBQXdCQyxFQUF4QjtBQUNEOztlQUVjckIsRyIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCBfIGZyb20gJ2xvZGFzaCc7XG5pbXBvcnQgb3MgZnJvbSAnb3MnO1xuaW1wb3J0IG1ldGhvZHMsIHsgZ2V0QW5kcm9pZEJpbmFyeVBhdGggfSBmcm9tICcuL3Rvb2xzL2luZGV4LmpzJztcbmltcG9ydCB7XG4gIERFRkFVTFRfQURCX0VYRUNfVElNRU9VVCwgcmVxdWlyZVNka1Jvb3QsIGdldFNka1Jvb3RGcm9tRW52XG59IGZyb20gJy4vaGVscGVycyc7XG5pbXBvcnQgbG9nIGZyb20gJy4vbG9nZ2VyLmpzJztcblxuY29uc3QgREVGQVVMVF9BREJfUE9SVCA9IDUwMzc7XG5jb25zdCBERUZBVUxUX09QVFMgPSB7XG4gIHNka1Jvb3Q6IGdldFNka1Jvb3RGcm9tRW52KCkgfHwgbnVsbCxcbiAgdWRpZDogbnVsbCxcbiAgYXBwRGV2aWNlUmVhZHlUaW1lb3V0OiBudWxsLFxuICB1c2VLZXlzdG9yZTogbnVsbCxcbiAga2V5c3RvcmVQYXRoOiBudWxsLFxuICBrZXlzdG9yZVBhc3N3b3JkOiBudWxsLFxuICBrZXlBbGlhczogbnVsbCxcbiAga2V5UGFzc3dvcmQ6IG51bGwsXG4gIGV4ZWN1dGFibGU6IHtwYXRoOiAnYWRiJywgZGVmYXVsdEFyZ3M6IFtdfSxcbiAgdG1wRGlyOiBvcy50bXBkaXIoKSxcbiAgY3VyRGV2aWNlSWQ6IG51bGwsXG4gIGVtdWxhdG9yUG9ydDogbnVsbCxcbiAgbG9nY2F0OiBudWxsLFxuICBiaW5hcmllczoge30sXG4gIGluc3RydW1lbnRQcm9jOiBudWxsLFxuICBzdXBwcmVzc0tpbGxTZXJ2ZXI6IG51bGwsXG4gIGphcnM6IHt9LFxuICBhZGJQb3J0OiBERUZBVUxUX0FEQl9QT1JULFxuICBhZGJFeGVjVGltZW91dDogREVGQVVMVF9BREJfRVhFQ19USU1FT1VULFxuICByZW1vdGVBcHBzQ2FjaGVMaW1pdDogMTAsXG4gIGJ1aWxkVG9vbHNWZXJzaW9uOiBudWxsLFxuICBhbGxvd09mZmxpbmVEZXZpY2VzOiBmYWxzZSxcbn07XG5cbmNsYXNzIEFEQiB7XG4gIGNvbnN0cnVjdG9yIChvcHRzID0ge30pIHtcbiAgICBPYmplY3QuYXNzaWduKHRoaXMsIG9wdHMpO1xuICAgIF8uZGVmYXVsdHNEZWVwKHRoaXMsIF8uY2xvbmVEZWVwKERFRkFVTFRfT1BUUykpO1xuXG4gICAgaWYgKG9wdHMucmVtb3RlQWRiSG9zdCkge1xuICAgICAgdGhpcy5leGVjdXRhYmxlLmRlZmF1bHRBcmdzLnB1c2goJy1IJywgb3B0cy5yZW1vdGVBZGJIb3N0KTtcbiAgICB9XG4gICAgLy8gVE9ETyBmaWd1cmUgb3V0IHdoeSB3ZSBoYXZlIHRoaXMgb3B0aW9uIGFzIGl0IGRvZXMgbm90IGFwcGVhciB0byBiZVxuICAgIC8vIHVzZWQgYW55d2hlcmUuIFByb2JhYmx5IGRlcHJlY2F0ZSBpbiBmYXZvciBvZiBzaW1wbGUgb3B0cy5hZGJQb3J0XG4gICAgaWYgKG9wdHMucmVtb3RlQWRiUG9ydCkge1xuICAgICAgdGhpcy5hZGJQb3J0ID0gb3B0cy5yZW1vdGVBZGJQb3J0O1xuICAgIH1cbiAgICB0aGlzLmV4ZWN1dGFibGUuZGVmYXVsdEFyZ3MucHVzaCgnLVAnLCB0aGlzLmFkYlBvcnQpO1xuICB9XG59XG5cbkFEQi5jcmVhdGVBREIgPSBhc3luYyBmdW5jdGlvbiBjcmVhdGVBREIgKG9wdHMpIHtcbiAgY29uc3QgYWRiID0gbmV3IEFEQihvcHRzKTtcbiAgYWRiLnNka1Jvb3QgPSBhd2FpdCByZXF1aXJlU2RrUm9vdChhZGIuc2RrUm9vdCk7XG4gIGF3YWl0IGFkYi5nZXRBZGJXaXRoQ29ycmVjdEFkYlBhdGgoKTtcbiAgdHJ5IHtcbiAgICBhd2FpdCBhZGIuYWRiRXhlYyhbJ3N0YXJ0LXNlcnZlciddKTtcbiAgfSBjYXRjaCAoZSkge1xuICAgIGxvZy53YXJuKGUuc3RkZXJyIHx8IGUubWVzc2FnZSk7XG4gIH1cbiAgcmV0dXJuIGFkYjtcbn07XG5cbi8vIGFkZCBhbGwgdGhlIG1ldGhvZHMgdG8gdGhlIEFEQiBwcm90b3R5cGVcbmZvciAoY29uc3QgW2ZuTmFtZSwgZm5dIG9mIF8udG9QYWlycyhtZXRob2RzKSkge1xuICBBREIucHJvdG90eXBlW2ZuTmFtZV0gPSBmbjtcbn1cblxuZXhwb3J0IGRlZmF1bHQgQURCO1xuZXhwb3J0IHsgQURCLCBERUZBVUxUX0FEQl9QT1JULCBnZXRBbmRyb2lkQmluYXJ5UGF0aCwgZ2V0U2RrUm9vdEZyb21FbnYgfTtcbiJdLCJmaWxlIjoibGliL2FkYi5qcyIsInNvdXJjZVJvb3QiOiIuLi8uLiJ9
